<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libprelude-idmef-tree-wrap">
<refmeta>
<refentrytitle role="top_of_page" id="libprelude-idmef-tree-wrap.top_of_page">idmef-tree-wrap</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBPRELUDE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>idmef-tree-wrap</refname>
<refpurpose>Generating events using the low level IDMEF API</refpurpose>
</refnamediv>

<refsynopsisdiv id="libprelude-idmef-tree-wrap.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="IDMEF-LIST-APPEND--CAPS">IDMEF_LIST_APPEND</link>
#define             <link linkend="IDMEF-LIST-PREPEND--CAPS">IDMEF_LIST_PREPEND</link>
<link linkend="int">int</link>                 <link linkend="idmef-message-get-data">idmef_message_get_data</link>              (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         unsigned <link linkend="char">char</link> **data,
                                                         <link linkend="size-t">size_t</link> *size);
<link linkend="int">int</link>                 <link linkend="idmef-message-get-number">idmef_message_get_number</link>            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="double">double</link> *result);
<link linkend="int">int</link>                 <link linkend="idmef-message-get-string">idmef_message_get_string</link>            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="char">char</link> **result);
<link linkend="int">int</link>                 <link linkend="idmef-message-get-value">idmef_message_get_value</link>             (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="idmef-value-t">idmef_value_t</link> **value);
<link linkend="int">int</link>                 <link linkend="idmef-message-set-data">idmef_message_set_data</link>              (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> size);
<link linkend="int">int</link>                 <link linkend="idmef-message-set-number">idmef_message_set_number</link>            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="double">double</link> number);
<link linkend="int">int</link>                 <link linkend="idmef-message-set-string">idmef_message_set_string</link>            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *value);
<link linkend="int">int</link>                 <link linkend="idmef-message-set-value">idmef_message_set_value</link>             (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="idmef-value-t">idmef_value_t</link> *value);
enum                <link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link>;
<link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link>  <link linkend="idmef-additional-data-type-to-numeric">idmef_additional_data_type_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-additional-data-type-to-string">idmef_additional_data_type_to_string</link>
                                                        (<link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link> val);
typedef             <link linkend="idmef-additional-data-t">idmef_additional_data_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-additional-data-new">idmef_additional_data_new</link>           (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-additional-data-copy">idmef_additional_data_copy</link>          (const <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *src,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-additional-data-clone">idmef_additional_data_clone</link>         (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *src,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **dst);
<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> * <link linkend="idmef-additional-data-ref">idmef_additional_data_ref</link>     (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *additional_data);
<link linkend="void">void</link>                <link linkend="idmef-additional-data-destroy">idmef_additional_data_destroy</link>       (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);
<link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link>  <link linkend="idmef-additional-data-get-type">idmef_additional_data_get_type</link>
                                                        (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-additional-data-set-type">idmef_additional_data_set_type</link>      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link> type);
<link linkend="int">int</link>                 <link linkend="idmef-additional-data-new-type">idmef_additional_data_new_type</link>      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-additional-data-get-meaning">idmef_additional_data_get_meaning</link>   (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-additional-data-set-meaning">idmef_additional_data_set_meaning</link>   (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *meaning);
<link linkend="int">int</link>                 <link linkend="idmef-additional-data-new-meaning">idmef_additional_data_new_meaning</link>   (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-data-t">idmef_data_t</link> *      <link linkend="idmef-additional-data-get-data">idmef_additional_data_get_data</link>      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-additional-data-set-data">idmef_additional_data_set_data</link>      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> *data);
<link linkend="int">int</link>                 <link linkend="idmef-additional-data-new-data">idmef_additional_data_new_data</link>      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> **ret);
enum                <link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link>;
<link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link>  <link linkend="idmef-reference-origin-to-numeric">idmef_reference_origin_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-reference-origin-to-string">idmef_reference_origin_to_string</link>    (<link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link> val);
typedef             <link linkend="idmef-reference-t">idmef_reference_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-reference-new">idmef_reference_new</link>                 (<link linkend="idmef-reference-t">idmef_reference_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-reference-copy">idmef_reference_copy</link>                (const <link linkend="idmef-reference-t">idmef_reference_t</link> *src,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-reference-clone">idmef_reference_clone</link>               (<link linkend="idmef-reference-t">idmef_reference_t</link> *src,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> **dst);
<link linkend="idmef-reference-t">idmef_reference_t</link> * <link linkend="idmef-reference-ref">idmef_reference_ref</link>                 (<link linkend="idmef-reference-t">idmef_reference_t</link> *reference);
<link linkend="void">void</link>                <link linkend="idmef-reference-destroy">idmef_reference_destroy</link>             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);
<link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link>  <link linkend="idmef-reference-get-origin">idmef_reference_get_origin</link>    (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-reference-set-origin">idmef_reference_set_origin</link>          (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link> origin);
<link linkend="int">int</link>                 <link linkend="idmef-reference-new-origin">idmef_reference_new_origin</link>          (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-reference-get-name">idmef_reference_get_name</link>            (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-reference-set-name">idmef_reference_set_name</link>            (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-reference-new-name">idmef_reference_new_name</link>            (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-reference-get-url">idmef_reference_get_url</link>             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-reference-set-url">idmef_reference_set_url</link>             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *url);
<link linkend="int">int</link>                 <link linkend="idmef-reference-new-url">idmef_reference_new_url</link>             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-reference-get-meaning">idmef_reference_get_meaning</link>         (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-reference-set-meaning">idmef_reference_set_meaning</link>         (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *meaning);
<link linkend="int">int</link>                 <link linkend="idmef-reference-new-meaning">idmef_reference_new_meaning</link>         (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
typedef             <link linkend="idmef-classification-t">idmef_classification_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-classification-new">idmef_classification_new</link>            (<link linkend="idmef-classification-t">idmef_classification_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-classification-copy">idmef_classification_copy</link>           (const <link linkend="idmef-classification-t">idmef_classification_t</link> *src,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-classification-clone">idmef_classification_clone</link>          (<link linkend="idmef-classification-t">idmef_classification_t</link> *src,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> **dst);
<link linkend="idmef-classification-t">idmef_classification_t</link> * <link linkend="idmef-classification-ref">idmef_classification_ref</link>       (<link linkend="idmef-classification-t">idmef_classification_t</link> *classification);
<link linkend="void">void</link>                <link linkend="idmef-classification-destroy">idmef_classification_destroy</link>        (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-classification-get-ident">idmef_classification_get_ident</link>      (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-classification-set-ident">idmef_classification_set_ident</link>      (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-classification-new-ident">idmef_classification_new_ident</link>      (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-classification-get-text">idmef_classification_get_text</link>       (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-classification-set-text">idmef_classification_set_text</link>       (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *text);
<link linkend="int">int</link>                 <link linkend="idmef-classification-new-text">idmef_classification_new_text</link>       (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-reference-t">idmef_reference_t</link> * <link linkend="idmef-classification-get-next-reference">idmef_classification_get_next_reference</link>
                                                        (<link linkend="idmef-classification-t">idmef_classification_t</link> *classification,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> *reference_cur);
<link linkend="void">void</link>                <link linkend="idmef-classification-set-reference">idmef_classification_set_reference</link>  (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-classification-new-reference">idmef_classification_new_reference</link>  (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
enum                <link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link>;
<link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link>  <link linkend="idmef-user-id-type-to-numeric">idmef_user_id_type_to_numeric</link>     (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-user-id-type-to-string">idmef_user_id_type_to_string</link>        (<link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link> val);
typedef             <link linkend="idmef-user-id-t">idmef_user_id_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-user-id-new">idmef_user_id_new</link>                   (<link linkend="idmef-user-id-t">idmef_user_id_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-copy">idmef_user_id_copy</link>                  (const <link linkend="idmef-user-id-t">idmef_user_id_t</link> *src,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-clone">idmef_user_id_clone</link>                 (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *src,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> **dst);
<link linkend="idmef-user-id-t">idmef_user_id_t</link> *   <link linkend="idmef-user-id-ref">idmef_user_id_ref</link>                   (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *user_id);
<link linkend="void">void</link>                <link linkend="idmef-user-id-destroy">idmef_user_id_destroy</link>               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-user-id-get-ident">idmef_user_id_get_ident</link>             (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-user-id-set-ident">idmef_user_id_set_ident</link>             (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-new-ident">idmef_user_id_new_ident</link>             (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link>  <link linkend="idmef-user-id-get-type">idmef_user_id_get_type</link>            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-user-id-set-type">idmef_user_id_set_type</link>              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link> type);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-new-type">idmef_user_id_new_type</link>              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-user-id-get-tty">idmef_user_id_get_tty</link>               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-user-id-set-tty">idmef_user_id_set_tty</link>               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *tty);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-new-tty">idmef_user_id_new_tty</link>               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-user-id-get-name">idmef_user_id_get_name</link>              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-user-id-set-name">idmef_user_id_set_name</link>              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-new-name">idmef_user_id_new_name</link>              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-user-id-unset-number">idmef_user_id_unset_number</link>          (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-user-id-get-number">idmef_user_id_get_number</link>            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-user-id-set-number">idmef_user_id_set_number</link>            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> number);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-new-number">idmef_user_id_new_number</link>            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
enum                <link linkend="idmef-user-category-t">idmef_user_category_t</link>;
<link linkend="idmef-user-category-t">idmef_user_category_t</link>  <link linkend="idmef-user-category-to-numeric">idmef_user_category_to_numeric</link>   (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-user-category-to-string">idmef_user_category_to_string</link>       (<link linkend="idmef-user-category-t">idmef_user_category_t</link> val);
typedef             <link linkend="idmef-user-t">idmef_user_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-user-new">idmef_user_new</link>                      (<link linkend="idmef-user-t">idmef_user_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-user-copy">idmef_user_copy</link>                     (const <link linkend="idmef-user-t">idmef_user_t</link> *src,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-user-clone">idmef_user_clone</link>                    (<link linkend="idmef-user-t">idmef_user_t</link> *src,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> **dst);
<link linkend="idmef-user-t">idmef_user_t</link> *      <link linkend="idmef-user-ref">idmef_user_ref</link>                      (<link linkend="idmef-user-t">idmef_user_t</link> *user);
<link linkend="void">void</link>                <link linkend="idmef-user-destroy">idmef_user_destroy</link>                  (<link linkend="idmef-user-t">idmef_user_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-user-get-ident">idmef_user_get_ident</link>                (<link linkend="idmef-user-t">idmef_user_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-user-set-ident">idmef_user_set_ident</link>                (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-user-new-ident">idmef_user_new_ident</link>                (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-user-category-t">idmef_user_category_t</link>  <link linkend="idmef-user-get-category">idmef_user_get_category</link>          (<link linkend="idmef-user-t">idmef_user_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-user-set-category">idmef_user_set_category</link>             (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-category-t">idmef_user_category_t</link> category);
<link linkend="int">int</link>                 <link linkend="idmef-user-new-category">idmef_user_new_category</link>             (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-category-t">idmef_user_category_t</link> **ret);
<link linkend="idmef-user-id-t">idmef_user_id_t</link> *   <link linkend="idmef-user-get-next-user-id">idmef_user_get_next_user_id</link>         (<link linkend="idmef-user-t">idmef_user_t</link> *user,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *user_id_cur);
<link linkend="void">void</link>                <link linkend="idmef-user-set-user-id">idmef_user_set_user_id</link>              (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-user-new-user-id">idmef_user_new_user_id</link>              (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
enum                <link linkend="idmef-address-category-t">idmef_address_category_t</link>;
<link linkend="idmef-address-category-t">idmef_address_category_t</link>  <link linkend="idmef-address-category-to-numeric">idmef_address_category_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-address-category-to-string">idmef_address_category_to_string</link>    (<link linkend="idmef-address-category-t">idmef_address_category_t</link> val);
typedef             <link linkend="idmef-address-t">idmef_address_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-address-new">idmef_address_new</link>                   (<link linkend="idmef-address-t">idmef_address_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-address-copy">idmef_address_copy</link>                  (const <link linkend="idmef-address-t">idmef_address_t</link> *src,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-address-clone">idmef_address_clone</link>                 (<link linkend="idmef-address-t">idmef_address_t</link> *src,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> **dst);
<link linkend="idmef-address-t">idmef_address_t</link> *   <link linkend="idmef-address-ref">idmef_address_ref</link>                   (<link linkend="idmef-address-t">idmef_address_t</link> *address);
<link linkend="void">void</link>                <link linkend="idmef-address-destroy">idmef_address_destroy</link>               (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-address-get-ident">idmef_address_get_ident</link>             (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-address-set-ident">idmef_address_set_ident</link>             (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-address-new-ident">idmef_address_new_ident</link>             (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-address-category-t">idmef_address_category_t</link>  <link linkend="idmef-address-get-category">idmef_address_get_category</link>    (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-address-set-category">idmef_address_set_category</link>          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="idmef-address-category-t">idmef_address_category_t</link> category);
<link linkend="int">int</link>                 <link linkend="idmef-address-new-category">idmef_address_new_category</link>          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="idmef-address-category-t">idmef_address_category_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-address-get-vlan-name">idmef_address_get_vlan_name</link>         (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-address-set-vlan-name">idmef_address_set_vlan_name</link>         (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *vlan_name);
<link linkend="int">int</link>                 <link linkend="idmef-address-new-vlan-name">idmef_address_new_vlan_name</link>         (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-address-unset-vlan-num">idmef_address_unset_vlan_num</link>        (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="int32-t">int32_t</link> *           <link linkend="idmef-address-get-vlan-num">idmef_address_get_vlan_num</link>          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-address-set-vlan-num">idmef_address_set_vlan_num</link>          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="int32-t">int32_t</link> vlan_num);
<link linkend="int">int</link>                 <link linkend="idmef-address-new-vlan-num">idmef_address_new_vlan_num</link>          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="int32-t">int32_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-address-get-address">idmef_address_get_address</link>           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-address-set-address">idmef_address_set_address</link>           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *address);
<link linkend="int">int</link>                 <link linkend="idmef-address-new-address">idmef_address_new_address</link>           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-address-get-netmask">idmef_address_get_netmask</link>           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-address-set-netmask">idmef_address_set_netmask</link>           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *netmask);
<link linkend="int">int</link>                 <link linkend="idmef-address-new-netmask">idmef_address_new_netmask</link>           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
typedef             <link linkend="idmef-process-t">idmef_process_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-process-new">idmef_process_new</link>                   (<link linkend="idmef-process-t">idmef_process_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-process-copy">idmef_process_copy</link>                  (const <link linkend="idmef-process-t">idmef_process_t</link> *src,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-process-clone">idmef_process_clone</link>                 (<link linkend="idmef-process-t">idmef_process_t</link> *src,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **dst);
<link linkend="idmef-process-t">idmef_process_t</link> *   <link linkend="idmef-process-ref">idmef_process_ref</link>                   (<link linkend="idmef-process-t">idmef_process_t</link> *process);
<link linkend="void">void</link>                <link linkend="idmef-process-destroy">idmef_process_destroy</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-process-get-ident">idmef_process_get_ident</link>             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-process-set-ident">idmef_process_set_ident</link>             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-process-new-ident">idmef_process_new_ident</link>             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-process-get-name">idmef_process_get_name</link>              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-process-set-name">idmef_process_set_name</link>              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-process-new-name">idmef_process_new_name</link>              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-process-unset-pid">idmef_process_unset_pid</link>             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-process-get-pid">idmef_process_get_pid</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-process-set-pid">idmef_process_set_pid</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> pid);
<link linkend="int">int</link>                 <link linkend="idmef-process-new-pid">idmef_process_new_pid</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-process-get-path">idmef_process_get_path</link>              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-process-set-path">idmef_process_set_path</link>              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *path);
<link linkend="int">int</link>                 <link linkend="idmef-process-new-path">idmef_process_new_path</link>              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-process-get-next-arg">idmef_process_get_next_arg</link>          (<link linkend="idmef-process-t">idmef_process_t</link> *process,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);
<link linkend="void">void</link>                <link linkend="idmef-process-set-arg">idmef_process_set_arg</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-process-new-arg">idmef_process_new_arg</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-process-get-next-env">idmef_process_get_next_env</link>          (<link linkend="idmef-process-t">idmef_process_t</link> *process,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);
<link linkend="void">void</link>                <link linkend="idmef-process-set-env">idmef_process_set_env</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-process-new-env">idmef_process_new_env</link>               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
typedef             <link linkend="idmef-web-service-t">idmef_web_service_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-web-service-new">idmef_web_service_new</link>               (<link linkend="idmef-web-service-t">idmef_web_service_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-web-service-copy">idmef_web_service_copy</link>              (const <link linkend="idmef-web-service-t">idmef_web_service_t</link> *src,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-web-service-clone">idmef_web_service_clone</link>             (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *src,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> **dst);
<link linkend="idmef-web-service-t">idmef_web_service_t</link> * <link linkend="idmef-web-service-ref">idmef_web_service_ref</link>             (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *web_service);
<link linkend="void">void</link>                <link linkend="idmef-web-service-destroy">idmef_web_service_destroy</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-web-service-get-url">idmef_web_service_get_url</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-web-service-set-url">idmef_web_service_set_url</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *url);
<link linkend="int">int</link>                 <link linkend="idmef-web-service-new-url">idmef_web_service_new_url</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-web-service-get-cgi">idmef_web_service_get_cgi</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-web-service-set-cgi">idmef_web_service_set_cgi</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *cgi);
<link linkend="int">int</link>                 <link linkend="idmef-web-service-new-cgi">idmef_web_service_new_cgi</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-web-service-get-http-method">idmef_web_service_get_http_method</link>   (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-web-service-set-http-method">idmef_web_service_set_http_method</link>   (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *http_method);
<link linkend="int">int</link>                 <link linkend="idmef-web-service-new-http-method">idmef_web_service_new_http_method</link>   (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-web-service-get-next-arg">idmef_web_service_get_next_arg</link>      (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *web_service,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);
<link linkend="void">void</link>                <link linkend="idmef-web-service-set-arg">idmef_web_service_set_arg</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-web-service-new-arg">idmef_web_service_new_arg</link>           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
typedef             <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new">idmef_snmp_service_new</link>              (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-copy">idmef_snmp_service_copy</link>             (const <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *src,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-clone">idmef_snmp_service_clone</link>            (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *src,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> **dst);
<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> * <link linkend="idmef-snmp-service-ref">idmef_snmp_service_ref</link>           (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *snmp_service);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-destroy">idmef_snmp_service_destroy</link>          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-snmp-service-get-oid">idmef_snmp_service_get_oid</link>          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-oid">idmef_snmp_service_set_oid</link>          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *oid);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-oid">idmef_snmp_service_new_oid</link>          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-unset-message-processing-model">idmef_snmp_service_unset_message_processing_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-snmp-service-get-message-processing-model">idmef_snmp_service_get_message_processing_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-message-processing-model">idmef_snmp_service_set_message_processing_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> message_processing_model);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-message-processing-model">idmef_snmp_service_new_message_processing_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-unset-security-model">idmef_snmp_service_unset_security_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-snmp-service-get-security-model">idmef_snmp_service_get_security_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-security-model">idmef_snmp_service_set_security_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> security_model);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-security-model">idmef_snmp_service_new_security_model</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-snmp-service-get-security-name">idmef_snmp_service_get_security_name</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-security-name">idmef_snmp_service_set_security_name</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *security_name);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-security-name">idmef_snmp_service_new_security_name</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-unset-security-level">idmef_snmp_service_unset_security_level</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-snmp-service-get-security-level">idmef_snmp_service_get_security_level</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-security-level">idmef_snmp_service_set_security_level</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> security_level);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-security-level">idmef_snmp_service_new_security_level</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-snmp-service-get-context-name">idmef_snmp_service_get_context_name</link> (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-context-name">idmef_snmp_service_set_context_name</link> (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *context_name);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-context-name">idmef_snmp_service_new_context_name</link> (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-snmp-service-get-context-engine-id">idmef_snmp_service_get_context_engine_id</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-context-engine-id">idmef_snmp_service_set_context_engine_id</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *context_engine_id);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-context-engine-id">idmef_snmp_service_new_context_engine_id</link>
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-snmp-service-get-command">idmef_snmp_service_get_command</link>      (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-command">idmef_snmp_service_set_command</link>      (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *command);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-command">idmef_snmp_service_new_command</link>      (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-snmp-service-get-community">idmef_snmp_service_get_community</link>    (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-snmp-service-set-community">idmef_snmp_service_set_community</link>    (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *community);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-new-community">idmef_snmp_service_new_community</link>    (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
enum                <link linkend="idmef-service-type-t">idmef_service_type_t</link>;
<link linkend="idmef-service-type-t">idmef_service_type_t</link>  <link linkend="idmef-service-type-to-numeric">idmef_service_type_to_numeric</link>     (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-service-type-to-string">idmef_service_type_to_string</link>        (<link linkend="idmef-service-type-t">idmef_service_type_t</link> val);
typedef             <link linkend="idmef-service-t">idmef_service_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-service-new">idmef_service_new</link>                   (<link linkend="idmef-service-t">idmef_service_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-service-copy">idmef_service_copy</link>                  (const <link linkend="idmef-service-t">idmef_service_t</link> *src,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-service-clone">idmef_service_clone</link>                 (<link linkend="idmef-service-t">idmef_service_t</link> *src,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> **dst);
<link linkend="idmef-service-t">idmef_service_t</link> *   <link linkend="idmef-service-ref">idmef_service_ref</link>                   (<link linkend="idmef-service-t">idmef_service_t</link> *service);
<link linkend="void">void</link>                <link linkend="idmef-service-destroy">idmef_service_destroy</link>               (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-service-get-ident">idmef_service_get_ident</link>             (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-ident">idmef_service_set_ident</link>             (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-ident">idmef_service_new_ident</link>             (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-service-unset-ip-version">idmef_service_unset_ip_version</link>      (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="uint8-t">uint8_t</link> *           <link linkend="idmef-service-get-ip-version">idmef_service_get_ip_version</link>        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-ip-version">idmef_service_set_ip_version</link>        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> ip_version);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-ip-version">idmef_service_new_ip_version</link>        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-service-unset-iana-protocol-number">idmef_service_unset_iana_protocol_number</link>
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="uint8-t">uint8_t</link> *           <link linkend="idmef-service-get-iana-protocol-number">idmef_service_get_iana_protocol_number</link>
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-iana-protocol-number">idmef_service_set_iana_protocol_number</link>
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> iana_protocol_number);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-iana-protocol-number">idmef_service_new_iana_protocol_number</link>
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-service-get-iana-protocol-name">idmef_service_get_iana_protocol_name</link>
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-iana-protocol-name">idmef_service_set_iana_protocol_name</link>
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *iana_protocol_name);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-iana-protocol-name">idmef_service_new_iana_protocol_name</link>
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-service-get-name">idmef_service_get_name</link>              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-name">idmef_service_set_name</link>              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-name">idmef_service_new_name</link>              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-service-unset-port">idmef_service_unset_port</link>            (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="uint16-t">uint16_t</link> *          <link linkend="idmef-service-get-port">idmef_service_get_port</link>              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-port">idmef_service_set_port</link>              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint16-t">uint16_t</link> port);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-port">idmef_service_new_port</link>              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint16-t">uint16_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-service-get-portlist">idmef_service_get_portlist</link>          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-portlist">idmef_service_set_portlist</link>          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *portlist);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-portlist">idmef_service_new_portlist</link>          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-service-get-protocol">idmef_service_get_protocol</link>          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-protocol">idmef_service_set_protocol</link>          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *protocol);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-protocol">idmef_service_new_protocol</link>          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-service-type-t">idmef_service_type_t</link>  <link linkend="idmef-service-get-type">idmef_service_get_type</link>            (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="idmef-web-service-t">idmef_web_service_t</link> * <link linkend="idmef-service-get-web-service">idmef_service_get_web_service</link>     (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-web-service">idmef_service_set_web_service</link>       (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> *web_service);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-web-service">idmef_service_new_web_service</link>       (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> **ret);
<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> * <link linkend="idmef-service-get-snmp-service">idmef_service_get_snmp_service</link>   (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-service-set-snmp-service">idmef_service_set_snmp_service</link>      (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *snmp_service);
<link linkend="int">int</link>                 <link linkend="idmef-service-new-snmp-service">idmef_service_new_snmp_service</link>      (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> **ret);
enum                <link linkend="idmef-node-category-t">idmef_node_category_t</link>;
<link linkend="idmef-node-category-t">idmef_node_category_t</link>  <link linkend="idmef-node-category-to-numeric">idmef_node_category_to_numeric</link>   (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-node-category-to-string">idmef_node_category_to_string</link>       (<link linkend="idmef-node-category-t">idmef_node_category_t</link> val);
typedef             <link linkend="idmef-node-t">idmef_node_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-node-new">idmef_node_new</link>                      (<link linkend="idmef-node-t">idmef_node_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-node-copy">idmef_node_copy</link>                     (const <link linkend="idmef-node-t">idmef_node_t</link> *src,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-node-clone">idmef_node_clone</link>                    (<link linkend="idmef-node-t">idmef_node_t</link> *src,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **dst);
<link linkend="idmef-node-t">idmef_node_t</link> *      <link linkend="idmef-node-ref">idmef_node_ref</link>                      (<link linkend="idmef-node-t">idmef_node_t</link> *node);
<link linkend="void">void</link>                <link linkend="idmef-node-destroy">idmef_node_destroy</link>                  (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-node-get-ident">idmef_node_get_ident</link>                (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-node-set-ident">idmef_node_set_ident</link>                (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-node-new-ident">idmef_node_new_ident</link>                (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-node-category-t">idmef_node_category_t</link>  <link linkend="idmef-node-get-category">idmef_node_get_category</link>          (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-node-set-category">idmef_node_set_category</link>             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-node-category-t">idmef_node_category_t</link> category);
<link linkend="int">int</link>                 <link linkend="idmef-node-new-category">idmef_node_new_category</link>             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-node-category-t">idmef_node_category_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-node-get-location">idmef_node_get_location</link>             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-node-set-location">idmef_node_set_location</link>             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *location);
<link linkend="int">int</link>                 <link linkend="idmef-node-new-location">idmef_node_new_location</link>             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-node-get-name">idmef_node_get_name</link>                 (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-node-set-name">idmef_node_set_name</link>                 (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-node-new-name">idmef_node_new_name</link>                 (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-address-t">idmef_address_t</link> *   <link linkend="idmef-node-get-next-address">idmef_node_get_next_address</link>         (<link linkend="idmef-node-t">idmef_node_t</link> *node,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> *address_cur);
<link linkend="void">void</link>                <link linkend="idmef-node-set-address">idmef_node_set_address</link>              (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-node-new-address">idmef_node_new_address</link>              (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
enum                <link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link>;
<link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link>  <link linkend="idmef-source-spoofed-to-numeric">idmef_source_spoofed_to_numeric</link> (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-source-spoofed-to-string">idmef_source_spoofed_to_string</link>      (<link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link> val);
typedef             <link linkend="idmef-source-t">idmef_source_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-source-new">idmef_source_new</link>                    (<link linkend="idmef-source-t">idmef_source_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-source-copy">idmef_source_copy</link>                   (const <link linkend="idmef-source-t">idmef_source_t</link> *src,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-source-clone">idmef_source_clone</link>                  (<link linkend="idmef-source-t">idmef_source_t</link> *src,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> **dst);
<link linkend="idmef-source-t">idmef_source_t</link> *    <link linkend="idmef-source-ref">idmef_source_ref</link>                    (<link linkend="idmef-source-t">idmef_source_t</link> *source);
<link linkend="void">void</link>                <link linkend="idmef-source-destroy">idmef_source_destroy</link>                (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-source-get-ident">idmef_source_get_ident</link>              (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-source-set-ident">idmef_source_set_ident</link>              (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-source-new-ident">idmef_source_new_ident</link>              (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link>  <link linkend="idmef-source-get-spoofed">idmef_source_get_spoofed</link>        (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-source-set-spoofed">idmef_source_set_spoofed</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link> spoofed);
<link linkend="int">int</link>                 <link linkend="idmef-source-new-spoofed">idmef_source_new_spoofed</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-source-get-interface">idmef_source_get_interface</link>          (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-source-set-interface">idmef_source_set_interface</link>          (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *interface);
<link linkend="int">int</link>                 <link linkend="idmef-source-new-interface">idmef_source_new_interface</link>          (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-node-t">idmef_node_t</link> *      <link linkend="idmef-source-get-node">idmef_source_get_node</link>               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-source-set-node">idmef_source_set_node</link>               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *node);
<link linkend="int">int</link>                 <link linkend="idmef-source-new-node">idmef_source_new_node</link>               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **ret);
<link linkend="idmef-user-t">idmef_user_t</link> *      <link linkend="idmef-source-get-user">idmef_source_get_user</link>               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-source-set-user">idmef_source_set_user</link>               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> *user);
<link linkend="int">int</link>                 <link linkend="idmef-source-new-user">idmef_source_new_user</link>               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> **ret);
<link linkend="idmef-process-t">idmef_process_t</link> *   <link linkend="idmef-source-get-process">idmef_source_get_process</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-source-set-process">idmef_source_set_process</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *process);
<link linkend="int">int</link>                 <link linkend="idmef-source-new-process">idmef_source_new_process</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **ret);
<link linkend="idmef-service-t">idmef_service_t</link> *   <link linkend="idmef-source-get-service">idmef_source_get_service</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-source-set-service">idmef_source_set_service</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> *service);
<link linkend="int">int</link>                 <link linkend="idmef-source-new-service">idmef_source_new_service</link>            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> **ret);
typedef             <link linkend="idmef-file-access-t">idmef_file_access_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-file-access-new">idmef_file_access_new</link>               (<link linkend="idmef-file-access-t">idmef_file_access_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-file-access-copy">idmef_file_access_copy</link>              (const <link linkend="idmef-file-access-t">idmef_file_access_t</link> *src,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-file-access-clone">idmef_file_access_clone</link>             (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *src,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> **dst);
<link linkend="idmef-file-access-t">idmef_file_access_t</link> * <link linkend="idmef-file-access-ref">idmef_file_access_ref</link>             (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *file_access);
<link linkend="void">void</link>                <link linkend="idmef-file-access-destroy">idmef_file_access_destroy</link>           (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr);
<link linkend="idmef-user-id-t">idmef_user_id_t</link> *   <link linkend="idmef-file-access-get-user-id">idmef_file_access_get_user_id</link>       (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-access-set-user-id">idmef_file_access_set_user_id</link>       (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *user_id);
<link linkend="int">int</link>                 <link linkend="idmef-file-access-new-user-id">idmef_file_access_new_user_id</link>       (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-file-access-get-next-permission">idmef_file_access_get_next_permission</link>
                                                        (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *file_access,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);
<link linkend="void">void</link>                <link linkend="idmef-file-access-set-permission">idmef_file_access_set_permission</link>    (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-file-access-new-permission">idmef_file_access_new_permission</link>    (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
typedef             <link linkend="idmef-inode-t">idmef_inode_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-inode-new">idmef_inode_new</link>                     (<link linkend="idmef-inode-t">idmef_inode_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-inode-copy">idmef_inode_copy</link>                    (const <link linkend="idmef-inode-t">idmef_inode_t</link> *src,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-inode-clone">idmef_inode_clone</link>                   (<link linkend="idmef-inode-t">idmef_inode_t</link> *src,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> **dst);
<link linkend="idmef-inode-t">idmef_inode_t</link> *     <link linkend="idmef-inode-ref">idmef_inode_ref</link>                     (<link linkend="idmef-inode-t">idmef_inode_t</link> *inode);
<link linkend="void">void</link>                <link linkend="idmef-inode-destroy">idmef_inode_destroy</link>                 (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-inode-get-change-time">idmef_inode_get_change_time</link>         (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-inode-set-change-time">idmef_inode_set_change_time</link>         (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *change_time);
<link linkend="int">int</link>                 <link linkend="idmef-inode-new-change-time">idmef_inode_new_change_time</link>         (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-inode-unset-number">idmef_inode_unset_number</link>            (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-inode-get-number">idmef_inode_get_number</link>              (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-inode-set-number">idmef_inode_set_number</link>              (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> number);
<link linkend="int">int</link>                 <link linkend="idmef-inode-new-number">idmef_inode_new_number</link>              (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-inode-unset-major-device">idmef_inode_unset_major_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-inode-get-major-device">idmef_inode_get_major_device</link>        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-inode-set-major-device">idmef_inode_set_major_device</link>        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> major_device);
<link linkend="int">int</link>                 <link linkend="idmef-inode-new-major-device">idmef_inode_new_major_device</link>        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-inode-unset-minor-device">idmef_inode_unset_minor_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-inode-get-minor-device">idmef_inode_get_minor_device</link>        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-inode-set-minor-device">idmef_inode_set_minor_device</link>        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> minor_device);
<link linkend="int">int</link>                 <link linkend="idmef-inode-new-minor-device">idmef_inode_new_minor_device</link>        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-inode-unset-c-major-device">idmef_inode_unset_c_major_device</link>    (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-inode-get-c-major-device">idmef_inode_get_c_major_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-inode-set-c-major-device">idmef_inode_set_c_major_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> c_major_device);
<link linkend="int">int</link>                 <link linkend="idmef-inode-new-c-major-device">idmef_inode_new_c_major_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-inode-unset-c-minor-device">idmef_inode_unset_c_minor_device</link>    (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-inode-get-c-minor-device">idmef_inode_get_c_minor_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-inode-set-c-minor-device">idmef_inode_set_c_minor_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> c_minor_device);
<link linkend="int">int</link>                 <link linkend="idmef-inode-new-c-minor-device">idmef_inode_new_c_minor_device</link>      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
typedef             <link linkend="idmef-linkage-t">idmef_linkage_t</link>;
enum                <link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link>;
<link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link>  <link linkend="idmef-checksum-algorithm-to-numeric">idmef_checksum_algorithm_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-checksum-algorithm-to-string">idmef_checksum_algorithm_to_string</link>  (<link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link> val);
typedef             <link linkend="idmef-checksum-t">idmef_checksum_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-checksum-new">idmef_checksum_new</link>                  (<link linkend="idmef-checksum-t">idmef_checksum_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-checksum-copy">idmef_checksum_copy</link>                 (const <link linkend="idmef-checksum-t">idmef_checksum_t</link> *src,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-checksum-clone">idmef_checksum_clone</link>                (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *src,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> **dst);
<link linkend="idmef-checksum-t">idmef_checksum_t</link> *  <link linkend="idmef-checksum-ref">idmef_checksum_ref</link>                  (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *checksum);
<link linkend="void">void</link>                <link linkend="idmef-checksum-destroy">idmef_checksum_destroy</link>              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-checksum-get-value">idmef_checksum_get_value</link>            (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-checksum-set-value">idmef_checksum_set_value</link>            (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *value);
<link linkend="int">int</link>                 <link linkend="idmef-checksum-new-value">idmef_checksum_new_value</link>            (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-checksum-get-key">idmef_checksum_get_key</link>              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-checksum-set-key">idmef_checksum_set_key</link>              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *key);
<link linkend="int">int</link>                 <link linkend="idmef-checksum-new-key">idmef_checksum_new_key</link>              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link>  <link linkend="idmef-checksum-get-algorithm">idmef_checksum_get_algorithm</link>
                                                        (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-checksum-set-algorithm">idmef_checksum_set_algorithm</link>        (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link> algorithm);
<link linkend="int">int</link>                 <link linkend="idmef-checksum-new-algorithm">idmef_checksum_new_algorithm</link>        (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link> **ret);
enum                <link linkend="idmef-file-category-t">idmef_file_category_t</link>;
<link linkend="idmef-file-category-t">idmef_file_category_t</link>  <link linkend="idmef-file-category-to-numeric">idmef_file_category_to_numeric</link>   (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-file-category-to-string">idmef_file_category_to_string</link>       (<link linkend="idmef-file-category-t">idmef_file_category_t</link> val);
enum                <link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link>;
<link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link>  <link linkend="idmef-file-fstype-to-numeric">idmef_file_fstype_to_numeric</link>       (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-file-fstype-to-string">idmef_file_fstype_to_string</link>         (<link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> val);
typedef             <link linkend="idmef-file-t">idmef_file_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-file-new">idmef_file_new</link>                      (<link linkend="idmef-file-t">idmef_file_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-file-copy">idmef_file_copy</link>                     (const <link linkend="idmef-file-t">idmef_file_t</link> *src,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-file-clone">idmef_file_clone</link>                    (<link linkend="idmef-file-t">idmef_file_t</link> *src,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> **dst);
<link linkend="idmef-file-t">idmef_file_t</link> *      <link linkend="idmef-file-ref">idmef_file_ref</link>                      (<link linkend="idmef-file-t">idmef_file_t</link> *file);
<link linkend="void">void</link>                <link linkend="idmef-file-destroy">idmef_file_destroy</link>                  (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-file-get-ident">idmef_file_get_ident</link>                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-ident">idmef_file_set_ident</link>                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-ident">idmef_file_new_ident</link>                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-file-get-name">idmef_file_get_name</link>                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-name">idmef_file_set_name</link>                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-name">idmef_file_new_name</link>                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-file-get-path">idmef_file_get_path</link>                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-path">idmef_file_set_path</link>                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *path);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-path">idmef_file_new_path</link>                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-file-get-create-time">idmef_file_get_create_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-create-time">idmef_file_set_create_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *create_time);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-create-time">idmef_file_new_create_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-file-get-modify-time">idmef_file_get_modify_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-modify-time">idmef_file_set_modify_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *modify_time);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-modify-time">idmef_file_new_modify_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-file-get-access-time">idmef_file_get_access_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-access-time">idmef_file_set_access_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *access_time);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-access-time">idmef_file_new_access_time</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-file-unset-data-size">idmef_file_unset_data_size</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="uint64-t">uint64_t</link> *          <link linkend="idmef-file-get-data-size">idmef_file_get_data_size</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-data-size">idmef_file_set_data_size</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> data_size);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-data-size">idmef_file_new_data_size</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-file-unset-disk-size">idmef_file_unset_disk_size</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="uint64-t">uint64_t</link> *          <link linkend="idmef-file-get-disk-size">idmef_file_get_disk_size</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-disk-size">idmef_file_set_disk_size</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> disk_size);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-disk-size">idmef_file_new_disk_size</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> **ret);
<link linkend="idmef-file-access-t">idmef_file_access_t</link> * <link linkend="idmef-file-get-next-file-access">idmef_file_get_next_file_access</link>   (<link linkend="idmef-file-t">idmef_file_t</link> *file,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> *file_access_cur);
<link linkend="void">void</link>                <link linkend="idmef-file-set-file-access">idmef_file_set_file_access</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-file-access">idmef_file_new_file_access</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-linkage-t">idmef_linkage_t</link> *   <link linkend="idmef-file-get-next-linkage">idmef_file_get_next_linkage</link>         (<link linkend="idmef-file-t">idmef_file_t</link> *file,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> *linkage_cur);
<link linkend="void">void</link>                <link linkend="idmef-file-set-linkage">idmef_file_set_linkage</link>              (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-linkage">idmef_file_new_linkage</link>              (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-inode-t">idmef_inode_t</link> *     <link linkend="idmef-file-get-inode">idmef_file_get_inode</link>                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-inode">idmef_file_set_inode</link>                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> *inode);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-inode">idmef_file_new_inode</link>                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> **ret);
<link linkend="idmef-checksum-t">idmef_checksum_t</link> *  <link linkend="idmef-file-get-next-checksum">idmef_file_get_next_checksum</link>        (<link linkend="idmef-file-t">idmef_file_t</link> *file,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> *checksum_cur);
<link linkend="void">void</link>                <link linkend="idmef-file-set-checksum">idmef_file_set_checksum</link>             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-checksum">idmef_file_new_checksum</link>             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-file-category-t">idmef_file_category_t</link>  <link linkend="idmef-file-get-category">idmef_file_get_category</link>          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-category">idmef_file_set_category</link>             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-category-t">idmef_file_category_t</link> category);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-category">idmef_file_new_category</link>             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-category-t">idmef_file_category_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-file-unset-fstype">idmef_file_unset_fstype</link>             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> * <link linkend="idmef-file-get-fstype">idmef_file_get_fstype</link>             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-fstype">idmef_file_set_fstype</link>               (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> fstype);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-fstype">idmef_file_new_fstype</link>               (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-file-get-file-type">idmef_file_get_file_type</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-file-set-file-type">idmef_file_set_file_type</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *file_type);
<link linkend="int">int</link>                 <link linkend="idmef-file-new-file-type">idmef_file_new_file_type</link>            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
enum                <link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link>;
<link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link>  <link linkend="idmef-linkage-category-to-numeric">idmef_linkage_category_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-linkage-category-to-string">idmef_linkage_category_to_string</link>    (<link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link> val);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-new">idmef_linkage_new</link>                   (<link linkend="idmef-linkage-t">idmef_linkage_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-copy">idmef_linkage_copy</link>                  (const <link linkend="idmef-linkage-t">idmef_linkage_t</link> *src,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-clone">idmef_linkage_clone</link>                 (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *src,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> **dst);
<link linkend="idmef-linkage-t">idmef_linkage_t</link> *   <link linkend="idmef-linkage-ref">idmef_linkage_ref</link>                   (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *linkage);
<link linkend="void">void</link>                <link linkend="idmef-linkage-destroy">idmef_linkage_destroy</link>               (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);
<link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link>  <link linkend="idmef-linkage-get-category">idmef_linkage_get_category</link>    (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-linkage-set-category">idmef_linkage_set_category</link>          (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link> category);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-new-category">idmef_linkage_new_category</link>          (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-linkage-get-name">idmef_linkage_get_name</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-linkage-set-name">idmef_linkage_set_name</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-new-name">idmef_linkage_new_name</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-linkage-get-path">idmef_linkage_get_path</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-linkage-set-path">idmef_linkage_set_path</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *path);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-new-path">idmef_linkage_new_path</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-file-t">idmef_file_t</link> *      <link linkend="idmef-linkage-get-file">idmef_linkage_get_file</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-linkage-set-file">idmef_linkage_set_file</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *file);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-new-file">idmef_linkage_new_file</link>              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> **ret);
enum                <link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link>;
<link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link>  <link linkend="idmef-target-decoy-to-numeric">idmef_target_decoy_to_numeric</link>     (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-target-decoy-to-string">idmef_target_decoy_to_string</link>        (<link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link> val);
typedef             <link linkend="idmef-target-t">idmef_target_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-target-new">idmef_target_new</link>                    (<link linkend="idmef-target-t">idmef_target_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-target-copy">idmef_target_copy</link>                   (const <link linkend="idmef-target-t">idmef_target_t</link> *src,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-target-clone">idmef_target_clone</link>                  (<link linkend="idmef-target-t">idmef_target_t</link> *src,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> **dst);
<link linkend="idmef-target-t">idmef_target_t</link> *    <link linkend="idmef-target-ref">idmef_target_ref</link>                    (<link linkend="idmef-target-t">idmef_target_t</link> *target);
<link linkend="void">void</link>                <link linkend="idmef-target-destroy">idmef_target_destroy</link>                (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-target-get-ident">idmef_target_get_ident</link>              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-target-set-ident">idmef_target_set_ident</link>              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-ident">idmef_target_new_ident</link>              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link>  <link linkend="idmef-target-get-decoy">idmef_target_get_decoy</link>            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-target-set-decoy">idmef_target_set_decoy</link>              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link> decoy);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-decoy">idmef_target_new_decoy</link>              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-target-get-interface">idmef_target_get_interface</link>          (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-target-set-interface">idmef_target_set_interface</link>          (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *interface);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-interface">idmef_target_new_interface</link>          (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-node-t">idmef_node_t</link> *      <link linkend="idmef-target-get-node">idmef_target_get_node</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-target-set-node">idmef_target_set_node</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *node);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-node">idmef_target_new_node</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **ret);
<link linkend="idmef-user-t">idmef_user_t</link> *      <link linkend="idmef-target-get-user">idmef_target_get_user</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-target-set-user">idmef_target_set_user</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> *user);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-user">idmef_target_new_user</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> **ret);
<link linkend="idmef-process-t">idmef_process_t</link> *   <link linkend="idmef-target-get-process">idmef_target_get_process</link>            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-target-set-process">idmef_target_set_process</link>            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *process);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-process">idmef_target_new_process</link>            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **ret);
<link linkend="idmef-service-t">idmef_service_t</link> *   <link linkend="idmef-target-get-service">idmef_target_get_service</link>            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-target-set-service">idmef_target_set_service</link>            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> *service);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-service">idmef_target_new_service</link>            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> **ret);
<link linkend="idmef-file-t">idmef_file_t</link> *      <link linkend="idmef-target-get-next-file">idmef_target_get_next_file</link>          (<link linkend="idmef-target-t">idmef_target_t</link> *target,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *file_cur);
<link linkend="void">void</link>                <link linkend="idmef-target-set-file">idmef_target_set_file</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-target-new-file">idmef_target_new_file</link>               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
typedef             <link linkend="idmef-analyzer-t">idmef_analyzer_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new">idmef_analyzer_new</link>                  (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-copy">idmef_analyzer_copy</link>                 (const <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *src,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-clone">idmef_analyzer_clone</link>                (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *src,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **dst);
<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *  <link linkend="idmef-analyzer-ref">idmef_analyzer_ref</link>                  (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *analyzer);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-destroy">idmef_analyzer_destroy</link>              (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-analyzerid">idmef_analyzer_get_analyzerid</link>       (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-analyzerid">idmef_analyzer_set_analyzerid</link>       (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *analyzerid);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-analyzerid">idmef_analyzer_new_analyzerid</link>       (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-name">idmef_analyzer_get_name</link>             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-name">idmef_analyzer_set_name</link>             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-name">idmef_analyzer_new_name</link>             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-manufacturer">idmef_analyzer_get_manufacturer</link>     (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-manufacturer">idmef_analyzer_set_manufacturer</link>     (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *manufacturer);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-manufacturer">idmef_analyzer_new_manufacturer</link>     (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-model">idmef_analyzer_get_model</link>            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-model">idmef_analyzer_set_model</link>            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *model);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-model">idmef_analyzer_new_model</link>            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-version">idmef_analyzer_get_version</link>          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-version">idmef_analyzer_set_version</link>          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *version);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-version">idmef_analyzer_new_version</link>          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-class">idmef_analyzer_get_class</link>            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-class">idmef_analyzer_set_class</link>            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *class_str);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-class">idmef_analyzer_new_class</link>            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-ostype">idmef_analyzer_get_ostype</link>           (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-ostype">idmef_analyzer_set_ostype</link>           (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ostype);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-ostype">idmef_analyzer_new_ostype</link>           (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-analyzer-get-osversion">idmef_analyzer_get_osversion</link>        (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-osversion">idmef_analyzer_set_osversion</link>        (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *osversion);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-osversion">idmef_analyzer_new_osversion</link>        (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-node-t">idmef_node_t</link> *      <link linkend="idmef-analyzer-get-node">idmef_analyzer_get_node</link>             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-node">idmef_analyzer_set_node</link>             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *node);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-node">idmef_analyzer_new_node</link>             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **ret);
<link linkend="idmef-process-t">idmef_process_t</link> *   <link linkend="idmef-analyzer-get-process">idmef_analyzer_get_process</link>          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-analyzer-set-process">idmef_analyzer_set_process</link>          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *process);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-new-process">idmef_analyzer_new_process</link>          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **ret);
typedef             <link linkend="idmef-alertident-t">idmef_alertident_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-alertident-new">idmef_alertident_new</link>                (<link linkend="idmef-alertident-t">idmef_alertident_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-alertident-copy">idmef_alertident_copy</link>               (const <link linkend="idmef-alertident-t">idmef_alertident_t</link> *src,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-alertident-clone">idmef_alertident_clone</link>              (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *src,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> **dst);
<link linkend="idmef-alertident-t">idmef_alertident_t</link> * <link linkend="idmef-alertident-ref">idmef_alertident_ref</link>               (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *alertident);
<link linkend="void">void</link>                <link linkend="idmef-alertident-destroy">idmef_alertident_destroy</link>            (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-alertident-get-alertident">idmef_alertident_get_alertident</link>     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alertident-set-alertident">idmef_alertident_set_alertident</link>     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *alertident);
<link linkend="int">int</link>                 <link linkend="idmef-alertident-new-alertident">idmef_alertident_new_alertident</link>     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-alertident-get-analyzerid">idmef_alertident_get_analyzerid</link>     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alertident-set-analyzerid">idmef_alertident_set_analyzerid</link>     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *analyzerid);
<link linkend="int">int</link>                 <link linkend="idmef-alertident-new-analyzerid">idmef_alertident_new_analyzerid</link>     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
enum                <link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link>;
<link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link>  <link linkend="idmef-impact-severity-to-numeric">idmef_impact_severity_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-impact-severity-to-string">idmef_impact_severity_to_string</link>     (<link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> val);
enum                <link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link>;
<link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link>  <link linkend="idmef-impact-completion-to-numeric">idmef_impact_completion_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-impact-completion-to-string">idmef_impact_completion_to_string</link>   (<link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> val);
enum                <link linkend="idmef-impact-type-t">idmef_impact_type_t</link>;
<link linkend="idmef-impact-type-t">idmef_impact_type_t</link>  <link linkend="idmef-impact-type-to-numeric">idmef_impact_type_to_numeric</link>       (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-impact-type-to-string">idmef_impact_type_to_string</link>         (<link linkend="idmef-impact-type-t">idmef_impact_type_t</link> val);
typedef             <link linkend="idmef-impact-t">idmef_impact_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-impact-new">idmef_impact_new</link>                    (<link linkend="idmef-impact-t">idmef_impact_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-impact-copy">idmef_impact_copy</link>                   (const <link linkend="idmef-impact-t">idmef_impact_t</link> *src,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-impact-clone">idmef_impact_clone</link>                  (<link linkend="idmef-impact-t">idmef_impact_t</link> *src,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> **dst);
<link linkend="idmef-impact-t">idmef_impact_t</link> *    <link linkend="idmef-impact-ref">idmef_impact_ref</link>                    (<link linkend="idmef-impact-t">idmef_impact_t</link> *impact);
<link linkend="void">void</link>                <link linkend="idmef-impact-destroy">idmef_impact_destroy</link>                (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-impact-unset-severity">idmef_impact_unset_severity</link>         (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);
<link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> * <link linkend="idmef-impact-get-severity">idmef_impact_get_severity</link>     (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-impact-set-severity">idmef_impact_set_severity</link>           (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> severity);
<link linkend="int">int</link>                 <link linkend="idmef-impact-new-severity">idmef_impact_new_severity</link>           (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-impact-unset-completion">idmef_impact_unset_completion</link>       (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);
<link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> * <link linkend="idmef-impact-get-completion">idmef_impact_get_completion</link> (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-impact-set-completion">idmef_impact_set_completion</link>         (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> completion);
<link linkend="int">int</link>                 <link linkend="idmef-impact-new-completion">idmef_impact_new_completion</link>         (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> **ret);
<link linkend="idmef-impact-type-t">idmef_impact_type_t</link>  <link linkend="idmef-impact-get-type">idmef_impact_get_type</link>              (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-impact-set-type">idmef_impact_set_type</link>               (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-type-t">idmef_impact_type_t</link> type);
<link linkend="int">int</link>                 <link linkend="idmef-impact-new-type">idmef_impact_new_type</link>               (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-type-t">idmef_impact_type_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-impact-get-description">idmef_impact_get_description</link>        (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-impact-set-description">idmef_impact_set_description</link>        (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *description);
<link linkend="int">int</link>                 <link linkend="idmef-impact-new-description">idmef_impact_new_description</link>        (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
enum                <link linkend="idmef-action-category-t">idmef_action_category_t</link>;
<link linkend="idmef-action-category-t">idmef_action_category_t</link>  <link linkend="idmef-action-category-to-numeric">idmef_action_category_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-action-category-to-string">idmef_action_category_to_string</link>     (<link linkend="idmef-action-category-t">idmef_action_category_t</link> val);
typedef             <link linkend="idmef-action-t">idmef_action_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-action-new">idmef_action_new</link>                    (<link linkend="idmef-action-t">idmef_action_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-action-copy">idmef_action_copy</link>                   (const <link linkend="idmef-action-t">idmef_action_t</link> *src,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-action-clone">idmef_action_clone</link>                  (<link linkend="idmef-action-t">idmef_action_t</link> *src,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> **dst);
<link linkend="idmef-action-t">idmef_action_t</link> *    <link linkend="idmef-action-ref">idmef_action_ref</link>                    (<link linkend="idmef-action-t">idmef_action_t</link> *action);
<link linkend="void">void</link>                <link linkend="idmef-action-destroy">idmef_action_destroy</link>                (<link linkend="idmef-action-t">idmef_action_t</link> *ptr);
<link linkend="idmef-action-category-t">idmef_action_category_t</link>  <link linkend="idmef-action-get-category">idmef_action_get_category</link>      (<link linkend="idmef-action-t">idmef_action_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-action-set-category">idmef_action_set_category</link>           (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="idmef-action-category-t">idmef_action_category_t</link> category);
<link linkend="int">int</link>                 <link linkend="idmef-action-new-category">idmef_action_new_category</link>           (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="idmef-action-category-t">idmef_action_category_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-action-get-description">idmef_action_get_description</link>        (<link linkend="idmef-action-t">idmef_action_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-action-set-description">idmef_action_set_description</link>        (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *description);
<link linkend="int">int</link>                 <link linkend="idmef-action-new-description">idmef_action_new_description</link>        (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
enum                <link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link>;
<link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link>  <link linkend="idmef-confidence-rating-to-numeric">idmef_confidence_rating_to_numeric</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-confidence-rating-to-string">idmef_confidence_rating_to_string</link>   (<link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link> val);
typedef             <link linkend="idmef-confidence-t">idmef_confidence_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-confidence-new">idmef_confidence_new</link>                (<link linkend="idmef-confidence-t">idmef_confidence_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-confidence-copy">idmef_confidence_copy</link>               (const <link linkend="idmef-confidence-t">idmef_confidence_t</link> *src,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-confidence-clone">idmef_confidence_clone</link>              (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *src,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> **dst);
<link linkend="idmef-confidence-t">idmef_confidence_t</link> * <link linkend="idmef-confidence-ref">idmef_confidence_ref</link>               (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *confidence);
<link linkend="void">void</link>                <link linkend="idmef-confidence-destroy">idmef_confidence_destroy</link>            (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr);
<link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link>  <link linkend="idmef-confidence-get-rating">idmef_confidence_get_rating</link>  (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-confidence-set-rating">idmef_confidence_set_rating</link>         (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link> rating);
<link linkend="int">int</link>                 <link linkend="idmef-confidence-new-rating">idmef_confidence_new_rating</link>         (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link> **ret);
<link linkend="float">float</link>               <link linkend="idmef-confidence-get-confidence">idmef_confidence_get_confidence</link>     (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-confidence-set-confidence">idmef_confidence_set_confidence</link>     (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="float">float</link> confidence);
<link linkend="int">int</link>                 <link linkend="idmef-confidence-new-confidence">idmef_confidence_new_confidence</link>     (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="float">float</link> **ret);
typedef             <link linkend="idmef-assessment-t">idmef_assessment_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-assessment-new">idmef_assessment_new</link>                (<link linkend="idmef-assessment-t">idmef_assessment_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-assessment-copy">idmef_assessment_copy</link>               (const <link linkend="idmef-assessment-t">idmef_assessment_t</link> *src,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-assessment-clone">idmef_assessment_clone</link>              (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *src,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> **dst);
<link linkend="idmef-assessment-t">idmef_assessment_t</link> * <link linkend="idmef-assessment-ref">idmef_assessment_ref</link>               (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *assessment);
<link linkend="void">void</link>                <link linkend="idmef-assessment-destroy">idmef_assessment_destroy</link>            (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr);
<link linkend="idmef-impact-t">idmef_impact_t</link> *    <link linkend="idmef-assessment-get-impact">idmef_assessment_get_impact</link>         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-assessment-set-impact">idmef_assessment_set_impact</link>         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> *impact);
<link linkend="int">int</link>                 <link linkend="idmef-assessment-new-impact">idmef_assessment_new_impact</link>         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> **ret);
<link linkend="idmef-action-t">idmef_action_t</link> *    <link linkend="idmef-assessment-get-next-action">idmef_assessment_get_next_action</link>    (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *assessment,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> *action_cur);
<link linkend="void">void</link>                <link linkend="idmef-assessment-set-action">idmef_assessment_set_action</link>         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-assessment-new-action">idmef_assessment_new_action</link>         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-confidence-t">idmef_confidence_t</link> * <link linkend="idmef-assessment-get-confidence">idmef_assessment_get_confidence</link>    (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-assessment-set-confidence">idmef_assessment_set_confidence</link>     (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> *confidence);
<link linkend="int">int</link>                 <link linkend="idmef-assessment-new-confidence">idmef_assessment_new_confidence</link>     (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> **ret);
typedef             <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-tool-alert-new">idmef_tool_alert_new</link>                (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-tool-alert-copy">idmef_tool_alert_copy</link>               (const <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *src,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-tool-alert-clone">idmef_tool_alert_clone</link>              (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *src,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> **dst);
<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> * <link linkend="idmef-tool-alert-ref">idmef_tool_alert_ref</link>               (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *tool_alert);
<link linkend="void">void</link>                <link linkend="idmef-tool-alert-destroy">idmef_tool_alert_destroy</link>            (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-tool-alert-get-name">idmef_tool_alert_get_name</link>           (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-tool-alert-set-name">idmef_tool_alert_set_name</link>           (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-tool-alert-new-name">idmef_tool_alert_new_name</link>           (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-tool-alert-get-command">idmef_tool_alert_get_command</link>        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-tool-alert-set-command">idmef_tool_alert_set_command</link>        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *command);
<link linkend="int">int</link>                 <link linkend="idmef-tool-alert-new-command">idmef_tool_alert_new_command</link>        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-alertident-t">idmef_alertident_t</link> * <link linkend="idmef-tool-alert-get-next-alertident">idmef_tool_alert_get_next_alertident</link>
                                                        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *tool_alert,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *alertident_cur);
<link linkend="void">void</link>                <link linkend="idmef-tool-alert-set-alertident">idmef_tool_alert_set_alertident</link>     (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-tool-alert-new-alertident">idmef_tool_alert_new_alertident</link>     (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
typedef             <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-correlation-alert-new">idmef_correlation_alert_new</link>         (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-correlation-alert-copy">idmef_correlation_alert_copy</link>        (const <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *src,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-correlation-alert-clone">idmef_correlation_alert_clone</link>       (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *src,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> **dst);
<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> * <link linkend="idmef-correlation-alert-ref">idmef_correlation_alert_ref</link> (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *correlation_alert);
<link linkend="void">void</link>                <link linkend="idmef-correlation-alert-destroy">idmef_correlation_alert_destroy</link>     (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-correlation-alert-get-name">idmef_correlation_alert_get_name</link>    (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-correlation-alert-set-name">idmef_correlation_alert_set_name</link>    (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);
<link linkend="int">int</link>                 <link linkend="idmef-correlation-alert-new-name">idmef_correlation_alert_new_name</link>    (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-alertident-t">idmef_alertident_t</link> * <link linkend="idmef-correlation-alert-get-next-alertident">idmef_correlation_alert_get_next_alertident</link>
                                                        (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *correlation_alert,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *alertident_cur);
<link linkend="void">void</link>                <link linkend="idmef-correlation-alert-set-alertident">idmef_correlation_alert_set_alertident</link>
                                                        (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-correlation-alert-new-alertident">idmef_correlation_alert_new_alertident</link>
                                                        (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
typedef             <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-overflow-alert-new">idmef_overflow_alert_new</link>            (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-overflow-alert-copy">idmef_overflow_alert_copy</link>           (const <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *src,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-overflow-alert-clone">idmef_overflow_alert_clone</link>          (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *src,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> **dst);
<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> * <link linkend="idmef-overflow-alert-ref">idmef_overflow_alert_ref</link>       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *overflow_alert);
<link linkend="void">void</link>                <link linkend="idmef-overflow-alert-destroy">idmef_overflow_alert_destroy</link>        (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-overflow-alert-get-program">idmef_overflow_alert_get_program</link>    (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-overflow-alert-set-program">idmef_overflow_alert_set_program</link>    (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *program);
<link linkend="int">int</link>                 <link linkend="idmef-overflow-alert-new-program">idmef_overflow_alert_new_program</link>    (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-overflow-alert-unset-size">idmef_overflow_alert_unset_size</link>     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-overflow-alert-get-size">idmef_overflow_alert_get_size</link>       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-overflow-alert-set-size">idmef_overflow_alert_set_size</link>       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> size);
<link linkend="int">int</link>                 <link linkend="idmef-overflow-alert-new-size">idmef_overflow_alert_new_size</link>       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="idmef-data-t">idmef_data_t</link> *      <link linkend="idmef-overflow-alert-get-buffer">idmef_overflow_alert_get_buffer</link>     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-overflow-alert-set-buffer">idmef_overflow_alert_set_buffer</link>     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> *buffer);
<link linkend="int">int</link>                 <link linkend="idmef-overflow-alert-new-buffer">idmef_overflow_alert_new_buffer</link>     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> **ret);
enum                <link linkend="idmef-alert-type-t">idmef_alert_type_t</link>;
<link linkend="idmef-alert-type-t">idmef_alert_type_t</link>  <link linkend="idmef-alert-type-to-numeric">idmef_alert_type_to_numeric</link>         (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-alert-type-to-string">idmef_alert_type_to_string</link>          (<link linkend="idmef-alert-type-t">idmef_alert_type_t</link> val);
typedef             <link linkend="idmef-alert-t">idmef_alert_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-alert-new">idmef_alert_new</link>                     (<link linkend="idmef-alert-t">idmef_alert_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-alert-copy">idmef_alert_copy</link>                    (const <link linkend="idmef-alert-t">idmef_alert_t</link> *src,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-alert-clone">idmef_alert_clone</link>                   (<link linkend="idmef-alert-t">idmef_alert_t</link> *src,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> **dst);
<link linkend="idmef-alert-t">idmef_alert_t</link> *     <link linkend="idmef-alert-ref">idmef_alert_ref</link>                     (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert);
<link linkend="void">void</link>                <link linkend="idmef-alert-destroy">idmef_alert_destroy</link>                 (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-alert-get-messageid">idmef_alert_get_messageid</link>           (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-messageid">idmef_alert_set_messageid</link>           (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *messageid);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-messageid">idmef_alert_new_messageid</link>           (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *  <link linkend="idmef-alert-get-next-analyzer">idmef_alert_get_next_analyzer</link>       (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *analyzer_cur);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-analyzer">idmef_alert_set_analyzer</link>            (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-analyzer">idmef_alert_new_analyzer</link>            (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-alert-get-create-time">idmef_alert_get_create_time</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-create-time">idmef_alert_set_create_time</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *create_time);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-create-time">idmef_alert_new_create_time</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="idmef-classification-t">idmef_classification_t</link> * <link linkend="idmef-alert-get-classification">idmef_alert_get_classification</link> (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-classification">idmef_alert_set_classification</link>      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> *classification);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-classification">idmef_alert_new_classification</link>      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> **ret);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-alert-get-detect-time">idmef_alert_get_detect_time</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-detect-time">idmef_alert_set_detect_time</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *detect_time);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-detect-time">idmef_alert_new_detect_time</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-alert-get-analyzer-time">idmef_alert_get_analyzer_time</link>       (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-analyzer-time">idmef_alert_set_analyzer_time</link>       (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *analyzer_time);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-analyzer-time">idmef_alert_new_analyzer_time</link>       (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="idmef-source-t">idmef_source_t</link> *    <link linkend="idmef-alert-get-next-source">idmef_alert_get_next_source</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> *source_cur);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-source">idmef_alert_set_source</link>              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-source">idmef_alert_new_source</link>              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-target-t">idmef_target_t</link> *    <link linkend="idmef-alert-get-next-target">idmef_alert_get_next_target</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> *target_cur);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-target">idmef_alert_set_target</link>              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-target">idmef_alert_new_target</link>              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-assessment-t">idmef_assessment_t</link> * <link linkend="idmef-alert-get-assessment">idmef_alert_get_assessment</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-assessment">idmef_alert_set_assessment</link>          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> *assessment);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-assessment">idmef_alert_new_assessment</link>          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> **ret);
<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> * <link linkend="idmef-alert-get-next-additional-data">idmef_alert_get_next_additional_data</link>
                                                        (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *additional_data_cur);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-additional-data">idmef_alert_set_additional_data</link>     (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-additional-data">idmef_alert_new_additional_data</link>     (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-alert-type-t">idmef_alert_type_t</link>  <link linkend="idmef-alert-get-type">idmef_alert_get_type</link>                (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> * <link linkend="idmef-alert-get-tool-alert">idmef_alert_get_tool_alert</link>         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-tool-alert">idmef_alert_set_tool_alert</link>          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *tool_alert);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-tool-alert">idmef_alert_new_tool_alert</link>          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> **ret);
<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> * <link linkend="idmef-alert-get-correlation-alert">idmef_alert_get_correlation_alert</link>
                                                        (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-correlation-alert">idmef_alert_set_correlation_alert</link>   (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *correlation_alert);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-correlation-alert">idmef_alert_new_correlation_alert</link>   (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> **ret);
<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> * <link linkend="idmef-alert-get-overflow-alert">idmef_alert_get_overflow_alert</link> (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-alert-set-overflow-alert">idmef_alert_set_overflow_alert</link>      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *overflow_alert);
<link linkend="int">int</link>                 <link linkend="idmef-alert-new-overflow-alert">idmef_alert_new_overflow_alert</link>      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> **ret);
typedef             <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-new">idmef_heartbeat_new</link>                 (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-copy">idmef_heartbeat_copy</link>                (const <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *src,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-clone">idmef_heartbeat_clone</link>               (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *src,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> **dst);
<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> * <link linkend="idmef-heartbeat-ref">idmef_heartbeat_ref</link>                 (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-destroy">idmef_heartbeat_destroy</link>             (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-heartbeat-get-messageid">idmef_heartbeat_get_messageid</link>       (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-set-messageid">idmef_heartbeat_set_messageid</link>       (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *messageid);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-new-messageid">idmef_heartbeat_new_messageid</link>       (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *  <link linkend="idmef-heartbeat-get-next-analyzer">idmef_heartbeat_get_next_analyzer</link>   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *analyzer_cur);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-set-analyzer">idmef_heartbeat_set_analyzer</link>        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-new-analyzer">idmef_heartbeat_new_analyzer</link>        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-heartbeat-get-create-time">idmef_heartbeat_get_create_time</link>     (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-set-create-time">idmef_heartbeat_set_create_time</link>     (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *create_time);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-new-create-time">idmef_heartbeat_new_create_time</link>     (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="idmef-time-t">idmef_time_t</link> *      <link linkend="idmef-heartbeat-get-analyzer-time">idmef_heartbeat_get_analyzer_time</link>   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-set-analyzer-time">idmef_heartbeat_set_analyzer_time</link>   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *analyzer_time);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-new-analyzer-time">idmef_heartbeat_new_analyzer_time</link>   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-unset-heartbeat-interval">idmef_heartbeat_unset_heartbeat_interval</link>
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);
<link linkend="uint32-t">uint32_t</link> *          <link linkend="idmef-heartbeat-get-heartbeat-interval">idmef_heartbeat_get_heartbeat_interval</link>
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-set-heartbeat-interval">idmef_heartbeat_set_heartbeat_interval</link>
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> heartbeat_interval);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-new-heartbeat-interval">idmef_heartbeat_new_heartbeat_interval</link>
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);
<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> * <link linkend="idmef-heartbeat-get-next-additional-data">idmef_heartbeat_get_next_additional_data</link>
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *additional_data_cur);
<link linkend="void">void</link>                <link linkend="idmef-heartbeat-set-additional-data">idmef_heartbeat_set_additional_data</link> (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *object,
                                                         <link linkend="int">int</link> pos);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-new-additional-data">idmef_heartbeat_new_additional_data</link> (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **ret,
                                                         <link linkend="int">int</link> pos);
enum                <link linkend="idmef-message-type-t">idmef_message_type_t</link>;
<link linkend="idmef-message-type-t">idmef_message_type_t</link>  <link linkend="idmef-message-type-to-numeric">idmef_message_type_to_numeric</link>     (const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="idmef-message-type-to-string">idmef_message_type_to_string</link>        (<link linkend="idmef-message-type-t">idmef_message_type_t</link> val);
typedef             <link linkend="idmef-message-t">idmef_message_t</link>;
<link linkend="int">int</link>                 <link linkend="idmef-message-new">idmef_message_new</link>                   (<link linkend="idmef-message-t">idmef_message_t</link> **ret);
<link linkend="int">int</link>                 <link linkend="idmef-message-copy">idmef_message_copy</link>                  (const <link linkend="idmef-message-t">idmef_message_t</link> *src,
                                                         <link linkend="idmef-message-t">idmef_message_t</link> *dst);
<link linkend="int">int</link>                 <link linkend="idmef-message-clone">idmef_message_clone</link>                 (<link linkend="idmef-message-t">idmef_message_t</link> *src,
                                                         <link linkend="idmef-message-t">idmef_message_t</link> **dst);
<link linkend="idmef-message-t">idmef_message_t</link> *   <link linkend="idmef-message-ref">idmef_message_ref</link>                   (<link linkend="idmef-message-t">idmef_message_t</link> *message);
<link linkend="void">void</link>                <link linkend="idmef-message-destroy">idmef_message_destroy</link>               (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);
<link linkend="prelude-string-t">prelude_string_t</link> *  <link linkend="idmef-message-get-version">idmef_message_get_version</link>           (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-message-set-version">idmef_message_set_version</link>           (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *version);
<link linkend="int">int</link>                 <link linkend="idmef-message-new-version">idmef_message_new_version</link>           (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);
<link linkend="idmef-message-type-t">idmef_message_type_t</link>  <link linkend="idmef-message-get-type">idmef_message_get_type</link>            (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);
<link linkend="idmef-alert-t">idmef_alert_t</link> *     <link linkend="idmef-message-get-alert">idmef_message_get_alert</link>             (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-message-set-alert">idmef_message_set_alert</link>             (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> *alert);
<link linkend="int">int</link>                 <link linkend="idmef-message-new-alert">idmef_message_new_alert</link>             (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> **ret);
<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> * <link linkend="idmef-message-get-heartbeat">idmef_message_get_heartbeat</link>         (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);
<link linkend="void">void</link>                <link linkend="idmef-message-set-heartbeat">idmef_message_set_heartbeat</link>         (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat);
<link linkend="int">int</link>                 <link linkend="idmef-message-new-heartbeat">idmef_message_new_heartbeat</link>         (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> **ret);
<link linkend="void">void</link>                <link linkend="idmef-message-set-pmsg">idmef_message_set_pmsg</link>              (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         <link linkend="prelude-msg-t">prelude_msg_t</link> *msg);
<link linkend="prelude-msg-t">prelude_msg_t</link> *     <link linkend="idmef-message-get-pmsg">idmef_message_get_pmsg</link>              (<link linkend="idmef-message-t">idmef_message_t</link> *message);
<link linkend="int">int</link>                 <link linkend="idmef-action-compare">idmef_action_compare</link>                (const <link linkend="idmef-action-t">idmef_action_t</link> *obj1,
                                                         const <link linkend="idmef-action-t">idmef_action_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-additional-data-compare">idmef_additional_data_compare</link>       (const <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *obj1,
                                                         const <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-address-compare">idmef_address_compare</link>               (const <link linkend="idmef-address-t">idmef_address_t</link> *obj1,
                                                         const <link linkend="idmef-address-t">idmef_address_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-alert-compare">idmef_alert_compare</link>                 (const <link linkend="idmef-alert-t">idmef_alert_t</link> *obj1,
                                                         const <link linkend="idmef-alert-t">idmef_alert_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-alertident-compare">idmef_alertident_compare</link>            (const <link linkend="idmef-alertident-t">idmef_alertident_t</link> *obj1,
                                                         const <link linkend="idmef-alertident-t">idmef_alertident_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-analyzer-compare">idmef_analyzer_compare</link>              (const <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *obj1,
                                                         const <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-assessment-compare">idmef_assessment_compare</link>            (const <link linkend="idmef-assessment-t">idmef_assessment_t</link> *obj1,
                                                         const <link linkend="idmef-assessment-t">idmef_assessment_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-checksum-compare">idmef_checksum_compare</link>              (const <link linkend="idmef-checksum-t">idmef_checksum_t</link> *obj1,
                                                         const <link linkend="idmef-checksum-t">idmef_checksum_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-classification-compare">idmef_classification_compare</link>        (const <link linkend="idmef-classification-t">idmef_classification_t</link> *obj1,
                                                         const <link linkend="idmef-classification-t">idmef_classification_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-confidence-compare">idmef_confidence_compare</link>            (const <link linkend="idmef-confidence-t">idmef_confidence_t</link> *obj1,
                                                         const <link linkend="idmef-confidence-t">idmef_confidence_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-correlation-alert-compare">idmef_correlation_alert_compare</link>     (const <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *obj1,
                                                         const <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-data-compare">idmef_data_compare</link>                  (const <link linkend="idmef-data-t">idmef_data_t</link> *data1,
                                                         const <link linkend="idmef-data-t">idmef_data_t</link> *data2);
<link linkend="int">int</link>                 <link linkend="idmef-file-access-compare">idmef_file_access_compare</link>           (const <link linkend="idmef-file-access-t">idmef_file_access_t</link> *obj1,
                                                         const <link linkend="idmef-file-access-t">idmef_file_access_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-file-compare">idmef_file_compare</link>                  (const <link linkend="idmef-file-t">idmef_file_t</link> *obj1,
                                                         const <link linkend="idmef-file-t">idmef_file_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-heartbeat-compare">idmef_heartbeat_compare</link>             (const <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *obj1,
                                                         const <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-impact-compare">idmef_impact_compare</link>                (const <link linkend="idmef-impact-t">idmef_impact_t</link> *obj1,
                                                         const <link linkend="idmef-impact-t">idmef_impact_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-inode-compare">idmef_inode_compare</link>                 (const <link linkend="idmef-inode-t">idmef_inode_t</link> *obj1,
                                                         const <link linkend="idmef-inode-t">idmef_inode_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-linkage-compare">idmef_linkage_compare</link>               (const <link linkend="idmef-linkage-t">idmef_linkage_t</link> *obj1,
                                                         const <link linkend="idmef-linkage-t">idmef_linkage_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-message-compare">idmef_message_compare</link>               (const <link linkend="idmef-message-t">idmef_message_t</link> *obj1,
                                                         const <link linkend="idmef-message-t">idmef_message_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-node-compare">idmef_node_compare</link>                  (const <link linkend="idmef-node-t">idmef_node_t</link> *obj1,
                                                         const <link linkend="idmef-node-t">idmef_node_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-overflow-alert-compare">idmef_overflow_alert_compare</link>        (const <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *obj1,
                                                         const <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-process-compare">idmef_process_compare</link>               (const <link linkend="idmef-process-t">idmef_process_t</link> *obj1,
                                                         const <link linkend="idmef-process-t">idmef_process_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-reference-compare">idmef_reference_compare</link>             (const <link linkend="idmef-reference-t">idmef_reference_t</link> *obj1,
                                                         const <link linkend="idmef-reference-t">idmef_reference_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-service-compare">idmef_service_compare</link>               (const <link linkend="idmef-service-t">idmef_service_t</link> *obj1,
                                                         const <link linkend="idmef-service-t">idmef_service_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-snmp-service-compare">idmef_snmp_service_compare</link>          (const <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *obj1,
                                                         const <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-source-compare">idmef_source_compare</link>                (const <link linkend="idmef-source-t">idmef_source_t</link> *obj1,
                                                         const <link linkend="idmef-source-t">idmef_source_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-target-compare">idmef_target_compare</link>                (const <link linkend="idmef-target-t">idmef_target_t</link> *obj1,
                                                         const <link linkend="idmef-target-t">idmef_target_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-time-compare">idmef_time_compare</link>                  (const <link linkend="idmef-time-t">idmef_time_t</link> *time1,
                                                         const <link linkend="idmef-time-t">idmef_time_t</link> *time2);
<link linkend="int">int</link>                 <link linkend="idmef-tool-alert-compare">idmef_tool_alert_compare</link>            (const <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *obj1,
                                                         const <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-user-compare">idmef_user_compare</link>                  (const <link linkend="idmef-user-t">idmef_user_t</link> *obj1,
                                                         const <link linkend="idmef-user-t">idmef_user_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-user-id-compare">idmef_user_id_compare</link>               (const <link linkend="idmef-user-id-t">idmef_user_id_t</link> *obj1,
                                                         const <link linkend="idmef-user-id-t">idmef_user_id_t</link> *obj2);
<link linkend="int">int</link>                 <link linkend="idmef-web-service-compare">idmef_web_service_compare</link>           (const <link linkend="idmef-web-service-t">idmef_web_service_t</link> *obj1,
                                                         const <link linkend="idmef-web-service-t">idmef_web_service_t</link> *obj2);
#define             <link linkend="IDMEF-CLASS-ID-ADDITIONAL-DATA-TYPE--CAPS">IDMEF_CLASS_ID_ADDITIONAL_DATA_TYPE</link>
#define             <link linkend="IDMEF-CLASS-ID-ADDITIONAL-DATA--CAPS">IDMEF_CLASS_ID_ADDITIONAL_DATA</link>
#define             <link linkend="IDMEF-CLASS-ID-REFERENCE-ORIGIN--CAPS">IDMEF_CLASS_ID_REFERENCE_ORIGIN</link>
#define             <link linkend="IDMEF-CLASS-ID-REFERENCE--CAPS">IDMEF_CLASS_ID_REFERENCE</link>
#define             <link linkend="IDMEF-CLASS-ID-CLASSIFICATION--CAPS">IDMEF_CLASS_ID_CLASSIFICATION</link>
#define             <link linkend="IDMEF-CLASS-ID-USER-ID-TYPE--CAPS">IDMEF_CLASS_ID_USER_ID_TYPE</link>
#define             <link linkend="IDMEF-CLASS-ID-USER-ID--CAPS">IDMEF_CLASS_ID_USER_ID</link>
#define             <link linkend="IDMEF-CLASS-ID-USER-CATEGORY--CAPS">IDMEF_CLASS_ID_USER_CATEGORY</link>
#define             <link linkend="IDMEF-CLASS-ID-USER--CAPS">IDMEF_CLASS_ID_USER</link>
#define             <link linkend="IDMEF-CLASS-ID-ADDRESS-CATEGORY--CAPS">IDMEF_CLASS_ID_ADDRESS_CATEGORY</link>
#define             <link linkend="IDMEF-CLASS-ID-ADDRESS--CAPS">IDMEF_CLASS_ID_ADDRESS</link>
#define             <link linkend="IDMEF-CLASS-ID-PROCESS--CAPS">IDMEF_CLASS_ID_PROCESS</link>
#define             <link linkend="IDMEF-CLASS-ID-WEB-SERVICE--CAPS">IDMEF_CLASS_ID_WEB_SERVICE</link>
#define             <link linkend="IDMEF-CLASS-ID-SNMP-SERVICE--CAPS">IDMEF_CLASS_ID_SNMP_SERVICE</link>
#define             <link linkend="IDMEF-CLASS-ID-SERVICE-TYPE--CAPS">IDMEF_CLASS_ID_SERVICE_TYPE</link>
#define             <link linkend="IDMEF-CLASS-ID-SERVICE--CAPS">IDMEF_CLASS_ID_SERVICE</link>
#define             <link linkend="IDMEF-CLASS-ID-NODE-CATEGORY--CAPS">IDMEF_CLASS_ID_NODE_CATEGORY</link>
#define             <link linkend="IDMEF-CLASS-ID-NODE--CAPS">IDMEF_CLASS_ID_NODE</link>
#define             <link linkend="IDMEF-CLASS-ID-SOURCE-SPOOFED--CAPS">IDMEF_CLASS_ID_SOURCE_SPOOFED</link>
#define             <link linkend="IDMEF-CLASS-ID-SOURCE--CAPS">IDMEF_CLASS_ID_SOURCE</link>
#define             <link linkend="IDMEF-CLASS-ID-FILE-ACCESS--CAPS">IDMEF_CLASS_ID_FILE_ACCESS</link>
#define             <link linkend="IDMEF-CLASS-ID-INODE--CAPS">IDMEF_CLASS_ID_INODE</link>
#define             <link linkend="IDMEF-CLASS-ID-CHECKSUM-ALGORITHM--CAPS">IDMEF_CLASS_ID_CHECKSUM_ALGORITHM</link>
#define             <link linkend="IDMEF-CLASS-ID-CHECKSUM--CAPS">IDMEF_CLASS_ID_CHECKSUM</link>
#define             <link linkend="IDMEF-CLASS-ID-FILE-CATEGORY--CAPS">IDMEF_CLASS_ID_FILE_CATEGORY</link>
#define             <link linkend="IDMEF-CLASS-ID-FILE-FSTYPE--CAPS">IDMEF_CLASS_ID_FILE_FSTYPE</link>
#define             <link linkend="IDMEF-CLASS-ID-FILE--CAPS">IDMEF_CLASS_ID_FILE</link>
#define             <link linkend="IDMEF-CLASS-ID-LINKAGE-CATEGORY--CAPS">IDMEF_CLASS_ID_LINKAGE_CATEGORY</link>
#define             <link linkend="IDMEF-CLASS-ID-LINKAGE--CAPS">IDMEF_CLASS_ID_LINKAGE</link>
#define             <link linkend="IDMEF-CLASS-ID-TARGET-DECOY--CAPS">IDMEF_CLASS_ID_TARGET_DECOY</link>
#define             <link linkend="IDMEF-CLASS-ID-TARGET--CAPS">IDMEF_CLASS_ID_TARGET</link>
#define             <link linkend="IDMEF-CLASS-ID-ANALYZER--CAPS">IDMEF_CLASS_ID_ANALYZER</link>
#define             <link linkend="IDMEF-CLASS-ID-ALERTIDENT--CAPS">IDMEF_CLASS_ID_ALERTIDENT</link>
#define             <link linkend="IDMEF-CLASS-ID-IMPACT-SEVERITY--CAPS">IDMEF_CLASS_ID_IMPACT_SEVERITY</link>
#define             <link linkend="IDMEF-CLASS-ID-IMPACT-COMPLETION--CAPS">IDMEF_CLASS_ID_IMPACT_COMPLETION</link>
#define             <link linkend="IDMEF-CLASS-ID-IMPACT-TYPE--CAPS">IDMEF_CLASS_ID_IMPACT_TYPE</link>
#define             <link linkend="IDMEF-CLASS-ID-IMPACT--CAPS">IDMEF_CLASS_ID_IMPACT</link>
#define             <link linkend="IDMEF-CLASS-ID-ACTION-CATEGORY--CAPS">IDMEF_CLASS_ID_ACTION_CATEGORY</link>
#define             <link linkend="IDMEF-CLASS-ID-ACTION--CAPS">IDMEF_CLASS_ID_ACTION</link>
#define             <link linkend="IDMEF-CLASS-ID-CONFIDENCE-RATING--CAPS">IDMEF_CLASS_ID_CONFIDENCE_RATING</link>
#define             <link linkend="IDMEF-CLASS-ID-CONFIDENCE--CAPS">IDMEF_CLASS_ID_CONFIDENCE</link>
#define             <link linkend="IDMEF-CLASS-ID-ASSESSMENT--CAPS">IDMEF_CLASS_ID_ASSESSMENT</link>
#define             <link linkend="IDMEF-CLASS-ID-TOOL-ALERT--CAPS">IDMEF_CLASS_ID_TOOL_ALERT</link>
#define             <link linkend="IDMEF-CLASS-ID-CORRELATION-ALERT--CAPS">IDMEF_CLASS_ID_CORRELATION_ALERT</link>
#define             <link linkend="IDMEF-CLASS-ID-OVERFLOW-ALERT--CAPS">IDMEF_CLASS_ID_OVERFLOW_ALERT</link>
#define             <link linkend="IDMEF-CLASS-ID-ALERT-TYPE--CAPS">IDMEF_CLASS_ID_ALERT_TYPE</link>
#define             <link linkend="IDMEF-CLASS-ID-ALERT--CAPS">IDMEF_CLASS_ID_ALERT</link>
#define             <link linkend="IDMEF-CLASS-ID-HEARTBEAT--CAPS">IDMEF_CLASS_ID_HEARTBEAT</link>
#define             <link linkend="IDMEF-CLASS-ID-MESSAGE-TYPE--CAPS">IDMEF_CLASS_ID_MESSAGE_TYPE</link>
#define             <link linkend="IDMEF-CLASS-ID-MESSAGE--CAPS">IDMEF_CLASS_ID_MESSAGE</link>
</synopsis>
</refsynopsisdiv>









<refsect1 id="libprelude-idmef-tree-wrap.description" role="desc">
<title role="desc.title">Description</title>
<para>
The IDMEF API is used by a sensor in order to generate events.  IDMEF is an alert description
format allowing almost any alert information to fit within an IDMEF alert, independantly of the
type of analyzer used.
</para>
<para>
Here is real world example taken from the Snort Prelude sensors. The top level IDMEF object is always
of type <link linkend="idmef-message-t"><type>idmef_message_t</type></link>. You should refer to the <ulink url="http://www.ietf.org/internet-drafts/draft-ietf-idwg-idmef-xml-14.txt">IDMEF draft</ulink>, or to the Prelude API documentation in order to get a complete
listing of theses objects, or a description of what information an object may carry.
<programlisting>
void snort_alert_prelude(Packet *p, char *msg, void *data, Event *event)
{
        int ret;
        idmef_time_t *time;
        idmef_alert_t *alert;
        prelude_string_t *str;
        idmef_message_t *idmef;
        idmef_classification_t *class;
        prelude_client_t *client = data;
        ret = idmef_message_new(&amp;idmef);
        if ( ret &lt; 0 )
                return;
        ret = idmef_message_new_alert(idmef, &amp;alert);
        if ( ret &lt; 0 )
                goto err;
        ret = idmef_alert_new_classification(alert, &amp;class);
        if ( ret &lt; 0 )
                goto err;
        ret = idmef_classification_new_text(class, &amp;str);
        if ( ret &lt; 0 )
                goto err;
        prelude_string_set_ref(str, msg);
        ret = event_to_impact(event, alert);
        if ( ret &lt; 0 )
                goto err;
        ret = event_to_reference(event, class);
        if ( ret &lt; 0 )
                goto err;
        ret = event_to_source_target(p, alert);
        if ( ret &lt; 0 )
                goto err;
        ret = packet_to_data(p, event, alert);
        if ( ret &lt; 0 )
                goto err;
        ret = idmef_alert_new_detect_time(alert, &amp;time);
        if ( ret &lt; 0 )
                goto err;
        idmef_time_set_from_timeval(time, &amp;p->pkth->ts);
        ret = idmef_time_new_from_gettimeofday(&amp;time);
        if ( ret &lt; 0 )
                goto err;
        idmef_alert_set_create_time(alert, time);
        idmef_alert_set_analyzer(alert, idmef_analyzer_ref(prelude_client_get_analyzer(client)), 0);
        prelude_client_send_idmef(client, idmef);
 err:
        idmef_message_destroy(idmef);
	prelude_perror(ret, "Unable to create IDMEF alert");
}
</programlisting>
</para>
</refsect1>

<refsect1 id="libprelude-idmef-tree-wrap.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="IDMEF-LIST-APPEND--CAPS" role="macro">
<title>IDMEF_LIST_APPEND</title>
<indexterm zone="IDMEF-LIST-APPEND--CAPS"><primary sortas="IDMEF_LIST_APPEND">IDMEF_LIST_APPEND</primary></indexterm><programlisting>#define IDMEF_LIST_APPEND  INT_MAX
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-LIST-PREPEND--CAPS" role="macro">
<title>IDMEF_LIST_PREPEND</title>
<indexterm zone="IDMEF-LIST-PREPEND--CAPS"><primary sortas="IDMEF_LIST_PREPEND">IDMEF_LIST_PREPEND</primary></indexterm><programlisting>#define IDMEF_LIST_PREPEND (INT_MAX - 1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-message-get-data" role="function">
<title>idmef_message_get_data ()</title>
<indexterm zone="idmef-message-get-data"><primary sortas="idmef_message_get_data">idmef_message_get_data</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_get_data              (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         unsigned <link linkend="char">char</link> **data,
                                                         <link linkend="size-t">size_t</link> *size);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-number" role="function">
<title>idmef_message_get_number ()</title>
<indexterm zone="idmef-message-get-number"><primary sortas="idmef_message_get_number">idmef_message_get_number</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_get_number            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="double">double</link> *result);</programlisting>
<para>
Retrieve the number stored within <parameter>path</parameter> of <parameter>message</parameter> and store it
in the user provided <parameter>result</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> Path to retrieve the number from within <parameter>message</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> Pointer where the result should be stored.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A positive value in case <parameter>path</parameter> was successfully retrieved
0 if the path is empty, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-string" role="function">
<title>idmef_message_get_string ()</title>
<indexterm zone="idmef-message-get-string"><primary sortas="idmef_message_get_string">idmef_message_get_string</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_get_string            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="char">char</link> **result);</programlisting>
<para>
Retrieve the string stored within <parameter>path</parameter> of <parameter>message</parameter> and store it
in the user provided <parameter>result</parameter>.
</para>
<para>
The caller is responssible for freeing <parameter>result</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> Path to retrieve the string from within <parameter>message</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> Pointer where the result should be stored.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A positive value in case <parameter>path</parameter> was successfully retrieved
0 if the path is empty, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-value" role="function">
<title>idmef_message_get_value ()</title>
<indexterm zone="idmef-message-get-value"><primary sortas="idmef_message_get_value">idmef_message_get_value</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_get_value             (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="idmef-value-t">idmef_value_t</link> **value);</programlisting>
<para>
Retrieve the value stored within <parameter>path</parameter> of <parameter>message</parameter> and store it
in the user provided <parameter>value</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> Path to retrieve the value from within <parameter>message</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> Pointer where the result should be stored.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A positive value in case <parameter>path</parameter> was successfully retrieved
0 if the path is empty, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-data" role="function">
<title>idmef_message_set_data ()</title>
<indexterm zone="idmef-message-set-data"><primary sortas="idmef_message_set_data">idmef_message_set_data</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_set_data              (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> size);</programlisting>
<para>
This function will set the <parameter>path</parameter> member within <parameter>message</parameter> to the
provided <parameter>data</parameter> of size <parameter>size</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> Path to be set within <parameter>message</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> Pointer to data to associate <parameter>message</parameter>[<parameter>path</parameter>] with.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> Size of the data pointed to by <parameter>data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-number" role="function">
<title>idmef_message_set_number ()</title>
<indexterm zone="idmef-message-set-number"><primary sortas="idmef_message_set_number">idmef_message_set_number</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_set_number            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="double">double</link> number);</programlisting>
<para>
This function will set the <parameter>path</parameter> member within <parameter>message</parameter> to the
provided <parameter>value</parameter>, which will be converted to the <parameter>path</parameter> value type.
</para>
<para>
Example:
idmef_message_set_number(message, "alert.assessment.confidence.confidence", 0.123456);
idmef_message_set_number(message, "alert.source(0).service.port", 1024);</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> Path to be set within <parameter>message</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>number</parameter>&#160;:</term>
<listitem><simpara> Value to associate <parameter>message</parameter>[<parameter>path</parameter>] with.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-string" role="function">
<title>idmef_message_set_string ()</title>
<indexterm zone="idmef-message-set-string"><primary sortas="idmef_message_set_string">idmef_message_set_string</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_set_string            (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
This function will set the <parameter>path</parameter> member within <parameter>message</parameter> to the
provided <parameter>value</parameter>, which will be converted to the corresponding
<parameter>path</parameter> value type.
</para>
<para>
Example:
idmef_message_set_string(message, "alert.classification.text", "MyText");
idmef_message_set_string(message, "alert.source(0).service.port", "1024");</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> Path to be set within <parameter>message</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> Value to associate <parameter>message</parameter>[<parameter>path</parameter>] with.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-value" role="function">
<title>idmef_message_set_value ()</title>
<indexterm zone="idmef-message-set-value"><primary sortas="idmef_message_set_value">idmef_message_set_value</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_set_value             (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="idmef-value-t">idmef_value_t</link> *value);</programlisting>
<para>
This function will set the <parameter>path</parameter> member within <parameter>message</parameter> to the
provided <parameter>value</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> Path to be set within <parameter>message</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> Value to associate <parameter>message</parameter>[<parameter>path</parameter>] with.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-type-t" role="enum">
<title>enum idmef_additional_data_type_t</title>
<indexterm zone="idmef-additional-data-type-t"><primary sortas="idmef_additional_data_type_t">idmef_additional_data_type_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_ADDITIONAL_DATA_TYPE_ERROR = -1,
        IDMEF_ADDITIONAL_DATA_TYPE_STRING = 0,
        IDMEF_ADDITIONAL_DATA_TYPE_BYTE = 1,
        IDMEF_ADDITIONAL_DATA_TYPE_CHARACTER = 2,
        IDMEF_ADDITIONAL_DATA_TYPE_DATE_TIME = 3,
        IDMEF_ADDITIONAL_DATA_TYPE_INTEGER = 4,
        IDMEF_ADDITIONAL_DATA_TYPE_NTPSTAMP = 5,
        IDMEF_ADDITIONAL_DATA_TYPE_PORTLIST = 6,
        IDMEF_ADDITIONAL_DATA_TYPE_REAL = 7,
        IDMEF_ADDITIONAL_DATA_TYPE_BOOLEAN = 8,
        IDMEF_ADDITIONAL_DATA_TYPE_BYTE_STRING = 9,
        IDMEF_ADDITIONAL_DATA_TYPE_XML = 10
} idmef_additional_data_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-additional-data-type-to-numeric" role="function">
<title>idmef_additional_data_type_to_numeric ()</title>
<indexterm zone="idmef-additional-data-type-to-numeric"><primary sortas="idmef_additional_data_type_to_numeric">idmef_additional_data_type_to_numeric</primary></indexterm><programlisting><link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link>  idmef_additional_data_type_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-additional-data-type-t"><type>idmef_additional_data_type_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-type-to-string" role="function">
<title>idmef_additional_data_type_to_string ()</title>
<indexterm zone="idmef-additional-data-type-to-string"><primary sortas="idmef_additional_data_type_to_string">idmef_additional_data_type_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_additional_data_type_to_string
                                                        (<link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-additional-data-type-t"><type>idmef_additional_data_type_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-additional-data-type-t"><type>idmef_additional_data_type_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-t" role="typedef">
<title>idmef_additional_data_t</title>
<indexterm zone="idmef-additional-data-t"><primary sortas="idmef_additional_data_t">idmef_additional_data_t</primary></indexterm><programlisting>typedef struct idmef_additional_data idmef_additional_data_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-additional-data-new" role="function">
<title>idmef_additional_data_new ()</title>
<indexterm zone="idmef-additional-data-new"><primary sortas="idmef_additional_data_new">idmef_additional_data_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_additional_data_new           (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-copy" role="function">
<title>idmef_additional_data_copy ()</title>
<indexterm zone="idmef-additional-data-copy"><primary sortas="idmef_additional_data_copy">idmef_additional_data_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_additional_data_copy          (const <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *src,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-clone" role="function">
<title>idmef_additional_data_clone ()</title>
<indexterm zone="idmef-additional-data-clone"><primary sortas="idmef_additional_data_clone">idmef_additional_data_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_additional_data_clone         (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *src,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-ref" role="function">
<title>idmef_additional_data_ref ()</title>
<indexterm zone="idmef-additional-data-ref"><primary sortas="idmef_additional_data_ref">idmef_additional_data_ref</primary></indexterm><programlisting><link linkend="idmef-additional-data-t">idmef_additional_data_t</link> * idmef_additional_data_ref     (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *additional_data);</programlisting>
<para>
Increase <parameter>additional_data</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>additional_data</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>additional_data</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-destroy" role="function">
<title>idmef_additional_data_destroy ()</title>
<indexterm zone="idmef-additional-data-destroy"><primary sortas="idmef_additional_data_destroy">idmef_additional_data_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_additional_data_destroy       (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-get-type" role="function">
<title>idmef_additional_data_get_type ()</title>
<indexterm zone="idmef-additional-data-get-type"><primary sortas="idmef_additional_data_get_type">idmef_additional_data_get_type</primary></indexterm><programlisting><link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link>  idmef_additional_data_get_type
                                                        (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);</programlisting>
<para>
Get type children of the <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_additional_data_type_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-set-type" role="function">
<title>idmef_additional_data_set_type ()</title>
<indexterm zone="idmef-additional-data-set-type"><primary sortas="idmef_additional_data_set_type">idmef_additional_data_set_type</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_additional_data_set_type      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link> type);</programlisting>
<para>
Set <parameter>type</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>type</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>type</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-type-t"><type>idmef_additional_data_type_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-new-type" role="function">
<title>idmef_additional_data_new_type ()</title>
<indexterm zone="idmef-additional-data-new-type"><primary sortas="idmef_additional_data_new_type">idmef_additional_data_new_type</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_additional_data_new_type      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-type-t">idmef_additional_data_type_t</link> **ret);</programlisting>
<para>
Create a new type object, children of <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-additional-data-type-t"><type>idmef_additional_data_type_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-additional-data-type-t"><type>idmef_additional_data_type_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-get-meaning" role="function">
<title>idmef_additional_data_get_meaning ()</title>
<indexterm zone="idmef-additional-data-get-meaning"><primary sortas="idmef_additional_data_get_meaning">idmef_additional_data_get_meaning</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_additional_data_get_meaning   (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-set-meaning" role="function">
<title>idmef_additional_data_set_meaning ()</title>
<indexterm zone="idmef-additional-data-set-meaning"><primary sortas="idmef_additional_data_set_meaning">idmef_additional_data_set_meaning</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_additional_data_set_meaning   (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *meaning);</programlisting>
<para>
Set <parameter>meaning</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>meaning</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>meaning</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>meaning</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-new-meaning" role="function">
<title>idmef_additional_data_new_meaning ()</title>
<indexterm zone="idmef-additional-data-new-meaning"><primary sortas="idmef_additional_data_new_meaning">idmef_additional_data_new_meaning</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_additional_data_new_meaning   (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new meaning object, children of <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-get-data" role="function">
<title>idmef_additional_data_get_data ()</title>
<indexterm zone="idmef-additional-data-get-data"><primary sortas="idmef_additional_data_get_data">idmef_additional_data_get_data</primary></indexterm><programlisting><link linkend="idmef-data-t">idmef_data_t</link> *      idmef_additional_data_get_data      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-set-data" role="function">
<title>idmef_additional_data_set_data ()</title>
<indexterm zone="idmef-additional-data-set-data"><primary sortas="idmef_additional_data_set_data">idmef_additional_data_set_data</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_additional_data_set_data      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> *data);</programlisting>
<para>
Set <parameter>data</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>data</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>data</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-data-t"><type>idmef_data_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-new-data" role="function">
<title>idmef_additional_data_new_data ()</title>
<indexterm zone="idmef-additional-data-new-data"><primary sortas="idmef_additional_data_new_data">idmef_additional_data_new_data</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_additional_data_new_data      (<link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> **ret);</programlisting>
<para>
Create a new data object, children of <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-data-t"><type>idmef_data_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-data-t"><type>idmef_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-origin-t" role="enum">
<title>enum idmef_reference_origin_t</title>
<indexterm zone="idmef-reference-origin-t"><primary sortas="idmef_reference_origin_t">idmef_reference_origin_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_REFERENCE_ORIGIN_ERROR = -1,
        IDMEF_REFERENCE_ORIGIN_UNKNOWN = 0,
        IDMEF_REFERENCE_ORIGIN_VENDOR_SPECIFIC = 1,
        IDMEF_REFERENCE_ORIGIN_USER_SPECIFIC = 2,
        IDMEF_REFERENCE_ORIGIN_BUGTRAQID = 3,
        IDMEF_REFERENCE_ORIGIN_CVE = 4,
        IDMEF_REFERENCE_ORIGIN_OSVDB = 5
} idmef_reference_origin_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-reference-origin-to-numeric" role="function">
<title>idmef_reference_origin_to_numeric ()</title>
<indexterm zone="idmef-reference-origin-to-numeric"><primary sortas="idmef_reference_origin_to_numeric">idmef_reference_origin_to_numeric</primary></indexterm><programlisting><link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link>  idmef_reference_origin_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-reference-origin-t"><type>idmef_reference_origin_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-origin-to-string" role="function">
<title>idmef_reference_origin_to_string ()</title>
<indexterm zone="idmef-reference-origin-to-string"><primary sortas="idmef_reference_origin_to_string">idmef_reference_origin_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_reference_origin_to_string    (<link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-reference-origin-t"><type>idmef_reference_origin_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-reference-origin-t"><type>idmef_reference_origin_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-t" role="typedef">
<title>idmef_reference_t</title>
<indexterm zone="idmef-reference-t"><primary sortas="idmef_reference_t">idmef_reference_t</primary></indexterm><programlisting>typedef struct idmef_reference idmef_reference_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-reference-new" role="function">
<title>idmef_reference_new ()</title>
<indexterm zone="idmef-reference-new"><primary sortas="idmef_reference_new">idmef_reference_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_new                 (<link linkend="idmef-reference-t">idmef_reference_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-copy" role="function">
<title>idmef_reference_copy ()</title>
<indexterm zone="idmef-reference-copy"><primary sortas="idmef_reference_copy">idmef_reference_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_copy                (const <link linkend="idmef-reference-t">idmef_reference_t</link> *src,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-clone" role="function">
<title>idmef_reference_clone ()</title>
<indexterm zone="idmef-reference-clone"><primary sortas="idmef_reference_clone">idmef_reference_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_clone               (<link linkend="idmef-reference-t">idmef_reference_t</link> *src,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-ref" role="function">
<title>idmef_reference_ref ()</title>
<indexterm zone="idmef-reference-ref"><primary sortas="idmef_reference_ref">idmef_reference_ref</primary></indexterm><programlisting><link linkend="idmef-reference-t">idmef_reference_t</link> * idmef_reference_ref                 (<link linkend="idmef-reference-t">idmef_reference_t</link> *reference);</programlisting>
<para>
Increase <parameter>reference</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>reference</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>reference</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-destroy" role="function">
<title>idmef_reference_destroy ()</title>
<indexterm zone="idmef-reference-destroy"><primary sortas="idmef_reference_destroy">idmef_reference_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_reference_destroy             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-get-origin" role="function">
<title>idmef_reference_get_origin ()</title>
<indexterm zone="idmef-reference-get-origin"><primary sortas="idmef_reference_get_origin">idmef_reference_get_origin</primary></indexterm><programlisting><link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link>  idmef_reference_get_origin    (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);</programlisting>
<para>
Get origin children of the <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_reference_origin_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-set-origin" role="function">
<title>idmef_reference_set_origin ()</title>
<indexterm zone="idmef-reference-set-origin"><primary sortas="idmef_reference_set_origin">idmef_reference_set_origin</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_reference_set_origin          (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link> origin);</programlisting>
<para>
Set <parameter>origin</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>origin</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>origin</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>origin</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-origin-t"><type>idmef_reference_origin_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-new-origin" role="function">
<title>idmef_reference_new_origin ()</title>
<indexterm zone="idmef-reference-new-origin"><primary sortas="idmef_reference_new_origin">idmef_reference_new_origin</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_new_origin          (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="idmef-reference-origin-t">idmef_reference_origin_t</link> **ret);</programlisting>
<para>
Create a new origin object, children of <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-reference-origin-t"><type>idmef_reference_origin_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-reference-origin-t"><type>idmef_reference_origin_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-get-name" role="function">
<title>idmef_reference_get_name ()</title>
<indexterm zone="idmef-reference-get-name"><primary sortas="idmef_reference_get_name">idmef_reference_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_reference_get_name            (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-set-name" role="function">
<title>idmef_reference_set_name ()</title>
<indexterm zone="idmef-reference-set-name"><primary sortas="idmef_reference_set_name">idmef_reference_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_reference_set_name            (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-new-name" role="function">
<title>idmef_reference_new_name ()</title>
<indexterm zone="idmef-reference-new-name"><primary sortas="idmef_reference_new_name">idmef_reference_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_new_name            (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-get-url" role="function">
<title>idmef_reference_get_url ()</title>
<indexterm zone="idmef-reference-get-url"><primary sortas="idmef_reference_get_url">idmef_reference_get_url</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_reference_get_url             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-set-url" role="function">
<title>idmef_reference_set_url ()</title>
<indexterm zone="idmef-reference-set-url"><primary sortas="idmef_reference_set_url">idmef_reference_set_url</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_reference_set_url             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *url);</programlisting>
<para>
Set <parameter>url</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>url</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>url</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>url</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-new-url" role="function">
<title>idmef_reference_new_url ()</title>
<indexterm zone="idmef-reference-new-url"><primary sortas="idmef_reference_new_url">idmef_reference_new_url</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_new_url             (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new url object, children of <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-get-meaning" role="function">
<title>idmef_reference_get_meaning ()</title>
<indexterm zone="idmef-reference-get-meaning"><primary sortas="idmef_reference_get_meaning">idmef_reference_get_meaning</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_reference_get_meaning         (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-set-meaning" role="function">
<title>idmef_reference_set_meaning ()</title>
<indexterm zone="idmef-reference-set-meaning"><primary sortas="idmef_reference_set_meaning">idmef_reference_set_meaning</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_reference_set_meaning         (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *meaning);</programlisting>
<para>
Set <parameter>meaning</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>meaning</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>meaning</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>meaning</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-new-meaning" role="function">
<title>idmef_reference_new_meaning ()</title>
<indexterm zone="idmef-reference-new-meaning"><primary sortas="idmef_reference_new_meaning">idmef_reference_new_meaning</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_new_meaning         (<link linkend="idmef-reference-t">idmef_reference_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new meaning object, children of <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-t" role="typedef">
<title>idmef_classification_t</title>
<indexterm zone="idmef-classification-t"><primary sortas="idmef_classification_t">idmef_classification_t</primary></indexterm><programlisting>typedef struct idmef_classification idmef_classification_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-classification-new" role="function">
<title>idmef_classification_new ()</title>
<indexterm zone="idmef-classification-new"><primary sortas="idmef_classification_new">idmef_classification_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_classification_new            (<link linkend="idmef-classification-t">idmef_classification_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-copy" role="function">
<title>idmef_classification_copy ()</title>
<indexterm zone="idmef-classification-copy"><primary sortas="idmef_classification_copy">idmef_classification_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_classification_copy           (const <link linkend="idmef-classification-t">idmef_classification_t</link> *src,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-clone" role="function">
<title>idmef_classification_clone ()</title>
<indexterm zone="idmef-classification-clone"><primary sortas="idmef_classification_clone">idmef_classification_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_classification_clone          (<link linkend="idmef-classification-t">idmef_classification_t</link> *src,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-ref" role="function">
<title>idmef_classification_ref ()</title>
<indexterm zone="idmef-classification-ref"><primary sortas="idmef_classification_ref">idmef_classification_ref</primary></indexterm><programlisting><link linkend="idmef-classification-t">idmef_classification_t</link> * idmef_classification_ref       (<link linkend="idmef-classification-t">idmef_classification_t</link> *classification);</programlisting>
<para>
Increase <parameter>classification</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>classification</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>classification</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-destroy" role="function">
<title>idmef_classification_destroy ()</title>
<indexterm zone="idmef-classification-destroy"><primary sortas="idmef_classification_destroy">idmef_classification_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_classification_destroy        (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-get-ident" role="function">
<title>idmef_classification_get_ident ()</title>
<indexterm zone="idmef-classification-get-ident"><primary sortas="idmef_classification_get_ident">idmef_classification_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_classification_get_ident      (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-set-ident" role="function">
<title>idmef_classification_set_ident ()</title>
<indexterm zone="idmef-classification-set-ident"><primary sortas="idmef_classification_set_ident">idmef_classification_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_classification_set_ident      (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-new-ident" role="function">
<title>idmef_classification_new_ident ()</title>
<indexterm zone="idmef-classification-new-ident"><primary sortas="idmef_classification_new_ident">idmef_classification_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_classification_new_ident      (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-get-text" role="function">
<title>idmef_classification_get_text ()</title>
<indexterm zone="idmef-classification-get-text"><primary sortas="idmef_classification_get_text">idmef_classification_get_text</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_classification_get_text       (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-set-text" role="function">
<title>idmef_classification_set_text ()</title>
<indexterm zone="idmef-classification-set-text"><primary sortas="idmef_classification_set_text">idmef_classification_set_text</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_classification_set_text       (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *text);</programlisting>
<para>
Set <parameter>text</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>text</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>text</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-new-text" role="function">
<title>idmef_classification_new_text ()</title>
<indexterm zone="idmef-classification-new-text"><primary sortas="idmef_classification_new_text">idmef_classification_new_text</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_classification_new_text       (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new text object, children of <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-get-next-reference" role="function">
<title>idmef_classification_get_next_reference ()</title>
<indexterm zone="idmef-classification-get-next-reference"><primary sortas="idmef_classification_get_next_reference">idmef_classification_get_next_reference</primary></indexterm><programlisting><link linkend="idmef-reference-t">idmef_reference_t</link> * idmef_classification_get_next_reference
                                                        (<link linkend="idmef-classification-t">idmef_classification_t</link> *classification,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> *reference_cur);</programlisting>
<para>
Get the next <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_reference_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>classification</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reference_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-set-reference" role="function">
<title>idmef_classification_set_reference ()</title>
<indexterm zone="idmef-classification-set-reference"><primary sortas="idmef_classification_set_reference">idmef_classification_set_reference</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_classification_set_reference  (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-new-reference" role="function">
<title>idmef_classification_new_reference ()</title>
<indexterm zone="idmef-classification-new-reference"><primary sortas="idmef_classification_new_reference">idmef_classification_new_reference</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_classification_new_reference  (<link linkend="idmef-classification-t">idmef_classification_t</link> *ptr,
                                                         <link linkend="idmef-reference-t">idmef_reference_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object. The created <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-reference-t"><type>idmef_reference_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-type-t" role="enum">
<title>enum idmef_user_id_type_t</title>
<indexterm zone="idmef-user-id-type-t"><primary sortas="idmef_user_id_type_t">idmef_user_id_type_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_USER_ID_TYPE_ORIGINAL_ERROR = -1,
        IDMEF_USER_ID_TYPE_ORIGINAL_USER = 0,
        IDMEF_USER_ID_TYPE_CURRENT_USER = 1,
        IDMEF_USER_ID_TYPE_TARGET_USER = 2,
        IDMEF_USER_ID_TYPE_USER_PRIVS = 3,
        IDMEF_USER_ID_TYPE_CURRENT_GROUP = 4,
        IDMEF_USER_ID_TYPE_GROUP_PRIVS = 5,
        IDMEF_USER_ID_TYPE_OTHER_PRIVS = 6
} idmef_user_id_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-user-id-type-to-numeric" role="function">
<title>idmef_user_id_type_to_numeric ()</title>
<indexterm zone="idmef-user-id-type-to-numeric"><primary sortas="idmef_user_id_type_to_numeric">idmef_user_id_type_to_numeric</primary></indexterm><programlisting><link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link>  idmef_user_id_type_to_numeric     (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-user-id-type-t"><type>idmef_user_id_type_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-type-to-string" role="function">
<title>idmef_user_id_type_to_string ()</title>
<indexterm zone="idmef-user-id-type-to-string"><primary sortas="idmef_user_id_type_to_string">idmef_user_id_type_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_user_id_type_to_string        (<link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-user-id-type-t"><type>idmef_user_id_type_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-user-id-type-t"><type>idmef_user_id_type_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-t" role="typedef">
<title>idmef_user_id_t</title>
<indexterm zone="idmef-user-id-t"><primary sortas="idmef_user_id_t">idmef_user_id_t</primary></indexterm><programlisting>typedef struct idmef_user_id idmef_user_id_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-user-id-new" role="function">
<title>idmef_user_id_new ()</title>
<indexterm zone="idmef-user-id-new"><primary sortas="idmef_user_id_new">idmef_user_id_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_new                   (<link linkend="idmef-user-id-t">idmef_user_id_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-copy" role="function">
<title>idmef_user_id_copy ()</title>
<indexterm zone="idmef-user-id-copy"><primary sortas="idmef_user_id_copy">idmef_user_id_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_copy                  (const <link linkend="idmef-user-id-t">idmef_user_id_t</link> *src,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-clone" role="function">
<title>idmef_user_id_clone ()</title>
<indexterm zone="idmef-user-id-clone"><primary sortas="idmef_user_id_clone">idmef_user_id_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_clone                 (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *src,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-ref" role="function">
<title>idmef_user_id_ref ()</title>
<indexterm zone="idmef-user-id-ref"><primary sortas="idmef_user_id_ref">idmef_user_id_ref</primary></indexterm><programlisting><link linkend="idmef-user-id-t">idmef_user_id_t</link> *   idmef_user_id_ref                   (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *user_id);</programlisting>
<para>
Increase <parameter>user_id</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user_id</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>user_id</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-destroy" role="function">
<title>idmef_user_id_destroy ()</title>
<indexterm zone="idmef-user-id-destroy"><primary sortas="idmef_user_id_destroy">idmef_user_id_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_id_destroy               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-get-ident" role="function">
<title>idmef_user_id_get_ident ()</title>
<indexterm zone="idmef-user-id-get-ident"><primary sortas="idmef_user_id_get_ident">idmef_user_id_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_user_id_get_ident             (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-set-ident" role="function">
<title>idmef_user_id_set_ident ()</title>
<indexterm zone="idmef-user-id-set-ident"><primary sortas="idmef_user_id_set_ident">idmef_user_id_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_id_set_ident             (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-new-ident" role="function">
<title>idmef_user_id_new_ident ()</title>
<indexterm zone="idmef-user-id-new-ident"><primary sortas="idmef_user_id_new_ident">idmef_user_id_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_new_ident             (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-get-type" role="function">
<title>idmef_user_id_get_type ()</title>
<indexterm zone="idmef-user-id-get-type"><primary sortas="idmef_user_id_get_type">idmef_user_id_get_type</primary></indexterm><programlisting><link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link>  idmef_user_id_get_type            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);</programlisting>
<para>
Get type children of the <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_user_id_type_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-set-type" role="function">
<title>idmef_user_id_set_type ()</title>
<indexterm zone="idmef-user-id-set-type"><primary sortas="idmef_user_id_set_type">idmef_user_id_set_type</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_id_set_type              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link> type);</programlisting>
<para>
Set <parameter>type</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>type</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>type</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-type-t"><type>idmef_user_id_type_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-new-type" role="function">
<title>idmef_user_id_new_type ()</title>
<indexterm zone="idmef-user-id-new-type"><primary sortas="idmef_user_id_new_type">idmef_user_id_new_type</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_new_type              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="idmef-user-id-type-t">idmef_user_id_type_t</link> **ret);</programlisting>
<para>
Create a new type object, children of <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-user-id-type-t"><type>idmef_user_id_type_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-user-id-type-t"><type>idmef_user_id_type_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-get-tty" role="function">
<title>idmef_user_id_get_tty ()</title>
<indexterm zone="idmef-user-id-get-tty"><primary sortas="idmef_user_id_get_tty">idmef_user_id_get_tty</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_user_id_get_tty               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-set-tty" role="function">
<title>idmef_user_id_set_tty ()</title>
<indexterm zone="idmef-user-id-set-tty"><primary sortas="idmef_user_id_set_tty">idmef_user_id_set_tty</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_id_set_tty               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *tty);</programlisting>
<para>
Set <parameter>tty</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>tty</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>tty</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tty</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-new-tty" role="function">
<title>idmef_user_id_new_tty ()</title>
<indexterm zone="idmef-user-id-new-tty"><primary sortas="idmef_user_id_new_tty">idmef_user_id_new_tty</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_new_tty               (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new tty object, children of <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-get-name" role="function">
<title>idmef_user_id_get_name ()</title>
<indexterm zone="idmef-user-id-get-name"><primary sortas="idmef_user_id_get_name">idmef_user_id_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_user_id_get_name              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-set-name" role="function">
<title>idmef_user_id_set_name ()</title>
<indexterm zone="idmef-user-id-set-name"><primary sortas="idmef_user_id_set_name">idmef_user_id_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_id_set_name              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-new-name" role="function">
<title>idmef_user_id_new_name ()</title>
<indexterm zone="idmef-user-id-new-name"><primary sortas="idmef_user_id_new_name">idmef_user_id_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_new_name              (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-unset-number" role="function">
<title>idmef_user_id_unset_number ()</title>
<indexterm zone="idmef-user-id-unset-number"><primary sortas="idmef_user_id_unset_number">idmef_user_id_unset_number</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_id_unset_number          (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-get-number" role="function">
<title>idmef_user_id_get_number ()</title>
<indexterm zone="idmef-user-id-get-number"><primary sortas="idmef_user_id_get_number">idmef_user_id_get_number</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_user_id_get_number            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-set-number" role="function">
<title>idmef_user_id_set_number ()</title>
<indexterm zone="idmef-user-id-set-number"><primary sortas="idmef_user_id_set_number">idmef_user_id_set_number</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_id_set_number            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> number);</programlisting>
<para>
Set <parameter>number</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>number</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>number</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>number</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-new-number" role="function">
<title>idmef_user_id_new_number ()</title>
<indexterm zone="idmef-user-id-new-number"><primary sortas="idmef_user_id_new_number">idmef_user_id_new_number</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_new_number            (<link linkend="idmef-user-id-t">idmef_user_id_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new number object, children of <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-category-t" role="enum">
<title>enum idmef_user_category_t</title>
<indexterm zone="idmef-user-category-t"><primary sortas="idmef_user_category_t">idmef_user_category_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_USER_CATEGORY_ERROR = -1,
        IDMEF_USER_CATEGORY_UNKNOWN = 0,
        IDMEF_USER_CATEGORY_APPLICATION = 1,
        IDMEF_USER_CATEGORY_OS_DEVICE = 2
} idmef_user_category_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-user-category-to-numeric" role="function">
<title>idmef_user_category_to_numeric ()</title>
<indexterm zone="idmef-user-category-to-numeric"><primary sortas="idmef_user_category_to_numeric">idmef_user_category_to_numeric</primary></indexterm><programlisting><link linkend="idmef-user-category-t">idmef_user_category_t</link>  idmef_user_category_to_numeric   (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-user-category-t"><type>idmef_user_category_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-category-to-string" role="function">
<title>idmef_user_category_to_string ()</title>
<indexterm zone="idmef-user-category-to-string"><primary sortas="idmef_user_category_to_string">idmef_user_category_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_user_category_to_string       (<link linkend="idmef-user-category-t">idmef_user_category_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-user-category-t"><type>idmef_user_category_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-user-category-t"><type>idmef_user_category_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-t" role="typedef">
<title>idmef_user_t</title>
<indexterm zone="idmef-user-t"><primary sortas="idmef_user_t">idmef_user_t</primary></indexterm><programlisting>typedef struct idmef_user idmef_user_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-user-new" role="function">
<title>idmef_user_new ()</title>
<indexterm zone="idmef-user-new"><primary sortas="idmef_user_new">idmef_user_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_new                      (<link linkend="idmef-user-t">idmef_user_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-copy" role="function">
<title>idmef_user_copy ()</title>
<indexterm zone="idmef-user-copy"><primary sortas="idmef_user_copy">idmef_user_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_copy                     (const <link linkend="idmef-user-t">idmef_user_t</link> *src,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-clone" role="function">
<title>idmef_user_clone ()</title>
<indexterm zone="idmef-user-clone"><primary sortas="idmef_user_clone">idmef_user_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_clone                    (<link linkend="idmef-user-t">idmef_user_t</link> *src,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-ref" role="function">
<title>idmef_user_ref ()</title>
<indexterm zone="idmef-user-ref"><primary sortas="idmef_user_ref">idmef_user_ref</primary></indexterm><programlisting><link linkend="idmef-user-t">idmef_user_t</link> *      idmef_user_ref                      (<link linkend="idmef-user-t">idmef_user_t</link> *user);</programlisting>
<para>
Increase <parameter>user</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>user</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-destroy" role="function">
<title>idmef_user_destroy ()</title>
<indexterm zone="idmef-user-destroy"><primary sortas="idmef_user_destroy">idmef_user_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_destroy                  (<link linkend="idmef-user-t">idmef_user_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-get-ident" role="function">
<title>idmef_user_get_ident ()</title>
<indexterm zone="idmef-user-get-ident"><primary sortas="idmef_user_get_ident">idmef_user_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_user_get_ident                (<link linkend="idmef-user-t">idmef_user_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-set-ident" role="function">
<title>idmef_user_set_ident ()</title>
<indexterm zone="idmef-user-set-ident"><primary sortas="idmef_user_set_ident">idmef_user_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_set_ident                (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-new-ident" role="function">
<title>idmef_user_new_ident ()</title>
<indexterm zone="idmef-user-new-ident"><primary sortas="idmef_user_new_ident">idmef_user_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_new_ident                (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-user-t"><type>idmef_user_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-get-category" role="function">
<title>idmef_user_get_category ()</title>
<indexterm zone="idmef-user-get-category"><primary sortas="idmef_user_get_category">idmef_user_get_category</primary></indexterm><programlisting><link linkend="idmef-user-category-t">idmef_user_category_t</link>  idmef_user_get_category          (<link linkend="idmef-user-t">idmef_user_t</link> *ptr);</programlisting>
<para>
Get category children of the <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_user_category_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-set-category" role="function">
<title>idmef_user_set_category ()</title>
<indexterm zone="idmef-user-set-category"><primary sortas="idmef_user_set_category">idmef_user_set_category</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_set_category             (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-category-t">idmef_user_category_t</link> category);</programlisting>
<para>
Set <parameter>category</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>category</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>category</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-category-t"><type>idmef_user_category_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-new-category" role="function">
<title>idmef_user_new_category ()</title>
<indexterm zone="idmef-user-new-category"><primary sortas="idmef_user_new_category">idmef_user_new_category</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_new_category             (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-category-t">idmef_user_category_t</link> **ret);</programlisting>
<para>
Create a new category object, children of <link linkend="idmef-user-t"><type>idmef_user_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-user-category-t"><type>idmef_user_category_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-user-category-t"><type>idmef_user_category_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-get-next-user-id" role="function">
<title>idmef_user_get_next_user_id ()</title>
<indexterm zone="idmef-user-get-next-user-id"><primary sortas="idmef_user_get_next_user_id">idmef_user_get_next_user_id</primary></indexterm><programlisting><link linkend="idmef-user-id-t">idmef_user_id_t</link> *   idmef_user_get_next_user_id         (<link linkend="idmef-user-t">idmef_user_t</link> *user,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *user_id_cur);</programlisting>
<para>
Get the next <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_user_id_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_id_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-set-user-id" role="function">
<title>idmef_user_set_user_id ()</title>
<indexterm zone="idmef-user-set-user-id"><primary sortas="idmef_user_set_user_id">idmef_user_set_user_id</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_user_set_user_id              (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-new-user-id" role="function">
<title>idmef_user_new_user_id ()</title>
<indexterm zone="idmef-user-new-user-id"><primary sortas="idmef_user_new_user_id">idmef_user_new_user_id</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_new_user_id              (<link linkend="idmef-user-t">idmef_user_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object. The created <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-category-t" role="enum">
<title>enum idmef_address_category_t</title>
<indexterm zone="idmef-address-category-t"><primary sortas="idmef_address_category_t">idmef_address_category_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_ADDRESS_CATEGORY_ERROR = -1,
        IDMEF_ADDRESS_CATEGORY_UNKNOWN = 0,
        IDMEF_ADDRESS_CATEGORY_ATM = 1,
        IDMEF_ADDRESS_CATEGORY_E_MAIL = 2,
        IDMEF_ADDRESS_CATEGORY_LOTUS_NOTES = 3,
        IDMEF_ADDRESS_CATEGORY_MAC = 4,
        IDMEF_ADDRESS_CATEGORY_SNA = 5,
        IDMEF_ADDRESS_CATEGORY_VM = 6,
        IDMEF_ADDRESS_CATEGORY_IPV4_ADDR = 7,
        IDMEF_ADDRESS_CATEGORY_IPV4_ADDR_HEX = 8,
        IDMEF_ADDRESS_CATEGORY_IPV4_NET = 9,
        IDMEF_ADDRESS_CATEGORY_IPV4_NET_MASK = 10,
        IDMEF_ADDRESS_CATEGORY_IPV6_ADDR = 11,
        IDMEF_ADDRESS_CATEGORY_IPV6_ADDR_HEX = 12,
        IDMEF_ADDRESS_CATEGORY_IPV6_NET = 13,
        IDMEF_ADDRESS_CATEGORY_IPV6_NET_MASK = 14
} idmef_address_category_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-address-category-to-numeric" role="function">
<title>idmef_address_category_to_numeric ()</title>
<indexterm zone="idmef-address-category-to-numeric"><primary sortas="idmef_address_category_to_numeric">idmef_address_category_to_numeric</primary></indexterm><programlisting><link linkend="idmef-address-category-t">idmef_address_category_t</link>  idmef_address_category_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-address-category-t"><type>idmef_address_category_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-category-to-string" role="function">
<title>idmef_address_category_to_string ()</title>
<indexterm zone="idmef-address-category-to-string"><primary sortas="idmef_address_category_to_string">idmef_address_category_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_address_category_to_string    (<link linkend="idmef-address-category-t">idmef_address_category_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-address-category-t"><type>idmef_address_category_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-address-category-t"><type>idmef_address_category_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-t" role="typedef">
<title>idmef_address_t</title>
<indexterm zone="idmef-address-t"><primary sortas="idmef_address_t">idmef_address_t</primary></indexterm><programlisting>typedef struct idmef_address idmef_address_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-address-new" role="function">
<title>idmef_address_new ()</title>
<indexterm zone="idmef-address-new"><primary sortas="idmef_address_new">idmef_address_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_new                   (<link linkend="idmef-address-t">idmef_address_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-copy" role="function">
<title>idmef_address_copy ()</title>
<indexterm zone="idmef-address-copy"><primary sortas="idmef_address_copy">idmef_address_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_copy                  (const <link linkend="idmef-address-t">idmef_address_t</link> *src,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-clone" role="function">
<title>idmef_address_clone ()</title>
<indexterm zone="idmef-address-clone"><primary sortas="idmef_address_clone">idmef_address_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_clone                 (<link linkend="idmef-address-t">idmef_address_t</link> *src,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-ref" role="function">
<title>idmef_address_ref ()</title>
<indexterm zone="idmef-address-ref"><primary sortas="idmef_address_ref">idmef_address_ref</primary></indexterm><programlisting><link linkend="idmef-address-t">idmef_address_t</link> *   idmef_address_ref                   (<link linkend="idmef-address-t">idmef_address_t</link> *address);</programlisting>
<para>
Increase <parameter>address</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>address</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>address</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-destroy" role="function">
<title>idmef_address_destroy ()</title>
<indexterm zone="idmef-address-destroy"><primary sortas="idmef_address_destroy">idmef_address_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_destroy               (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-get-ident" role="function">
<title>idmef_address_get_ident ()</title>
<indexterm zone="idmef-address-get-ident"><primary sortas="idmef_address_get_ident">idmef_address_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_address_get_ident             (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-set-ident" role="function">
<title>idmef_address_set_ident ()</title>
<indexterm zone="idmef-address-set-ident"><primary sortas="idmef_address_set_ident">idmef_address_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_set_ident             (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-new-ident" role="function">
<title>idmef_address_new_ident ()</title>
<indexterm zone="idmef-address-new-ident"><primary sortas="idmef_address_new_ident">idmef_address_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_new_ident             (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-address-t"><type>idmef_address_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-get-category" role="function">
<title>idmef_address_get_category ()</title>
<indexterm zone="idmef-address-get-category"><primary sortas="idmef_address_get_category">idmef_address_get_category</primary></indexterm><programlisting><link linkend="idmef-address-category-t">idmef_address_category_t</link>  idmef_address_get_category    (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
Get category children of the <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_address_category_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-set-category" role="function">
<title>idmef_address_set_category ()</title>
<indexterm zone="idmef-address-set-category"><primary sortas="idmef_address_set_category">idmef_address_set_category</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_set_category          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="idmef-address-category-t">idmef_address_category_t</link> category);</programlisting>
<para>
Set <parameter>category</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>category</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>category</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-category-t"><type>idmef_address_category_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-new-category" role="function">
<title>idmef_address_new_category ()</title>
<indexterm zone="idmef-address-new-category"><primary sortas="idmef_address_new_category">idmef_address_new_category</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_new_category          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="idmef-address-category-t">idmef_address_category_t</link> **ret);</programlisting>
<para>
Create a new category object, children of <link linkend="idmef-address-t"><type>idmef_address_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-address-category-t"><type>idmef_address_category_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-address-category-t"><type>idmef_address_category_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-get-vlan-name" role="function">
<title>idmef_address_get_vlan_name ()</title>
<indexterm zone="idmef-address-get-vlan-name"><primary sortas="idmef_address_get_vlan_name">idmef_address_get_vlan_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_address_get_vlan_name         (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-set-vlan-name" role="function">
<title>idmef_address_set_vlan_name ()</title>
<indexterm zone="idmef-address-set-vlan-name"><primary sortas="idmef_address_set_vlan_name">idmef_address_set_vlan_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_set_vlan_name         (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *vlan_name);</programlisting>
<para>
Set <parameter>vlan_name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>vlan_name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>vlan_name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vlan_name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-new-vlan-name" role="function">
<title>idmef_address_new_vlan_name ()</title>
<indexterm zone="idmef-address-new-vlan-name"><primary sortas="idmef_address_new_vlan_name">idmef_address_new_vlan_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_new_vlan_name         (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new vlan_name object, children of <link linkend="idmef-address-t"><type>idmef_address_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-unset-vlan-num" role="function">
<title>idmef_address_unset_vlan_num ()</title>
<indexterm zone="idmef-address-unset-vlan-num"><primary sortas="idmef_address_unset_vlan_num">idmef_address_unset_vlan_num</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_unset_vlan_num        (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-get-vlan-num" role="function">
<title>idmef_address_get_vlan_num ()</title>
<indexterm zone="idmef-address-get-vlan-num"><primary sortas="idmef_address_get_vlan_num">idmef_address_get_vlan_num</primary></indexterm><programlisting><link linkend="int32-t">int32_t</link> *           idmef_address_get_vlan_num          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-set-vlan-num" role="function">
<title>idmef_address_set_vlan_num ()</title>
<indexterm zone="idmef-address-set-vlan-num"><primary sortas="idmef_address_set_vlan_num">idmef_address_set_vlan_num</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_set_vlan_num          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="int32-t">int32_t</link> vlan_num);</programlisting>
<para>
Set <parameter>vlan_num</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>vlan_num</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>vlan_num</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vlan_num</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="int32-t"><type>int32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-new-vlan-num" role="function">
<title>idmef_address_new_vlan_num ()</title>
<indexterm zone="idmef-address-new-vlan-num"><primary sortas="idmef_address_new_vlan_num">idmef_address_new_vlan_num</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_new_vlan_num          (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="int32-t">int32_t</link> **ret);</programlisting>
<para>
Create a new vlan_num object, children of <link linkend="idmef-address-t"><type>idmef_address_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="int32-t"><type>int32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="int32-t"><type>int32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-get-address" role="function">
<title>idmef_address_get_address ()</title>
<indexterm zone="idmef-address-get-address"><primary sortas="idmef_address_get_address">idmef_address_get_address</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_address_get_address           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-set-address" role="function">
<title>idmef_address_set_address ()</title>
<indexterm zone="idmef-address-set-address"><primary sortas="idmef_address_set_address">idmef_address_set_address</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_set_address           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *address);</programlisting>
<para>
Set <parameter>address</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>address</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>address</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>address</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-new-address" role="function">
<title>idmef_address_new_address ()</title>
<indexterm zone="idmef-address-new-address"><primary sortas="idmef_address_new_address">idmef_address_new_address</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_new_address           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new address object, children of <link linkend="idmef-address-t"><type>idmef_address_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-get-netmask" role="function">
<title>idmef_address_get_netmask ()</title>
<indexterm zone="idmef-address-get-netmask"><primary sortas="idmef_address_get_netmask">idmef_address_get_netmask</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_address_get_netmask           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-set-netmask" role="function">
<title>idmef_address_set_netmask ()</title>
<indexterm zone="idmef-address-set-netmask"><primary sortas="idmef_address_set_netmask">idmef_address_set_netmask</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_address_set_netmask           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *netmask);</programlisting>
<para>
Set <parameter>netmask</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>netmask</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>netmask</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>netmask</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-new-netmask" role="function">
<title>idmef_address_new_netmask ()</title>
<indexterm zone="idmef-address-new-netmask"><primary sortas="idmef_address_new_netmask">idmef_address_new_netmask</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_new_netmask           (<link linkend="idmef-address-t">idmef_address_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new netmask object, children of <link linkend="idmef-address-t"><type>idmef_address_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-t" role="typedef">
<title>idmef_process_t</title>
<indexterm zone="idmef-process-t"><primary sortas="idmef_process_t">idmef_process_t</primary></indexterm><programlisting>typedef struct idmef_process idmef_process_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-process-new" role="function">
<title>idmef_process_new ()</title>
<indexterm zone="idmef-process-new"><primary sortas="idmef_process_new">idmef_process_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_new                   (<link linkend="idmef-process-t">idmef_process_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-copy" role="function">
<title>idmef_process_copy ()</title>
<indexterm zone="idmef-process-copy"><primary sortas="idmef_process_copy">idmef_process_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_copy                  (const <link linkend="idmef-process-t">idmef_process_t</link> *src,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-clone" role="function">
<title>idmef_process_clone ()</title>
<indexterm zone="idmef-process-clone"><primary sortas="idmef_process_clone">idmef_process_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_clone                 (<link linkend="idmef-process-t">idmef_process_t</link> *src,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-ref" role="function">
<title>idmef_process_ref ()</title>
<indexterm zone="idmef-process-ref"><primary sortas="idmef_process_ref">idmef_process_ref</primary></indexterm><programlisting><link linkend="idmef-process-t">idmef_process_t</link> *   idmef_process_ref                   (<link linkend="idmef-process-t">idmef_process_t</link> *process);</programlisting>
<para>
Increase <parameter>process</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>process</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>process</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-destroy" role="function">
<title>idmef_process_destroy ()</title>
<indexterm zone="idmef-process-destroy"><primary sortas="idmef_process_destroy">idmef_process_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_destroy               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-get-ident" role="function">
<title>idmef_process_get_ident ()</title>
<indexterm zone="idmef-process-get-ident"><primary sortas="idmef_process_get_ident">idmef_process_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_process_get_ident             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-set-ident" role="function">
<title>idmef_process_set_ident ()</title>
<indexterm zone="idmef-process-set-ident"><primary sortas="idmef_process_set_ident">idmef_process_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_set_ident             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-new-ident" role="function">
<title>idmef_process_new_ident ()</title>
<indexterm zone="idmef-process-new-ident"><primary sortas="idmef_process_new_ident">idmef_process_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_new_ident             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-process-t"><type>idmef_process_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-get-name" role="function">
<title>idmef_process_get_name ()</title>
<indexterm zone="idmef-process-get-name"><primary sortas="idmef_process_get_name">idmef_process_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_process_get_name              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-set-name" role="function">
<title>idmef_process_set_name ()</title>
<indexterm zone="idmef-process-set-name"><primary sortas="idmef_process_set_name">idmef_process_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_set_name              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-new-name" role="function">
<title>idmef_process_new_name ()</title>
<indexterm zone="idmef-process-new-name"><primary sortas="idmef_process_new_name">idmef_process_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_new_name              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-process-t"><type>idmef_process_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-unset-pid" role="function">
<title>idmef_process_unset_pid ()</title>
<indexterm zone="idmef-process-unset-pid"><primary sortas="idmef_process_unset_pid">idmef_process_unset_pid</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_unset_pid             (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-get-pid" role="function">
<title>idmef_process_get_pid ()</title>
<indexterm zone="idmef-process-get-pid"><primary sortas="idmef_process_get_pid">idmef_process_get_pid</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_process_get_pid               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-set-pid" role="function">
<title>idmef_process_set_pid ()</title>
<indexterm zone="idmef-process-set-pid"><primary sortas="idmef_process_set_pid">idmef_process_set_pid</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_set_pid               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> pid);</programlisting>
<para>
Set <parameter>pid</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>pid</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>pid</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pid</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-new-pid" role="function">
<title>idmef_process_new_pid ()</title>
<indexterm zone="idmef-process-new-pid"><primary sortas="idmef_process_new_pid">idmef_process_new_pid</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_new_pid               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new pid object, children of <link linkend="idmef-process-t"><type>idmef_process_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-get-path" role="function">
<title>idmef_process_get_path ()</title>
<indexterm zone="idmef-process-get-path"><primary sortas="idmef_process_get_path">idmef_process_get_path</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_process_get_path              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-set-path" role="function">
<title>idmef_process_set_path ()</title>
<indexterm zone="idmef-process-set-path"><primary sortas="idmef_process_set_path">idmef_process_set_path</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_set_path              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *path);</programlisting>
<para>
Set <parameter>path</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>path</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>path</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-new-path" role="function">
<title>idmef_process_new_path ()</title>
<indexterm zone="idmef-process-new-path"><primary sortas="idmef_process_new_path">idmef_process_new_path</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_new_path              (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new path object, children of <link linkend="idmef-process-t"><type>idmef_process_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-get-next-arg" role="function">
<title>idmef_process_get_next_arg ()</title>
<indexterm zone="idmef-process-get-next-arg"><primary sortas="idmef_process_get_next_arg">idmef_process_get_next_arg</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_process_get_next_arg          (<link linkend="idmef-process-t">idmef_process_t</link> *process,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);</programlisting>
<para>
Get the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the prelude_string_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>process</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prelude_string_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-set-arg" role="function">
<title>idmef_process_set_arg ()</title>
<indexterm zone="idmef-process-set-arg"><primary sortas="idmef_process_set_arg">idmef_process_set_arg</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_set_arg               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-new-arg" role="function">
<title>idmef_process_new_arg ()</title>
<indexterm zone="idmef-process-new-arg"><primary sortas="idmef_process_new_arg">idmef_process_new_arg</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_new_arg               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="prelude-string-t"><type>prelude_string_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object. The created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-get-next-env" role="function">
<title>idmef_process_get_next_env ()</title>
<indexterm zone="idmef-process-get-next-env"><primary sortas="idmef_process_get_next_env">idmef_process_get_next_env</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_process_get_next_env          (<link linkend="idmef-process-t">idmef_process_t</link> *process,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);</programlisting>
<para>
Get the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the prelude_string_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>process</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prelude_string_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-set-env" role="function">
<title>idmef_process_set_env ()</title>
<indexterm zone="idmef-process-set-env"><primary sortas="idmef_process_set_env">idmef_process_set_env</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_process_set_env               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-new-env" role="function">
<title>idmef_process_new_env ()</title>
<indexterm zone="idmef-process-new-env"><primary sortas="idmef_process_new_env">idmef_process_new_env</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_new_env               (<link linkend="idmef-process-t">idmef_process_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="prelude-string-t"><type>prelude_string_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object. The created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-t" role="typedef">
<title>idmef_web_service_t</title>
<indexterm zone="idmef-web-service-t"><primary sortas="idmef_web_service_t">idmef_web_service_t</primary></indexterm><programlisting>typedef struct idmef_web_service idmef_web_service_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-web-service-new" role="function">
<title>idmef_web_service_new ()</title>
<indexterm zone="idmef-web-service-new"><primary sortas="idmef_web_service_new">idmef_web_service_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_new               (<link linkend="idmef-web-service-t">idmef_web_service_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-copy" role="function">
<title>idmef_web_service_copy ()</title>
<indexterm zone="idmef-web-service-copy"><primary sortas="idmef_web_service_copy">idmef_web_service_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_copy              (const <link linkend="idmef-web-service-t">idmef_web_service_t</link> *src,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-clone" role="function">
<title>idmef_web_service_clone ()</title>
<indexterm zone="idmef-web-service-clone"><primary sortas="idmef_web_service_clone">idmef_web_service_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_clone             (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *src,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-ref" role="function">
<title>idmef_web_service_ref ()</title>
<indexterm zone="idmef-web-service-ref"><primary sortas="idmef_web_service_ref">idmef_web_service_ref</primary></indexterm><programlisting><link linkend="idmef-web-service-t">idmef_web_service_t</link> * idmef_web_service_ref             (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *web_service);</programlisting>
<para>
Increase <parameter>web_service</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>web_service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>web_service</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-destroy" role="function">
<title>idmef_web_service_destroy ()</title>
<indexterm zone="idmef-web-service-destroy"><primary sortas="idmef_web_service_destroy">idmef_web_service_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_web_service_destroy           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-get-url" role="function">
<title>idmef_web_service_get_url ()</title>
<indexterm zone="idmef-web-service-get-url"><primary sortas="idmef_web_service_get_url">idmef_web_service_get_url</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_web_service_get_url           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-set-url" role="function">
<title>idmef_web_service_set_url ()</title>
<indexterm zone="idmef-web-service-set-url"><primary sortas="idmef_web_service_set_url">idmef_web_service_set_url</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_web_service_set_url           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *url);</programlisting>
<para>
Set <parameter>url</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>url</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>url</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>url</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-new-url" role="function">
<title>idmef_web_service_new_url ()</title>
<indexterm zone="idmef-web-service-new-url"><primary sortas="idmef_web_service_new_url">idmef_web_service_new_url</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_new_url           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new url object, children of <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-get-cgi" role="function">
<title>idmef_web_service_get_cgi ()</title>
<indexterm zone="idmef-web-service-get-cgi"><primary sortas="idmef_web_service_get_cgi">idmef_web_service_get_cgi</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_web_service_get_cgi           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-set-cgi" role="function">
<title>idmef_web_service_set_cgi ()</title>
<indexterm zone="idmef-web-service-set-cgi"><primary sortas="idmef_web_service_set_cgi">idmef_web_service_set_cgi</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_web_service_set_cgi           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *cgi);</programlisting>
<para>
Set <parameter>cgi</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>cgi</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>cgi</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cgi</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-new-cgi" role="function">
<title>idmef_web_service_new_cgi ()</title>
<indexterm zone="idmef-web-service-new-cgi"><primary sortas="idmef_web_service_new_cgi">idmef_web_service_new_cgi</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_new_cgi           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new cgi object, children of <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-get-http-method" role="function">
<title>idmef_web_service_get_http_method ()</title>
<indexterm zone="idmef-web-service-get-http-method"><primary sortas="idmef_web_service_get_http_method">idmef_web_service_get_http_method</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_web_service_get_http_method   (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-set-http-method" role="function">
<title>idmef_web_service_set_http_method ()</title>
<indexterm zone="idmef-web-service-set-http-method"><primary sortas="idmef_web_service_set_http_method">idmef_web_service_set_http_method</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_web_service_set_http_method   (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *http_method);</programlisting>
<para>
Set <parameter>http_method</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>http_method</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>http_method</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>http_method</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-new-http-method" role="function">
<title>idmef_web_service_new_http_method ()</title>
<indexterm zone="idmef-web-service-new-http-method"><primary sortas="idmef_web_service_new_http_method">idmef_web_service_new_http_method</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_new_http_method   (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new http_method object, children of <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-get-next-arg" role="function">
<title>idmef_web_service_get_next_arg ()</title>
<indexterm zone="idmef-web-service-get-next-arg"><primary sortas="idmef_web_service_get_next_arg">idmef_web_service_get_next_arg</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_web_service_get_next_arg      (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *web_service,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);</programlisting>
<para>
Get the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the prelude_string_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>web_service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prelude_string_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-set-arg" role="function">
<title>idmef_web_service_set_arg ()</title>
<indexterm zone="idmef-web-service-set-arg"><primary sortas="idmef_web_service_set_arg">idmef_web_service_set_arg</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_web_service_set_arg           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-new-arg" role="function">
<title>idmef_web_service_new_arg ()</title>
<indexterm zone="idmef-web-service-new-arg"><primary sortas="idmef_web_service_new_arg">idmef_web_service_new_arg</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_new_arg           (<link linkend="idmef-web-service-t">idmef_web_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="prelude-string-t"><type>prelude_string_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object. The created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-t" role="typedef">
<title>idmef_snmp_service_t</title>
<indexterm zone="idmef-snmp-service-t"><primary sortas="idmef_snmp_service_t">idmef_snmp_service_t</primary></indexterm><programlisting>typedef struct idmef_snmp_service idmef_snmp_service_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-snmp-service-new" role="function">
<title>idmef_snmp_service_new ()</title>
<indexterm zone="idmef-snmp-service-new"><primary sortas="idmef_snmp_service_new">idmef_snmp_service_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new              (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-copy" role="function">
<title>idmef_snmp_service_copy ()</title>
<indexterm zone="idmef-snmp-service-copy"><primary sortas="idmef_snmp_service_copy">idmef_snmp_service_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_copy             (const <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *src,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-clone" role="function">
<title>idmef_snmp_service_clone ()</title>
<indexterm zone="idmef-snmp-service-clone"><primary sortas="idmef_snmp_service_clone">idmef_snmp_service_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_clone            (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *src,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-ref" role="function">
<title>idmef_snmp_service_ref ()</title>
<indexterm zone="idmef-snmp-service-ref"><primary sortas="idmef_snmp_service_ref">idmef_snmp_service_ref</primary></indexterm><programlisting><link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> * idmef_snmp_service_ref           (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *snmp_service);</programlisting>
<para>
Increase <parameter>snmp_service</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>snmp_service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>snmp_service</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-destroy" role="function">
<title>idmef_snmp_service_destroy ()</title>
<indexterm zone="idmef-snmp-service-destroy"><primary sortas="idmef_snmp_service_destroy">idmef_snmp_service_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_destroy          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-oid" role="function">
<title>idmef_snmp_service_get_oid ()</title>
<indexterm zone="idmef-snmp-service-get-oid"><primary sortas="idmef_snmp_service_get_oid">idmef_snmp_service_get_oid</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_snmp_service_get_oid          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-oid" role="function">
<title>idmef_snmp_service_set_oid ()</title>
<indexterm zone="idmef-snmp-service-set-oid"><primary sortas="idmef_snmp_service_set_oid">idmef_snmp_service_set_oid</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_oid          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *oid);</programlisting>
<para>
Set <parameter>oid</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>oid</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>oid</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-oid" role="function">
<title>idmef_snmp_service_new_oid ()</title>
<indexterm zone="idmef-snmp-service-new-oid"><primary sortas="idmef_snmp_service_new_oid">idmef_snmp_service_new_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_oid          (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new oid object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-unset-message-processing-model" role="function">
<title>idmef_snmp_service_unset_message_processing_model ()</title>
<indexterm zone="idmef-snmp-service-unset-message-processing-model"><primary sortas="idmef_snmp_service_unset_message_processing_model">idmef_snmp_service_unset_message_processing_model</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_unset_message_processing_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-message-processing-model" role="function">
<title>idmef_snmp_service_get_message_processing_model ()</title>
<indexterm zone="idmef-snmp-service-get-message-processing-model"><primary sortas="idmef_snmp_service_get_message_processing_model">idmef_snmp_service_get_message_processing_model</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_snmp_service_get_message_processing_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-message-processing-model" role="function">
<title>idmef_snmp_service_set_message_processing_model ()</title>
<indexterm zone="idmef-snmp-service-set-message-processing-model"><primary sortas="idmef_snmp_service_set_message_processing_model">idmef_snmp_service_set_message_processing_model</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_message_processing_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> message_processing_model);</programlisting>
<para>
Set <parameter>message_processing_model</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>message_processing_model</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>message_processing_model</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message_processing_model</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-message-processing-model" role="function">
<title>idmef_snmp_service_new_message_processing_model ()</title>
<indexterm zone="idmef-snmp-service-new-message-processing-model"><primary sortas="idmef_snmp_service_new_message_processing_model">idmef_snmp_service_new_message_processing_model</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_message_processing_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new message_processing_model object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-unset-security-model" role="function">
<title>idmef_snmp_service_unset_security_model ()</title>
<indexterm zone="idmef-snmp-service-unset-security-model"><primary sortas="idmef_snmp_service_unset_security_model">idmef_snmp_service_unset_security_model</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_unset_security_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-security-model" role="function">
<title>idmef_snmp_service_get_security_model ()</title>
<indexterm zone="idmef-snmp-service-get-security-model"><primary sortas="idmef_snmp_service_get_security_model">idmef_snmp_service_get_security_model</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_snmp_service_get_security_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-security-model" role="function">
<title>idmef_snmp_service_set_security_model ()</title>
<indexterm zone="idmef-snmp-service-set-security-model"><primary sortas="idmef_snmp_service_set_security_model">idmef_snmp_service_set_security_model</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_security_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> security_model);</programlisting>
<para>
Set <parameter>security_model</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>security_model</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>security_model</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>security_model</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-security-model" role="function">
<title>idmef_snmp_service_new_security_model ()</title>
<indexterm zone="idmef-snmp-service-new-security-model"><primary sortas="idmef_snmp_service_new_security_model">idmef_snmp_service_new_security_model</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_security_model
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new security_model object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-security-name" role="function">
<title>idmef_snmp_service_get_security_name ()</title>
<indexterm zone="idmef-snmp-service-get-security-name"><primary sortas="idmef_snmp_service_get_security_name">idmef_snmp_service_get_security_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_snmp_service_get_security_name
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-security-name" role="function">
<title>idmef_snmp_service_set_security_name ()</title>
<indexterm zone="idmef-snmp-service-set-security-name"><primary sortas="idmef_snmp_service_set_security_name">idmef_snmp_service_set_security_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_security_name
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *security_name);</programlisting>
<para>
Set <parameter>security_name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>security_name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>security_name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>security_name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-security-name" role="function">
<title>idmef_snmp_service_new_security_name ()</title>
<indexterm zone="idmef-snmp-service-new-security-name"><primary sortas="idmef_snmp_service_new_security_name">idmef_snmp_service_new_security_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_security_name
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new security_name object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-unset-security-level" role="function">
<title>idmef_snmp_service_unset_security_level ()</title>
<indexterm zone="idmef-snmp-service-unset-security-level"><primary sortas="idmef_snmp_service_unset_security_level">idmef_snmp_service_unset_security_level</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_unset_security_level
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-security-level" role="function">
<title>idmef_snmp_service_get_security_level ()</title>
<indexterm zone="idmef-snmp-service-get-security-level"><primary sortas="idmef_snmp_service_get_security_level">idmef_snmp_service_get_security_level</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_snmp_service_get_security_level
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-security-level" role="function">
<title>idmef_snmp_service_set_security_level ()</title>
<indexterm zone="idmef-snmp-service-set-security-level"><primary sortas="idmef_snmp_service_set_security_level">idmef_snmp_service_set_security_level</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_security_level
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> security_level);</programlisting>
<para>
Set <parameter>security_level</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>security_level</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>security_level</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>security_level</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-security-level" role="function">
<title>idmef_snmp_service_new_security_level ()</title>
<indexterm zone="idmef-snmp-service-new-security-level"><primary sortas="idmef_snmp_service_new_security_level">idmef_snmp_service_new_security_level</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_security_level
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new security_level object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-context-name" role="function">
<title>idmef_snmp_service_get_context_name ()</title>
<indexterm zone="idmef-snmp-service-get-context-name"><primary sortas="idmef_snmp_service_get_context_name">idmef_snmp_service_get_context_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_snmp_service_get_context_name (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-context-name" role="function">
<title>idmef_snmp_service_set_context_name ()</title>
<indexterm zone="idmef-snmp-service-set-context-name"><primary sortas="idmef_snmp_service_set_context_name">idmef_snmp_service_set_context_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_context_name (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *context_name);</programlisting>
<para>
Set <parameter>context_name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>context_name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>context_name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context_name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-context-name" role="function">
<title>idmef_snmp_service_new_context_name ()</title>
<indexterm zone="idmef-snmp-service-new-context-name"><primary sortas="idmef_snmp_service_new_context_name">idmef_snmp_service_new_context_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_context_name (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new context_name object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-context-engine-id" role="function">
<title>idmef_snmp_service_get_context_engine_id ()</title>
<indexterm zone="idmef-snmp-service-get-context-engine-id"><primary sortas="idmef_snmp_service_get_context_engine_id">idmef_snmp_service_get_context_engine_id</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_snmp_service_get_context_engine_id
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-context-engine-id" role="function">
<title>idmef_snmp_service_set_context_engine_id ()</title>
<indexterm zone="idmef-snmp-service-set-context-engine-id"><primary sortas="idmef_snmp_service_set_context_engine_id">idmef_snmp_service_set_context_engine_id</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_context_engine_id
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *context_engine_id);</programlisting>
<para>
Set <parameter>context_engine_id</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>context_engine_id</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>context_engine_id</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context_engine_id</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-context-engine-id" role="function">
<title>idmef_snmp_service_new_context_engine_id ()</title>
<indexterm zone="idmef-snmp-service-new-context-engine-id"><primary sortas="idmef_snmp_service_new_context_engine_id">idmef_snmp_service_new_context_engine_id</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_context_engine_id
                                                        (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new context_engine_id object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-command" role="function">
<title>idmef_snmp_service_get_command ()</title>
<indexterm zone="idmef-snmp-service-get-command"><primary sortas="idmef_snmp_service_get_command">idmef_snmp_service_get_command</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_snmp_service_get_command      (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-command" role="function">
<title>idmef_snmp_service_set_command ()</title>
<indexterm zone="idmef-snmp-service-set-command"><primary sortas="idmef_snmp_service_set_command">idmef_snmp_service_set_command</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_command      (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *command);</programlisting>
<para>
Set <parameter>command</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>command</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>command</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>command</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-command" role="function">
<title>idmef_snmp_service_new_command ()</title>
<indexterm zone="idmef-snmp-service-new-command"><primary sortas="idmef_snmp_service_new_command">idmef_snmp_service_new_command</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_command      (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new command object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-get-community" role="function">
<title>idmef_snmp_service_get_community ()</title>
<indexterm zone="idmef-snmp-service-get-community"><primary sortas="idmef_snmp_service_get_community">idmef_snmp_service_get_community</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_snmp_service_get_community    (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-set-community" role="function">
<title>idmef_snmp_service_set_community ()</title>
<indexterm zone="idmef-snmp-service-set-community"><primary sortas="idmef_snmp_service_set_community">idmef_snmp_service_set_community</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_snmp_service_set_community    (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *community);</programlisting>
<para>
Set <parameter>community</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>community</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>community</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>community</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-new-community" role="function">
<title>idmef_snmp_service_new_community ()</title>
<indexterm zone="idmef-snmp-service-new-community"><primary sortas="idmef_snmp_service_new_community">idmef_snmp_service_new_community</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_new_community    (<link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new community object, children of <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-type-t" role="enum">
<title>enum idmef_service_type_t</title>
<indexterm zone="idmef-service-type-t"><primary sortas="idmef_service_type_t">idmef_service_type_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_SERVICE_TYPE_ERROR = -1,
        IDMEF_SERVICE_TYPE_DEFAULT = 0,
        IDMEF_SERVICE_TYPE_WEB = 1,
        IDMEF_SERVICE_TYPE_SNMP = 2
} idmef_service_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-service-type-to-numeric" role="function">
<title>idmef_service_type_to_numeric ()</title>
<indexterm zone="idmef-service-type-to-numeric"><primary sortas="idmef_service_type_to_numeric">idmef_service_type_to_numeric</primary></indexterm><programlisting><link linkend="idmef-service-type-t">idmef_service_type_t</link>  idmef_service_type_to_numeric     (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-service-type-t"><type>idmef_service_type_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-type-to-string" role="function">
<title>idmef_service_type_to_string ()</title>
<indexterm zone="idmef-service-type-to-string"><primary sortas="idmef_service_type_to_string">idmef_service_type_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_service_type_to_string        (<link linkend="idmef-service-type-t">idmef_service_type_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-service-type-t"><type>idmef_service_type_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-service-type-t"><type>idmef_service_type_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-t" role="typedef">
<title>idmef_service_t</title>
<indexterm zone="idmef-service-t"><primary sortas="idmef_service_t">idmef_service_t</primary></indexterm><programlisting>typedef struct idmef_service idmef_service_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-service-new" role="function">
<title>idmef_service_new ()</title>
<indexterm zone="idmef-service-new"><primary sortas="idmef_service_new">idmef_service_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new                   (<link linkend="idmef-service-t">idmef_service_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-copy" role="function">
<title>idmef_service_copy ()</title>
<indexterm zone="idmef-service-copy"><primary sortas="idmef_service_copy">idmef_service_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_copy                  (const <link linkend="idmef-service-t">idmef_service_t</link> *src,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-clone" role="function">
<title>idmef_service_clone ()</title>
<indexterm zone="idmef-service-clone"><primary sortas="idmef_service_clone">idmef_service_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_clone                 (<link linkend="idmef-service-t">idmef_service_t</link> *src,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-ref" role="function">
<title>idmef_service_ref ()</title>
<indexterm zone="idmef-service-ref"><primary sortas="idmef_service_ref">idmef_service_ref</primary></indexterm><programlisting><link linkend="idmef-service-t">idmef_service_t</link> *   idmef_service_ref                   (<link linkend="idmef-service-t">idmef_service_t</link> *service);</programlisting>
<para>
Increase <parameter>service</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>service</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-destroy" role="function">
<title>idmef_service_destroy ()</title>
<indexterm zone="idmef-service-destroy"><primary sortas="idmef_service_destroy">idmef_service_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_destroy               (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-ident" role="function">
<title>idmef_service_get_ident ()</title>
<indexterm zone="idmef-service-get-ident"><primary sortas="idmef_service_get_ident">idmef_service_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_service_get_ident             (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-ident" role="function">
<title>idmef_service_set_ident ()</title>
<indexterm zone="idmef-service-set-ident"><primary sortas="idmef_service_set_ident">idmef_service_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_ident             (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-ident" role="function">
<title>idmef_service_new_ident ()</title>
<indexterm zone="idmef-service-new-ident"><primary sortas="idmef_service_new_ident">idmef_service_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_ident             (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-unset-ip-version" role="function">
<title>idmef_service_unset_ip_version ()</title>
<indexterm zone="idmef-service-unset-ip-version"><primary sortas="idmef_service_unset_ip_version">idmef_service_unset_ip_version</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_unset_ip_version      (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-ip-version" role="function">
<title>idmef_service_get_ip_version ()</title>
<indexterm zone="idmef-service-get-ip-version"><primary sortas="idmef_service_get_ip_version">idmef_service_get_ip_version</primary></indexterm><programlisting><link linkend="uint8-t">uint8_t</link> *           idmef_service_get_ip_version        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-ip-version" role="function">
<title>idmef_service_set_ip_version ()</title>
<indexterm zone="idmef-service-set-ip-version"><primary sortas="idmef_service_set_ip_version">idmef_service_set_ip_version</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_ip_version        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> ip_version);</programlisting>
<para>
Set <parameter>ip_version</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ip_version</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ip_version</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ip_version</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint8-t"><type>uint8_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-ip-version" role="function">
<title>idmef_service_new_ip_version ()</title>
<indexterm zone="idmef-service-new-ip-version"><primary sortas="idmef_service_new_ip_version">idmef_service_new_ip_version</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_ip_version        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> **ret);</programlisting>
<para>
Create a new ip_version object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint8-t"><type>uint8_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint8-t"><type>uint8_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-unset-iana-protocol-number" role="function">
<title>idmef_service_unset_iana_protocol_number ()</title>
<indexterm zone="idmef-service-unset-iana-protocol-number"><primary sortas="idmef_service_unset_iana_protocol_number">idmef_service_unset_iana_protocol_number</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_unset_iana_protocol_number
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-iana-protocol-number" role="function">
<title>idmef_service_get_iana_protocol_number ()</title>
<indexterm zone="idmef-service-get-iana-protocol-number"><primary sortas="idmef_service_get_iana_protocol_number">idmef_service_get_iana_protocol_number</primary></indexterm><programlisting><link linkend="uint8-t">uint8_t</link> *           idmef_service_get_iana_protocol_number
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-iana-protocol-number" role="function">
<title>idmef_service_set_iana_protocol_number ()</title>
<indexterm zone="idmef-service-set-iana-protocol-number"><primary sortas="idmef_service_set_iana_protocol_number">idmef_service_set_iana_protocol_number</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_iana_protocol_number
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> iana_protocol_number);</programlisting>
<para>
Set <parameter>iana_protocol_number</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>iana_protocol_number</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>iana_protocol_number</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iana_protocol_number</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint8-t"><type>uint8_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-iana-protocol-number" role="function">
<title>idmef_service_new_iana_protocol_number ()</title>
<indexterm zone="idmef-service-new-iana-protocol-number"><primary sortas="idmef_service_new_iana_protocol_number">idmef_service_new_iana_protocol_number</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_iana_protocol_number
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint8-t">uint8_t</link> **ret);</programlisting>
<para>
Create a new iana_protocol_number object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint8-t"><type>uint8_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint8-t"><type>uint8_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-iana-protocol-name" role="function">
<title>idmef_service_get_iana_protocol_name ()</title>
<indexterm zone="idmef-service-get-iana-protocol-name"><primary sortas="idmef_service_get_iana_protocol_name">idmef_service_get_iana_protocol_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_service_get_iana_protocol_name
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-iana-protocol-name" role="function">
<title>idmef_service_set_iana_protocol_name ()</title>
<indexterm zone="idmef-service-set-iana-protocol-name"><primary sortas="idmef_service_set_iana_protocol_name">idmef_service_set_iana_protocol_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_iana_protocol_name
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *iana_protocol_name);</programlisting>
<para>
Set <parameter>iana_protocol_name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>iana_protocol_name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>iana_protocol_name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iana_protocol_name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-iana-protocol-name" role="function">
<title>idmef_service_new_iana_protocol_name ()</title>
<indexterm zone="idmef-service-new-iana-protocol-name"><primary sortas="idmef_service_new_iana_protocol_name">idmef_service_new_iana_protocol_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_iana_protocol_name
                                                        (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new iana_protocol_name object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-name" role="function">
<title>idmef_service_get_name ()</title>
<indexterm zone="idmef-service-get-name"><primary sortas="idmef_service_get_name">idmef_service_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_service_get_name              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-name" role="function">
<title>idmef_service_set_name ()</title>
<indexterm zone="idmef-service-set-name"><primary sortas="idmef_service_set_name">idmef_service_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_name              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-name" role="function">
<title>idmef_service_new_name ()</title>
<indexterm zone="idmef-service-new-name"><primary sortas="idmef_service_new_name">idmef_service_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_name              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-unset-port" role="function">
<title>idmef_service_unset_port ()</title>
<indexterm zone="idmef-service-unset-port"><primary sortas="idmef_service_unset_port">idmef_service_unset_port</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_unset_port            (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-port" role="function">
<title>idmef_service_get_port ()</title>
<indexterm zone="idmef-service-get-port"><primary sortas="idmef_service_get_port">idmef_service_get_port</primary></indexterm><programlisting><link linkend="uint16-t">uint16_t</link> *          idmef_service_get_port              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-port" role="function">
<title>idmef_service_set_port ()</title>
<indexterm zone="idmef-service-set-port"><primary sortas="idmef_service_set_port">idmef_service_set_port</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_port              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint16-t">uint16_t</link> port);</programlisting>
<para>
Set <parameter>port</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>port</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>port</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint16-t"><type>uint16_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-port" role="function">
<title>idmef_service_new_port ()</title>
<indexterm zone="idmef-service-new-port"><primary sortas="idmef_service_new_port">idmef_service_new_port</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_port              (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="uint16-t">uint16_t</link> **ret);</programlisting>
<para>
Create a new port object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint16-t"><type>uint16_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint16-t"><type>uint16_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-portlist" role="function">
<title>idmef_service_get_portlist ()</title>
<indexterm zone="idmef-service-get-portlist"><primary sortas="idmef_service_get_portlist">idmef_service_get_portlist</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_service_get_portlist          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-portlist" role="function">
<title>idmef_service_set_portlist ()</title>
<indexterm zone="idmef-service-set-portlist"><primary sortas="idmef_service_set_portlist">idmef_service_set_portlist</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_portlist          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *portlist);</programlisting>
<para>
Set <parameter>portlist</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>portlist</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>portlist</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>portlist</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-portlist" role="function">
<title>idmef_service_new_portlist ()</title>
<indexterm zone="idmef-service-new-portlist"><primary sortas="idmef_service_new_portlist">idmef_service_new_portlist</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_portlist          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new portlist object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-protocol" role="function">
<title>idmef_service_get_protocol ()</title>
<indexterm zone="idmef-service-get-protocol"><primary sortas="idmef_service_get_protocol">idmef_service_get_protocol</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_service_get_protocol          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-protocol" role="function">
<title>idmef_service_set_protocol ()</title>
<indexterm zone="idmef-service-set-protocol"><primary sortas="idmef_service_set_protocol">idmef_service_set_protocol</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_protocol          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *protocol);</programlisting>
<para>
Set <parameter>protocol</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>protocol</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>protocol</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>protocol</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-protocol" role="function">
<title>idmef_service_new_protocol ()</title>
<indexterm zone="idmef-service-new-protocol"><primary sortas="idmef_service_new_protocol">idmef_service_new_protocol</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_protocol          (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new protocol object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-type" role="function">
<title>idmef_service_get_type ()</title>
<indexterm zone="idmef-service-get-type"><primary sortas="idmef_service_get_type">idmef_service_get_type</primary></indexterm><programlisting><link linkend="idmef-service-type-t">idmef_service_type_t</link>  idmef_service_get_type            (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
Access the type children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-service-type-t"><type>idmef_service_type_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-web-service" role="function">
<title>idmef_service_get_web_service ()</title>
<indexterm zone="idmef-service-get-web-service"><primary sortas="idmef_service_get_web_service">idmef_service_get_web_service</primary></indexterm><programlisting><link linkend="idmef-web-service-t">idmef_web_service_t</link> * idmef_service_get_web_service     (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
Access the web_service children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-web-service" role="function">
<title>idmef_service_set_web_service ()</title>
<indexterm zone="idmef-service-set-web-service"><primary sortas="idmef_service_set_web_service">idmef_service_set_web_service</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_web_service       (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> *web_service);</programlisting>
<para>
Set <parameter>web_service</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain a <parameter>web_service</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>web_service</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>web_service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-web-service" role="function">
<title>idmef_service_new_web_service ()</title>
<indexterm zone="idmef-service-new-web-service"><primary sortas="idmef_service_new_web_service">idmef_service_new_web_service</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_web_service       (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-web-service-t">idmef_web_service_t</link> **ret);</programlisting>
<para>
Create a new idmef_web_service_t object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer where to store the created <link linkend="idmef-web-service-t"><type>idmef_web_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-get-snmp-service" role="function">
<title>idmef_service_get_snmp_service ()</title>
<indexterm zone="idmef-service-get-snmp-service"><primary sortas="idmef_service_get_snmp_service">idmef_service_get_snmp_service</primary></indexterm><programlisting><link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> * idmef_service_get_snmp_service   (<link linkend="idmef-service-t">idmef_service_t</link> *ptr);</programlisting>
<para>
Access the snmp_service children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-set-snmp-service" role="function">
<title>idmef_service_set_snmp_service ()</title>
<indexterm zone="idmef-service-set-snmp-service"><primary sortas="idmef_service_set_snmp_service">idmef_service_set_snmp_service</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_service_set_snmp_service      (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *snmp_service);</programlisting>
<para>
Set <parameter>snmp_service</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain a <parameter>snmp_service</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>snmp_service</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>snmp_service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-new-snmp-service" role="function">
<title>idmef_service_new_snmp_service ()</title>
<indexterm zone="idmef-service-new-snmp-service"><primary sortas="idmef_service_new_snmp_service">idmef_service_new_snmp_service</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_new_snmp_service      (<link linkend="idmef-service-t">idmef_service_t</link> *ptr,
                                                         <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> **ret);</programlisting>
<para>
Create a new idmef_snmp_service_t object, children of <link linkend="idmef-service-t"><type>idmef_service_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer where to store the created <link linkend="idmef-snmp-service-t"><type>idmef_snmp_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-category-t" role="enum">
<title>enum idmef_node_category_t</title>
<indexterm zone="idmef-node-category-t"><primary sortas="idmef_node_category_t">idmef_node_category_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_NODE_CATEGORY_ERROR = -1,
        IDMEF_NODE_CATEGORY_UNKNOWN = 0,
        IDMEF_NODE_CATEGORY_ADS = 1,
        IDMEF_NODE_CATEGORY_AFS = 2,
        IDMEF_NODE_CATEGORY_CODA = 3,
        IDMEF_NODE_CATEGORY_DFS = 4,
        IDMEF_NODE_CATEGORY_DNS = 5,
        IDMEF_NODE_CATEGORY_HOSTS = 6,
        IDMEF_NODE_CATEGORY_KERBEROS = 7,
        IDMEF_NODE_CATEGORY_NDS = 8,
        IDMEF_NODE_CATEGORY_NIS = 9,
        IDMEF_NODE_CATEGORY_NISPLUS = 10,
        IDMEF_NODE_CATEGORY_NT = 11,
        IDMEF_NODE_CATEGORY_WFW = 12
} idmef_node_category_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-node-category-to-numeric" role="function">
<title>idmef_node_category_to_numeric ()</title>
<indexterm zone="idmef-node-category-to-numeric"><primary sortas="idmef_node_category_to_numeric">idmef_node_category_to_numeric</primary></indexterm><programlisting><link linkend="idmef-node-category-t">idmef_node_category_t</link>  idmef_node_category_to_numeric   (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-node-category-t"><type>idmef_node_category_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-category-to-string" role="function">
<title>idmef_node_category_to_string ()</title>
<indexterm zone="idmef-node-category-to-string"><primary sortas="idmef_node_category_to_string">idmef_node_category_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_node_category_to_string       (<link linkend="idmef-node-category-t">idmef_node_category_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-node-category-t"><type>idmef_node_category_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-node-category-t"><type>idmef_node_category_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-t" role="typedef">
<title>idmef_node_t</title>
<indexterm zone="idmef-node-t"><primary sortas="idmef_node_t">idmef_node_t</primary></indexterm><programlisting>typedef struct idmef_node idmef_node_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-node-new" role="function">
<title>idmef_node_new ()</title>
<indexterm zone="idmef-node-new"><primary sortas="idmef_node_new">idmef_node_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_new                      (<link linkend="idmef-node-t">idmef_node_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-copy" role="function">
<title>idmef_node_copy ()</title>
<indexterm zone="idmef-node-copy"><primary sortas="idmef_node_copy">idmef_node_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_copy                     (const <link linkend="idmef-node-t">idmef_node_t</link> *src,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-clone" role="function">
<title>idmef_node_clone ()</title>
<indexterm zone="idmef-node-clone"><primary sortas="idmef_node_clone">idmef_node_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_clone                    (<link linkend="idmef-node-t">idmef_node_t</link> *src,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-ref" role="function">
<title>idmef_node_ref ()</title>
<indexterm zone="idmef-node-ref"><primary sortas="idmef_node_ref">idmef_node_ref</primary></indexterm><programlisting><link linkend="idmef-node-t">idmef_node_t</link> *      idmef_node_ref                      (<link linkend="idmef-node-t">idmef_node_t</link> *node);</programlisting>
<para>
Increase <parameter>node</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>node</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-destroy" role="function">
<title>idmef_node_destroy ()</title>
<indexterm zone="idmef-node-destroy"><primary sortas="idmef_node_destroy">idmef_node_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_node_destroy                  (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-get-ident" role="function">
<title>idmef_node_get_ident ()</title>
<indexterm zone="idmef-node-get-ident"><primary sortas="idmef_node_get_ident">idmef_node_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_node_get_ident                (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-set-ident" role="function">
<title>idmef_node_set_ident ()</title>
<indexterm zone="idmef-node-set-ident"><primary sortas="idmef_node_set_ident">idmef_node_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_node_set_ident                (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-new-ident" role="function">
<title>idmef_node_new_ident ()</title>
<indexterm zone="idmef-node-new-ident"><primary sortas="idmef_node_new_ident">idmef_node_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_new_ident                (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-node-t"><type>idmef_node_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-get-category" role="function">
<title>idmef_node_get_category ()</title>
<indexterm zone="idmef-node-get-category"><primary sortas="idmef_node_get_category">idmef_node_get_category</primary></indexterm><programlisting><link linkend="idmef-node-category-t">idmef_node_category_t</link>  idmef_node_get_category          (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);</programlisting>
<para>
Get category children of the <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_node_category_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-set-category" role="function">
<title>idmef_node_set_category ()</title>
<indexterm zone="idmef-node-set-category"><primary sortas="idmef_node_set_category">idmef_node_set_category</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_node_set_category             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-node-category-t">idmef_node_category_t</link> category);</programlisting>
<para>
Set <parameter>category</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>category</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>category</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-category-t"><type>idmef_node_category_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-new-category" role="function">
<title>idmef_node_new_category ()</title>
<indexterm zone="idmef-node-new-category"><primary sortas="idmef_node_new_category">idmef_node_new_category</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_new_category             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-node-category-t">idmef_node_category_t</link> **ret);</programlisting>
<para>
Create a new category object, children of <link linkend="idmef-node-t"><type>idmef_node_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-node-category-t"><type>idmef_node_category_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-node-category-t"><type>idmef_node_category_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-get-location" role="function">
<title>idmef_node_get_location ()</title>
<indexterm zone="idmef-node-get-location"><primary sortas="idmef_node_get_location">idmef_node_get_location</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_node_get_location             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-set-location" role="function">
<title>idmef_node_set_location ()</title>
<indexterm zone="idmef-node-set-location"><primary sortas="idmef_node_set_location">idmef_node_set_location</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_node_set_location             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *location);</programlisting>
<para>
Set <parameter>location</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>location</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>location</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>location</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-new-location" role="function">
<title>idmef_node_new_location ()</title>
<indexterm zone="idmef-node-new-location"><primary sortas="idmef_node_new_location">idmef_node_new_location</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_new_location             (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new location object, children of <link linkend="idmef-node-t"><type>idmef_node_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-get-name" role="function">
<title>idmef_node_get_name ()</title>
<indexterm zone="idmef-node-get-name"><primary sortas="idmef_node_get_name">idmef_node_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_node_get_name                 (<link linkend="idmef-node-t">idmef_node_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-set-name" role="function">
<title>idmef_node_set_name ()</title>
<indexterm zone="idmef-node-set-name"><primary sortas="idmef_node_set_name">idmef_node_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_node_set_name                 (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-new-name" role="function">
<title>idmef_node_new_name ()</title>
<indexterm zone="idmef-node-new-name"><primary sortas="idmef_node_new_name">idmef_node_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_new_name                 (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-node-t"><type>idmef_node_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-get-next-address" role="function">
<title>idmef_node_get_next_address ()</title>
<indexterm zone="idmef-node-get-next-address"><primary sortas="idmef_node_get_next_address">idmef_node_get_next_address</primary></indexterm><programlisting><link linkend="idmef-address-t">idmef_address_t</link> *   idmef_node_get_next_address         (<link linkend="idmef-node-t">idmef_node_t</link> *node,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> *address_cur);</programlisting>
<para>
Get the next <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_address_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>address_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-address-t"><type>idmef_address_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-set-address" role="function">
<title>idmef_node_set_address ()</title>
<indexterm zone="idmef-node-set-address"><primary sortas="idmef_node_set_address">idmef_node_set_address</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_node_set_address              (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-new-address" role="function">
<title>idmef_node_new_address ()</title>
<indexterm zone="idmef-node-new-address"><primary sortas="idmef_node_new_address">idmef_node_new_address</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_new_address              (<link linkend="idmef-node-t">idmef_node_t</link> *ptr,
                                                         <link linkend="idmef-address-t">idmef_address_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-address-t"><type>idmef_address_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object. The created <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-address-t"><type>idmef_address_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-spoofed-t" role="enum">
<title>enum idmef_source_spoofed_t</title>
<indexterm zone="idmef-source-spoofed-t"><primary sortas="idmef_source_spoofed_t">idmef_source_spoofed_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_SOURCE_SPOOFED_ERROR = -1,
        IDMEF_SOURCE_SPOOFED_UNKNOWN = 0,
        IDMEF_SOURCE_SPOOFED_YES = 1,
        IDMEF_SOURCE_SPOOFED_NO = 2
} idmef_source_spoofed_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-source-spoofed-to-numeric" role="function">
<title>idmef_source_spoofed_to_numeric ()</title>
<indexterm zone="idmef-source-spoofed-to-numeric"><primary sortas="idmef_source_spoofed_to_numeric">idmef_source_spoofed_to_numeric</primary></indexterm><programlisting><link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link>  idmef_source_spoofed_to_numeric (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-source-spoofed-t"><type>idmef_source_spoofed_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-spoofed-to-string" role="function">
<title>idmef_source_spoofed_to_string ()</title>
<indexterm zone="idmef-source-spoofed-to-string"><primary sortas="idmef_source_spoofed_to_string">idmef_source_spoofed_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_source_spoofed_to_string      (<link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-source-spoofed-t"><type>idmef_source_spoofed_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-source-spoofed-t"><type>idmef_source_spoofed_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-t" role="typedef">
<title>idmef_source_t</title>
<indexterm zone="idmef-source-t"><primary sortas="idmef_source_t">idmef_source_t</primary></indexterm><programlisting>typedef struct idmef_source idmef_source_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-source-new" role="function">
<title>idmef_source_new ()</title>
<indexterm zone="idmef-source-new"><primary sortas="idmef_source_new">idmef_source_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new                    (<link linkend="idmef-source-t">idmef_source_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-copy" role="function">
<title>idmef_source_copy ()</title>
<indexterm zone="idmef-source-copy"><primary sortas="idmef_source_copy">idmef_source_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_copy                   (const <link linkend="idmef-source-t">idmef_source_t</link> *src,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-clone" role="function">
<title>idmef_source_clone ()</title>
<indexterm zone="idmef-source-clone"><primary sortas="idmef_source_clone">idmef_source_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_clone                  (<link linkend="idmef-source-t">idmef_source_t</link> *src,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-ref" role="function">
<title>idmef_source_ref ()</title>
<indexterm zone="idmef-source-ref"><primary sortas="idmef_source_ref">idmef_source_ref</primary></indexterm><programlisting><link linkend="idmef-source-t">idmef_source_t</link> *    idmef_source_ref                    (<link linkend="idmef-source-t">idmef_source_t</link> *source);</programlisting>
<para>
Increase <parameter>source</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>source</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>source</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-destroy" role="function">
<title>idmef_source_destroy ()</title>
<indexterm zone="idmef-source-destroy"><primary sortas="idmef_source_destroy">idmef_source_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_destroy                (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-get-ident" role="function">
<title>idmef_source_get_ident ()</title>
<indexterm zone="idmef-source-get-ident"><primary sortas="idmef_source_get_ident">idmef_source_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_source_get_ident              (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-set-ident" role="function">
<title>idmef_source_set_ident ()</title>
<indexterm zone="idmef-source-set-ident"><primary sortas="idmef_source_set_ident">idmef_source_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_set_ident              (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-new-ident" role="function">
<title>idmef_source_new_ident ()</title>
<indexterm zone="idmef-source-new-ident"><primary sortas="idmef_source_new_ident">idmef_source_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new_ident              (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-source-t"><type>idmef_source_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-get-spoofed" role="function">
<title>idmef_source_get_spoofed ()</title>
<indexterm zone="idmef-source-get-spoofed"><primary sortas="idmef_source_get_spoofed">idmef_source_get_spoofed</primary></indexterm><programlisting><link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link>  idmef_source_get_spoofed        (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
Get spoofed children of the <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_source_spoofed_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-set-spoofed" role="function">
<title>idmef_source_set_spoofed ()</title>
<indexterm zone="idmef-source-set-spoofed"><primary sortas="idmef_source_set_spoofed">idmef_source_set_spoofed</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_set_spoofed            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link> spoofed);</programlisting>
<para>
Set <parameter>spoofed</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>spoofed</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>spoofed</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>spoofed</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-spoofed-t"><type>idmef_source_spoofed_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-new-spoofed" role="function">
<title>idmef_source_new_spoofed ()</title>
<indexterm zone="idmef-source-new-spoofed"><primary sortas="idmef_source_new_spoofed">idmef_source_new_spoofed</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new_spoofed            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-source-spoofed-t">idmef_source_spoofed_t</link> **ret);</programlisting>
<para>
Create a new spoofed object, children of <link linkend="idmef-source-t"><type>idmef_source_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-source-spoofed-t"><type>idmef_source_spoofed_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-source-spoofed-t"><type>idmef_source_spoofed_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-get-interface" role="function">
<title>idmef_source_get_interface ()</title>
<indexterm zone="idmef-source-get-interface"><primary sortas="idmef_source_get_interface">idmef_source_get_interface</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_source_get_interface          (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-set-interface" role="function">
<title>idmef_source_set_interface ()</title>
<indexterm zone="idmef-source-set-interface"><primary sortas="idmef_source_set_interface">idmef_source_set_interface</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_set_interface          (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *interface);</programlisting>
<para>
Set <parameter>interface</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>interface</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>interface</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-new-interface" role="function">
<title>idmef_source_new_interface ()</title>
<indexterm zone="idmef-source-new-interface"><primary sortas="idmef_source_new_interface">idmef_source_new_interface</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new_interface          (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new interface object, children of <link linkend="idmef-source-t"><type>idmef_source_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-get-node" role="function">
<title>idmef_source_get_node ()</title>
<indexterm zone="idmef-source-get-node"><primary sortas="idmef_source_get_node">idmef_source_get_node</primary></indexterm><programlisting><link linkend="idmef-node-t">idmef_node_t</link> *      idmef_source_get_node               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-set-node" role="function">
<title>idmef_source_set_node ()</title>
<indexterm zone="idmef-source-set-node"><primary sortas="idmef_source_set_node">idmef_source_set_node</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_set_node               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *node);</programlisting>
<para>
Set <parameter>node</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>node</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>node</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-new-node" role="function">
<title>idmef_source_new_node ()</title>
<indexterm zone="idmef-source-new-node"><primary sortas="idmef_source_new_node">idmef_source_new_node</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new_node               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **ret);</programlisting>
<para>
Create a new node object, children of <link linkend="idmef-source-t"><type>idmef_source_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-get-user" role="function">
<title>idmef_source_get_user ()</title>
<indexterm zone="idmef-source-get-user"><primary sortas="idmef_source_get_user">idmef_source_get_user</primary></indexterm><programlisting><link linkend="idmef-user-t">idmef_user_t</link> *      idmef_source_get_user               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-set-user" role="function">
<title>idmef_source_set_user ()</title>
<indexterm zone="idmef-source-set-user"><primary sortas="idmef_source_set_user">idmef_source_set_user</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_set_user               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> *user);</programlisting>
<para>
Set <parameter>user</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>user</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>user</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-new-user" role="function">
<title>idmef_source_new_user ()</title>
<indexterm zone="idmef-source-new-user"><primary sortas="idmef_source_new_user">idmef_source_new_user</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new_user               (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> **ret);</programlisting>
<para>
Create a new user object, children of <link linkend="idmef-source-t"><type>idmef_source_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-get-process" role="function">
<title>idmef_source_get_process ()</title>
<indexterm zone="idmef-source-get-process"><primary sortas="idmef_source_get_process">idmef_source_get_process</primary></indexterm><programlisting><link linkend="idmef-process-t">idmef_process_t</link> *   idmef_source_get_process            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-set-process" role="function">
<title>idmef_source_set_process ()</title>
<indexterm zone="idmef-source-set-process"><primary sortas="idmef_source_set_process">idmef_source_set_process</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_set_process            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *process);</programlisting>
<para>
Set <parameter>process</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>process</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>process</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>process</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-new-process" role="function">
<title>idmef_source_new_process ()</title>
<indexterm zone="idmef-source-new-process"><primary sortas="idmef_source_new_process">idmef_source_new_process</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new_process            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **ret);</programlisting>
<para>
Create a new process object, children of <link linkend="idmef-source-t"><type>idmef_source_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-get-service" role="function">
<title>idmef_source_get_service ()</title>
<indexterm zone="idmef-source-get-service"><primary sortas="idmef_source_get_service">idmef_source_get_service</primary></indexterm><programlisting><link linkend="idmef-service-t">idmef_service_t</link> *   idmef_source_get_service            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-set-service" role="function">
<title>idmef_source_set_service ()</title>
<indexterm zone="idmef-source-set-service"><primary sortas="idmef_source_set_service">idmef_source_set_service</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_source_set_service            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> *service);</programlisting>
<para>
Set <parameter>service</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>service</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>service</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-new-service" role="function">
<title>idmef_source_new_service ()</title>
<indexterm zone="idmef-source-new-service"><primary sortas="idmef_source_new_service">idmef_source_new_service</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_new_service            (<link linkend="idmef-source-t">idmef_source_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> **ret);</programlisting>
<para>
Create a new service object, children of <link linkend="idmef-source-t"><type>idmef_source_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-t" role="typedef">
<title>idmef_file_access_t</title>
<indexterm zone="idmef-file-access-t"><primary sortas="idmef_file_access_t">idmef_file_access_t</primary></indexterm><programlisting>typedef struct idmef_file_access idmef_file_access_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-file-access-new" role="function">
<title>idmef_file_access_new ()</title>
<indexterm zone="idmef-file-access-new"><primary sortas="idmef_file_access_new">idmef_file_access_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_access_new               (<link linkend="idmef-file-access-t">idmef_file_access_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-copy" role="function">
<title>idmef_file_access_copy ()</title>
<indexterm zone="idmef-file-access-copy"><primary sortas="idmef_file_access_copy">idmef_file_access_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_access_copy              (const <link linkend="idmef-file-access-t">idmef_file_access_t</link> *src,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-clone" role="function">
<title>idmef_file_access_clone ()</title>
<indexterm zone="idmef-file-access-clone"><primary sortas="idmef_file_access_clone">idmef_file_access_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_access_clone             (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *src,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-ref" role="function">
<title>idmef_file_access_ref ()</title>
<indexterm zone="idmef-file-access-ref"><primary sortas="idmef_file_access_ref">idmef_file_access_ref</primary></indexterm><programlisting><link linkend="idmef-file-access-t">idmef_file_access_t</link> * idmef_file_access_ref             (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *file_access);</programlisting>
<para>
Increase <parameter>file_access</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>file_access</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>file_access</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-destroy" role="function">
<title>idmef_file_access_destroy ()</title>
<indexterm zone="idmef-file-access-destroy"><primary sortas="idmef_file_access_destroy">idmef_file_access_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_access_destroy           (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-get-user-id" role="function">
<title>idmef_file_access_get_user_id ()</title>
<indexterm zone="idmef-file-access-get-user-id"><primary sortas="idmef_file_access_get_user_id">idmef_file_access_get_user_id</primary></indexterm><programlisting><link linkend="idmef-user-id-t">idmef_user_id_t</link> *   idmef_file_access_get_user_id       (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-set-user-id" role="function">
<title>idmef_file_access_set_user_id ()</title>
<indexterm zone="idmef-file-access-set-user-id"><primary sortas="idmef_file_access_set_user_id">idmef_file_access_set_user_id</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_access_set_user_id       (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> *user_id);</programlisting>
<para>
Set <parameter>user_id</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>user_id</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>user_id</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_id</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-new-user-id" role="function">
<title>idmef_file_access_new_user_id ()</title>
<indexterm zone="idmef-file-access-new-user-id"><primary sortas="idmef_file_access_new_user_id">idmef_file_access_new_user_id</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_access_new_user_id       (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="idmef-user-id-t">idmef_user_id_t</link> **ret);</programlisting>
<para>
Create a new user_id object, children of <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-user-id-t"><type>idmef_user_id_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-get-next-permission" role="function">
<title>idmef_file_access_get_next_permission ()</title>
<indexterm zone="idmef-file-access-get-next-permission"><primary sortas="idmef_file_access_get_next_permission">idmef_file_access_get_next_permission</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_file_access_get_next_permission
                                                        (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *file_access,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *prelude_string_cur);</programlisting>
<para>
Get the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the prelude_string_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>file_access</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prelude_string_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="prelude-string-t"><type>prelude_string_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-set-permission" role="function">
<title>idmef_file_access_set_permission ()</title>
<indexterm zone="idmef-file-access-set-permission"><primary sortas="idmef_file_access_set_permission">idmef_file_access_set_permission</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_access_set_permission    (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-new-permission" role="function">
<title>idmef_file_access_new_permission ()</title>
<indexterm zone="idmef-file-access-new-permission"><primary sortas="idmef_file_access_new_permission">idmef_file_access_new_permission</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_access_new_permission    (<link linkend="idmef-file-access-t">idmef_file_access_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="prelude-string-t"><type>prelude_string_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object. The created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-t" role="typedef">
<title>idmef_inode_t</title>
<indexterm zone="idmef-inode-t"><primary sortas="idmef_inode_t">idmef_inode_t</primary></indexterm><programlisting>typedef struct idmef_inode idmef_inode_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-inode-new" role="function">
<title>idmef_inode_new ()</title>
<indexterm zone="idmef-inode-new"><primary sortas="idmef_inode_new">idmef_inode_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_new                     (<link linkend="idmef-inode-t">idmef_inode_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-copy" role="function">
<title>idmef_inode_copy ()</title>
<indexterm zone="idmef-inode-copy"><primary sortas="idmef_inode_copy">idmef_inode_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_copy                    (const <link linkend="idmef-inode-t">idmef_inode_t</link> *src,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-clone" role="function">
<title>idmef_inode_clone ()</title>
<indexterm zone="idmef-inode-clone"><primary sortas="idmef_inode_clone">idmef_inode_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_clone                   (<link linkend="idmef-inode-t">idmef_inode_t</link> *src,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-ref" role="function">
<title>idmef_inode_ref ()</title>
<indexterm zone="idmef-inode-ref"><primary sortas="idmef_inode_ref">idmef_inode_ref</primary></indexterm><programlisting><link linkend="idmef-inode-t">idmef_inode_t</link> *     idmef_inode_ref                     (<link linkend="idmef-inode-t">idmef_inode_t</link> *inode);</programlisting>
<para>
Increase <parameter>inode</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>inode</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>inode</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-destroy" role="function">
<title>idmef_inode_destroy ()</title>
<indexterm zone="idmef-inode-destroy"><primary sortas="idmef_inode_destroy">idmef_inode_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_destroy                 (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-get-change-time" role="function">
<title>idmef_inode_get_change_time ()</title>
<indexterm zone="idmef-inode-get-change-time"><primary sortas="idmef_inode_get_change_time">idmef_inode_get_change_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_inode_get_change_time         (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-set-change-time" role="function">
<title>idmef_inode_set_change_time ()</title>
<indexterm zone="idmef-inode-set-change-time"><primary sortas="idmef_inode_set_change_time">idmef_inode_set_change_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_set_change_time         (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *change_time);</programlisting>
<para>
Set <parameter>change_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>change_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>change_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>change_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-new-change-time" role="function">
<title>idmef_inode_new_change_time ()</title>
<indexterm zone="idmef-inode-new-change-time"><primary sortas="idmef_inode_new_change_time">idmef_inode_new_change_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_new_change_time         (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new change_time object, children of <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-unset-number" role="function">
<title>idmef_inode_unset_number ()</title>
<indexterm zone="idmef-inode-unset-number"><primary sortas="idmef_inode_unset_number">idmef_inode_unset_number</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_unset_number            (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-get-number" role="function">
<title>idmef_inode_get_number ()</title>
<indexterm zone="idmef-inode-get-number"><primary sortas="idmef_inode_get_number">idmef_inode_get_number</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_inode_get_number              (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-set-number" role="function">
<title>idmef_inode_set_number ()</title>
<indexterm zone="idmef-inode-set-number"><primary sortas="idmef_inode_set_number">idmef_inode_set_number</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_set_number              (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> number);</programlisting>
<para>
Set <parameter>number</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>number</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>number</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>number</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-new-number" role="function">
<title>idmef_inode_new_number ()</title>
<indexterm zone="idmef-inode-new-number"><primary sortas="idmef_inode_new_number">idmef_inode_new_number</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_new_number              (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new number object, children of <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-unset-major-device" role="function">
<title>idmef_inode_unset_major_device ()</title>
<indexterm zone="idmef-inode-unset-major-device"><primary sortas="idmef_inode_unset_major_device">idmef_inode_unset_major_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_unset_major_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-get-major-device" role="function">
<title>idmef_inode_get_major_device ()</title>
<indexterm zone="idmef-inode-get-major-device"><primary sortas="idmef_inode_get_major_device">idmef_inode_get_major_device</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_inode_get_major_device        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-set-major-device" role="function">
<title>idmef_inode_set_major_device ()</title>
<indexterm zone="idmef-inode-set-major-device"><primary sortas="idmef_inode_set_major_device">idmef_inode_set_major_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_set_major_device        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> major_device);</programlisting>
<para>
Set <parameter>major_device</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>major_device</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>major_device</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>major_device</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-new-major-device" role="function">
<title>idmef_inode_new_major_device ()</title>
<indexterm zone="idmef-inode-new-major-device"><primary sortas="idmef_inode_new_major_device">idmef_inode_new_major_device</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_new_major_device        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new major_device object, children of <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-unset-minor-device" role="function">
<title>idmef_inode_unset_minor_device ()</title>
<indexterm zone="idmef-inode-unset-minor-device"><primary sortas="idmef_inode_unset_minor_device">idmef_inode_unset_minor_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_unset_minor_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-get-minor-device" role="function">
<title>idmef_inode_get_minor_device ()</title>
<indexterm zone="idmef-inode-get-minor-device"><primary sortas="idmef_inode_get_minor_device">idmef_inode_get_minor_device</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_inode_get_minor_device        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-set-minor-device" role="function">
<title>idmef_inode_set_minor_device ()</title>
<indexterm zone="idmef-inode-set-minor-device"><primary sortas="idmef_inode_set_minor_device">idmef_inode_set_minor_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_set_minor_device        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> minor_device);</programlisting>
<para>
Set <parameter>minor_device</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>minor_device</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>minor_device</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>minor_device</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-new-minor-device" role="function">
<title>idmef_inode_new_minor_device ()</title>
<indexterm zone="idmef-inode-new-minor-device"><primary sortas="idmef_inode_new_minor_device">idmef_inode_new_minor_device</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_new_minor_device        (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new minor_device object, children of <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-unset-c-major-device" role="function">
<title>idmef_inode_unset_c_major_device ()</title>
<indexterm zone="idmef-inode-unset-c-major-device"><primary sortas="idmef_inode_unset_c_major_device">idmef_inode_unset_c_major_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_unset_c_major_device    (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-get-c-major-device" role="function">
<title>idmef_inode_get_c_major_device ()</title>
<indexterm zone="idmef-inode-get-c-major-device"><primary sortas="idmef_inode_get_c_major_device">idmef_inode_get_c_major_device</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_inode_get_c_major_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-set-c-major-device" role="function">
<title>idmef_inode_set_c_major_device ()</title>
<indexterm zone="idmef-inode-set-c-major-device"><primary sortas="idmef_inode_set_c_major_device">idmef_inode_set_c_major_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_set_c_major_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> c_major_device);</programlisting>
<para>
Set <parameter>c_major_device</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>c_major_device</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>c_major_device</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c_major_device</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-new-c-major-device" role="function">
<title>idmef_inode_new_c_major_device ()</title>
<indexterm zone="idmef-inode-new-c-major-device"><primary sortas="idmef_inode_new_c_major_device">idmef_inode_new_c_major_device</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_new_c_major_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new c_major_device object, children of <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-unset-c-minor-device" role="function">
<title>idmef_inode_unset_c_minor_device ()</title>
<indexterm zone="idmef-inode-unset-c-minor-device"><primary sortas="idmef_inode_unset_c_minor_device">idmef_inode_unset_c_minor_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_unset_c_minor_device    (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-get-c-minor-device" role="function">
<title>idmef_inode_get_c_minor_device ()</title>
<indexterm zone="idmef-inode-get-c-minor-device"><primary sortas="idmef_inode_get_c_minor_device">idmef_inode_get_c_minor_device</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_inode_get_c_minor_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-set-c-minor-device" role="function">
<title>idmef_inode_set_c_minor_device ()</title>
<indexterm zone="idmef-inode-set-c-minor-device"><primary sortas="idmef_inode_set_c_minor_device">idmef_inode_set_c_minor_device</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_inode_set_c_minor_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> c_minor_device);</programlisting>
<para>
Set <parameter>c_minor_device</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>c_minor_device</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>c_minor_device</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c_minor_device</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-new-c-minor-device" role="function">
<title>idmef_inode_new_c_minor_device ()</title>
<indexterm zone="idmef-inode-new-c-minor-device"><primary sortas="idmef_inode_new_c_minor_device">idmef_inode_new_c_minor_device</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_new_c_minor_device      (<link linkend="idmef-inode-t">idmef_inode_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new c_minor_device object, children of <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-t" role="typedef">
<title>idmef_linkage_t</title>
<indexterm zone="idmef-linkage-t"><primary sortas="idmef_linkage_t">idmef_linkage_t</primary></indexterm><programlisting>typedef struct idmef_linkage idmef_linkage_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-checksum-algorithm-t" role="enum">
<title>enum idmef_checksum_algorithm_t</title>
<indexterm zone="idmef-checksum-algorithm-t"><primary sortas="idmef_checksum_algorithm_t">idmef_checksum_algorithm_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_CHECKSUM_ALGORITHM_ERROR = -1,
        IDMEF_CHECKSUM_ALGORITHM_MD4 = 1,
        IDMEF_CHECKSUM_ALGORITHM_MD5 = 2,
        IDMEF_CHECKSUM_ALGORITHM_SHA1 = 3,
        IDMEF_CHECKSUM_ALGORITHM_SHA2_256 = 4,
        IDMEF_CHECKSUM_ALGORITHM_SHA2_384 = 5,
        IDMEF_CHECKSUM_ALGORITHM_SHA2_512 = 6,
        IDMEF_CHECKSUM_ALGORITHM_CRC_32 = 7,
        IDMEF_CHECKSUM_ALGORITHM_HAVAL = 8,
        IDMEF_CHECKSUM_ALGORITHM_TIGER = 9,
        IDMEF_CHECKSUM_ALGORITHM_GOST = 11
} idmef_checksum_algorithm_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-checksum-algorithm-to-numeric" role="function">
<title>idmef_checksum_algorithm_to_numeric ()</title>
<indexterm zone="idmef-checksum-algorithm-to-numeric"><primary sortas="idmef_checksum_algorithm_to_numeric">idmef_checksum_algorithm_to_numeric</primary></indexterm><programlisting><link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link>  idmef_checksum_algorithm_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-checksum-algorithm-t"><type>idmef_checksum_algorithm_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-algorithm-to-string" role="function">
<title>idmef_checksum_algorithm_to_string ()</title>
<indexterm zone="idmef-checksum-algorithm-to-string"><primary sortas="idmef_checksum_algorithm_to_string">idmef_checksum_algorithm_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_checksum_algorithm_to_string  (<link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-checksum-algorithm-t"><type>idmef_checksum_algorithm_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-checksum-algorithm-t"><type>idmef_checksum_algorithm_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-t" role="typedef">
<title>idmef_checksum_t</title>
<indexterm zone="idmef-checksum-t"><primary sortas="idmef_checksum_t">idmef_checksum_t</primary></indexterm><programlisting>typedef struct idmef_checksum idmef_checksum_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-checksum-new" role="function">
<title>idmef_checksum_new ()</title>
<indexterm zone="idmef-checksum-new"><primary sortas="idmef_checksum_new">idmef_checksum_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_checksum_new                  (<link linkend="idmef-checksum-t">idmef_checksum_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-copy" role="function">
<title>idmef_checksum_copy ()</title>
<indexterm zone="idmef-checksum-copy"><primary sortas="idmef_checksum_copy">idmef_checksum_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_checksum_copy                 (const <link linkend="idmef-checksum-t">idmef_checksum_t</link> *src,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-clone" role="function">
<title>idmef_checksum_clone ()</title>
<indexterm zone="idmef-checksum-clone"><primary sortas="idmef_checksum_clone">idmef_checksum_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_checksum_clone                (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *src,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-ref" role="function">
<title>idmef_checksum_ref ()</title>
<indexterm zone="idmef-checksum-ref"><primary sortas="idmef_checksum_ref">idmef_checksum_ref</primary></indexterm><programlisting><link linkend="idmef-checksum-t">idmef_checksum_t</link> *  idmef_checksum_ref                  (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *checksum);</programlisting>
<para>
Increase <parameter>checksum</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>checksum</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>checksum</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-destroy" role="function">
<title>idmef_checksum_destroy ()</title>
<indexterm zone="idmef-checksum-destroy"><primary sortas="idmef_checksum_destroy">idmef_checksum_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_checksum_destroy              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-get-value" role="function">
<title>idmef_checksum_get_value ()</title>
<indexterm zone="idmef-checksum-get-value"><primary sortas="idmef_checksum_get_value">idmef_checksum_get_value</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_checksum_get_value            (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-set-value" role="function">
<title>idmef_checksum_set_value ()</title>
<indexterm zone="idmef-checksum-set-value"><primary sortas="idmef_checksum_set_value">idmef_checksum_set_value</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_checksum_set_value            (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *value);</programlisting>
<para>
Set <parameter>value</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>value</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>value</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-new-value" role="function">
<title>idmef_checksum_new_value ()</title>
<indexterm zone="idmef-checksum-new-value"><primary sortas="idmef_checksum_new_value">idmef_checksum_new_value</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_checksum_new_value            (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new value object, children of <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-get-key" role="function">
<title>idmef_checksum_get_key ()</title>
<indexterm zone="idmef-checksum-get-key"><primary sortas="idmef_checksum_get_key">idmef_checksum_get_key</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_checksum_get_key              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-set-key" role="function">
<title>idmef_checksum_set_key ()</title>
<indexterm zone="idmef-checksum-set-key"><primary sortas="idmef_checksum_set_key">idmef_checksum_set_key</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_checksum_set_key              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *key);</programlisting>
<para>
Set <parameter>key</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>key</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>key</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-new-key" role="function">
<title>idmef_checksum_new_key ()</title>
<indexterm zone="idmef-checksum-new-key"><primary sortas="idmef_checksum_new_key">idmef_checksum_new_key</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_checksum_new_key              (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new key object, children of <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-get-algorithm" role="function">
<title>idmef_checksum_get_algorithm ()</title>
<indexterm zone="idmef-checksum-get-algorithm"><primary sortas="idmef_checksum_get_algorithm">idmef_checksum_get_algorithm</primary></indexterm><programlisting><link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link>  idmef_checksum_get_algorithm
                                                        (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr);</programlisting>
<para>
Get algorithm children of the <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_checksum_algorithm_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-set-algorithm" role="function">
<title>idmef_checksum_set_algorithm ()</title>
<indexterm zone="idmef-checksum-set-algorithm"><primary sortas="idmef_checksum_set_algorithm">idmef_checksum_set_algorithm</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_checksum_set_algorithm        (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link> algorithm);</programlisting>
<para>
Set <parameter>algorithm</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>algorithm</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>algorithm</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-algorithm-t"><type>idmef_checksum_algorithm_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-new-algorithm" role="function">
<title>idmef_checksum_new_algorithm ()</title>
<indexterm zone="idmef-checksum-new-algorithm"><primary sortas="idmef_checksum_new_algorithm">idmef_checksum_new_algorithm</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_checksum_new_algorithm        (<link linkend="idmef-checksum-t">idmef_checksum_t</link> *ptr,
                                                         <link linkend="idmef-checksum-algorithm-t">idmef_checksum_algorithm_t</link> **ret);</programlisting>
<para>
Create a new algorithm object, children of <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-checksum-algorithm-t"><type>idmef_checksum_algorithm_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-checksum-algorithm-t"><type>idmef_checksum_algorithm_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-category-t" role="enum">
<title>enum idmef_file_category_t</title>
<indexterm zone="idmef-file-category-t"><primary sortas="idmef_file_category_t">idmef_file_category_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_FILE_CATEGORY_ERROR = -1,
        IDMEF_FILE_CATEGORY_CURRENT = 1,
        IDMEF_FILE_CATEGORY_ORIGINAL = 2
} idmef_file_category_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-file-category-to-numeric" role="function">
<title>idmef_file_category_to_numeric ()</title>
<indexterm zone="idmef-file-category-to-numeric"><primary sortas="idmef_file_category_to_numeric">idmef_file_category_to_numeric</primary></indexterm><programlisting><link linkend="idmef-file-category-t">idmef_file_category_t</link>  idmef_file_category_to_numeric   (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-file-category-t"><type>idmef_file_category_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-category-to-string" role="function">
<title>idmef_file_category_to_string ()</title>
<indexterm zone="idmef-file-category-to-string"><primary sortas="idmef_file_category_to_string">idmef_file_category_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_file_category_to_string       (<link linkend="idmef-file-category-t">idmef_file_category_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-file-category-t"><type>idmef_file_category_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-file-category-t"><type>idmef_file_category_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-fstype-t" role="enum">
<title>enum idmef_file_fstype_t</title>
<indexterm zone="idmef-file-fstype-t"><primary sortas="idmef_file_fstype_t">idmef_file_fstype_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_FILE_FSTYPE_ERROR = -1,
        IDMEF_FILE_FSTYPE_UFS = 1,
        IDMEF_FILE_FSTYPE_EFS = 2,
        IDMEF_FILE_FSTYPE_NFS = 3,
        IDMEF_FILE_FSTYPE_AFS = 4,
        IDMEF_FILE_FSTYPE_NTFS = 5,
        IDMEF_FILE_FSTYPE_FAT16 = 6,
        IDMEF_FILE_FSTYPE_FAT32 = 7,
        IDMEF_FILE_FSTYPE_PCFS = 8,
        IDMEF_FILE_FSTYPE_JOLIET = 9,
        IDMEF_FILE_FSTYPE_ISO9660 = 10
} idmef_file_fstype_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-file-fstype-to-numeric" role="function">
<title>idmef_file_fstype_to_numeric ()</title>
<indexterm zone="idmef-file-fstype-to-numeric"><primary sortas="idmef_file_fstype_to_numeric">idmef_file_fstype_to_numeric</primary></indexterm><programlisting><link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link>  idmef_file_fstype_to_numeric       (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-file-fstype-t"><type>idmef_file_fstype_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-fstype-to-string" role="function">
<title>idmef_file_fstype_to_string ()</title>
<indexterm zone="idmef-file-fstype-to-string"><primary sortas="idmef_file_fstype_to_string">idmef_file_fstype_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_file_fstype_to_string         (<link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-file-fstype-t"><type>idmef_file_fstype_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-file-fstype-t"><type>idmef_file_fstype_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-t" role="typedef">
<title>idmef_file_t</title>
<indexterm zone="idmef-file-t"><primary sortas="idmef_file_t">idmef_file_t</primary></indexterm><programlisting>typedef struct idmef_file idmef_file_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-file-new" role="function">
<title>idmef_file_new ()</title>
<indexterm zone="idmef-file-new"><primary sortas="idmef_file_new">idmef_file_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new                      (<link linkend="idmef-file-t">idmef_file_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-copy" role="function">
<title>idmef_file_copy ()</title>
<indexterm zone="idmef-file-copy"><primary sortas="idmef_file_copy">idmef_file_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_copy                     (const <link linkend="idmef-file-t">idmef_file_t</link> *src,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-clone" role="function">
<title>idmef_file_clone ()</title>
<indexterm zone="idmef-file-clone"><primary sortas="idmef_file_clone">idmef_file_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_clone                    (<link linkend="idmef-file-t">idmef_file_t</link> *src,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-ref" role="function">
<title>idmef_file_ref ()</title>
<indexterm zone="idmef-file-ref"><primary sortas="idmef_file_ref">idmef_file_ref</primary></indexterm><programlisting><link linkend="idmef-file-t">idmef_file_t</link> *      idmef_file_ref                      (<link linkend="idmef-file-t">idmef_file_t</link> *file);</programlisting>
<para>
Increase <parameter>file</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>file</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-destroy" role="function">
<title>idmef_file_destroy ()</title>
<indexterm zone="idmef-file-destroy"><primary sortas="idmef_file_destroy">idmef_file_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_destroy                  (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-ident" role="function">
<title>idmef_file_get_ident ()</title>
<indexterm zone="idmef-file-get-ident"><primary sortas="idmef_file_get_ident">idmef_file_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_file_get_ident                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-ident" role="function">
<title>idmef_file_set_ident ()</title>
<indexterm zone="idmef-file-set-ident"><primary sortas="idmef_file_set_ident">idmef_file_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_ident                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-ident" role="function">
<title>idmef_file_new_ident ()</title>
<indexterm zone="idmef-file-new-ident"><primary sortas="idmef_file_new_ident">idmef_file_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_ident                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-name" role="function">
<title>idmef_file_get_name ()</title>
<indexterm zone="idmef-file-get-name"><primary sortas="idmef_file_get_name">idmef_file_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_file_get_name                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-name" role="function">
<title>idmef_file_set_name ()</title>
<indexterm zone="idmef-file-set-name"><primary sortas="idmef_file_set_name">idmef_file_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_name                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-name" role="function">
<title>idmef_file_new_name ()</title>
<indexterm zone="idmef-file-new-name"><primary sortas="idmef_file_new_name">idmef_file_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_name                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-path" role="function">
<title>idmef_file_get_path ()</title>
<indexterm zone="idmef-file-get-path"><primary sortas="idmef_file_get_path">idmef_file_get_path</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_file_get_path                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-path" role="function">
<title>idmef_file_set_path ()</title>
<indexterm zone="idmef-file-set-path"><primary sortas="idmef_file_set_path">idmef_file_set_path</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_path                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *path);</programlisting>
<para>
Set <parameter>path</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>path</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>path</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-path" role="function">
<title>idmef_file_new_path ()</title>
<indexterm zone="idmef-file-new-path"><primary sortas="idmef_file_new_path">idmef_file_new_path</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_path                 (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new path object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-create-time" role="function">
<title>idmef_file_get_create_time ()</title>
<indexterm zone="idmef-file-get-create-time"><primary sortas="idmef_file_get_create_time">idmef_file_get_create_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_file_get_create_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-create-time" role="function">
<title>idmef_file_set_create_time ()</title>
<indexterm zone="idmef-file-set-create-time"><primary sortas="idmef_file_set_create_time">idmef_file_set_create_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_create_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *create_time);</programlisting>
<para>
Set <parameter>create_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>create_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>create_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>create_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-create-time" role="function">
<title>idmef_file_new_create_time ()</title>
<indexterm zone="idmef-file-new-create-time"><primary sortas="idmef_file_new_create_time">idmef_file_new_create_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_create_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new create_time object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-modify-time" role="function">
<title>idmef_file_get_modify_time ()</title>
<indexterm zone="idmef-file-get-modify-time"><primary sortas="idmef_file_get_modify_time">idmef_file_get_modify_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_file_get_modify_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-modify-time" role="function">
<title>idmef_file_set_modify_time ()</title>
<indexterm zone="idmef-file-set-modify-time"><primary sortas="idmef_file_set_modify_time">idmef_file_set_modify_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_modify_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *modify_time);</programlisting>
<para>
Set <parameter>modify_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>modify_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>modify_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>modify_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-modify-time" role="function">
<title>idmef_file_new_modify_time ()</title>
<indexterm zone="idmef-file-new-modify-time"><primary sortas="idmef_file_new_modify_time">idmef_file_new_modify_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_modify_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new modify_time object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-access-time" role="function">
<title>idmef_file_get_access_time ()</title>
<indexterm zone="idmef-file-get-access-time"><primary sortas="idmef_file_get_access_time">idmef_file_get_access_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_file_get_access_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-access-time" role="function">
<title>idmef_file_set_access_time ()</title>
<indexterm zone="idmef-file-set-access-time"><primary sortas="idmef_file_set_access_time">idmef_file_set_access_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_access_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *access_time);</programlisting>
<para>
Set <parameter>access_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>access_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>access_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>access_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-access-time" role="function">
<title>idmef_file_new_access_time ()</title>
<indexterm zone="idmef-file-new-access-time"><primary sortas="idmef_file_new_access_time">idmef_file_new_access_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_access_time          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new access_time object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-unset-data-size" role="function">
<title>idmef_file_unset_data_size ()</title>
<indexterm zone="idmef-file-unset-data-size"><primary sortas="idmef_file_unset_data_size">idmef_file_unset_data_size</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_unset_data_size          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-data-size" role="function">
<title>idmef_file_get_data_size ()</title>
<indexterm zone="idmef-file-get-data-size"><primary sortas="idmef_file_get_data_size">idmef_file_get_data_size</primary></indexterm><programlisting><link linkend="uint64-t">uint64_t</link> *          idmef_file_get_data_size            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-data-size" role="function">
<title>idmef_file_set_data_size ()</title>
<indexterm zone="idmef-file-set-data-size"><primary sortas="idmef_file_set_data_size">idmef_file_set_data_size</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_data_size            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> data_size);</programlisting>
<para>
Set <parameter>data_size</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>data_size</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>data_size</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint64-t"><type>uint64_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-data-size" role="function">
<title>idmef_file_new_data_size ()</title>
<indexterm zone="idmef-file-new-data-size"><primary sortas="idmef_file_new_data_size">idmef_file_new_data_size</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_data_size            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> **ret);</programlisting>
<para>
Create a new data_size object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint64-t"><type>uint64_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint64-t"><type>uint64_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-unset-disk-size" role="function">
<title>idmef_file_unset_disk_size ()</title>
<indexterm zone="idmef-file-unset-disk-size"><primary sortas="idmef_file_unset_disk_size">idmef_file_unset_disk_size</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_unset_disk_size          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-disk-size" role="function">
<title>idmef_file_get_disk_size ()</title>
<indexterm zone="idmef-file-get-disk-size"><primary sortas="idmef_file_get_disk_size">idmef_file_get_disk_size</primary></indexterm><programlisting><link linkend="uint64-t">uint64_t</link> *          idmef_file_get_disk_size            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-disk-size" role="function">
<title>idmef_file_set_disk_size ()</title>
<indexterm zone="idmef-file-set-disk-size"><primary sortas="idmef_file_set_disk_size">idmef_file_set_disk_size</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_disk_size            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> disk_size);</programlisting>
<para>
Set <parameter>disk_size</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>disk_size</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>disk_size</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>disk_size</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint64-t"><type>uint64_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-disk-size" role="function">
<title>idmef_file_new_disk_size ()</title>
<indexterm zone="idmef-file-new-disk-size"><primary sortas="idmef_file_new_disk_size">idmef_file_new_disk_size</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_disk_size            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="uint64-t">uint64_t</link> **ret);</programlisting>
<para>
Create a new disk_size object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint64-t"><type>uint64_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint64-t"><type>uint64_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-next-file-access" role="function">
<title>idmef_file_get_next_file_access ()</title>
<indexterm zone="idmef-file-get-next-file-access"><primary sortas="idmef_file_get_next_file_access">idmef_file_get_next_file_access</primary></indexterm><programlisting><link linkend="idmef-file-access-t">idmef_file_access_t</link> * idmef_file_get_next_file_access   (<link linkend="idmef-file-t">idmef_file_t</link> *file,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> *file_access_cur);</programlisting>
<para>
Get the next <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_file_access_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_access_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-file-access" role="function">
<title>idmef_file_set_file_access ()</title>
<indexterm zone="idmef-file-set-file-access"><primary sortas="idmef_file_set_file_access">idmef_file_set_file_access</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_file_access          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-file-access" role="function">
<title>idmef_file_new_file_access ()</title>
<indexterm zone="idmef-file-new-file-access"><primary sortas="idmef_file_new_file_access">idmef_file_new_file_access</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_file_access          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-access-t">idmef_file_access_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object. The created <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-file-access-t"><type>idmef_file_access_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-next-linkage" role="function">
<title>idmef_file_get_next_linkage ()</title>
<indexterm zone="idmef-file-get-next-linkage"><primary sortas="idmef_file_get_next_linkage">idmef_file_get_next_linkage</primary></indexterm><programlisting><link linkend="idmef-linkage-t">idmef_linkage_t</link> *   idmef_file_get_next_linkage         (<link linkend="idmef-file-t">idmef_file_t</link> *file,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> *linkage_cur);</programlisting>
<para>
Get the next <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_linkage_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>linkage_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-linkage" role="function">
<title>idmef_file_set_linkage ()</title>
<indexterm zone="idmef-file-set-linkage"><primary sortas="idmef_file_set_linkage">idmef_file_set_linkage</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_linkage              (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-linkage" role="function">
<title>idmef_file_new_linkage ()</title>
<indexterm zone="idmef-file-new-linkage"><primary sortas="idmef_file_new_linkage">idmef_file_new_linkage</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_linkage              (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object. The created <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-inode" role="function">
<title>idmef_file_get_inode ()</title>
<indexterm zone="idmef-file-get-inode"><primary sortas="idmef_file_get_inode">idmef_file_get_inode</primary></indexterm><programlisting><link linkend="idmef-inode-t">idmef_inode_t</link> *     idmef_file_get_inode                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-inode" role="function">
<title>idmef_file_set_inode ()</title>
<indexterm zone="idmef-file-set-inode"><primary sortas="idmef_file_set_inode">idmef_file_set_inode</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_inode                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> *inode);</programlisting>
<para>
Set <parameter>inode</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>inode</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>inode</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inode</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-inode" role="function">
<title>idmef_file_new_inode ()</title>
<indexterm zone="idmef-file-new-inode"><primary sortas="idmef_file_new_inode">idmef_file_new_inode</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_inode                (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-inode-t">idmef_inode_t</link> **ret);</programlisting>
<para>
Create a new inode object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-inode-t"><type>idmef_inode_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-next-checksum" role="function">
<title>idmef_file_get_next_checksum ()</title>
<indexterm zone="idmef-file-get-next-checksum"><primary sortas="idmef_file_get_next_checksum">idmef_file_get_next_checksum</primary></indexterm><programlisting><link linkend="idmef-checksum-t">idmef_checksum_t</link> *  idmef_file_get_next_checksum        (<link linkend="idmef-file-t">idmef_file_t</link> *file,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> *checksum_cur);</programlisting>
<para>
Get the next <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_checksum_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>checksum_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-checksum" role="function">
<title>idmef_file_set_checksum ()</title>
<indexterm zone="idmef-file-set-checksum"><primary sortas="idmef_file_set_checksum">idmef_file_set_checksum</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_checksum             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-checksum" role="function">
<title>idmef_file_new_checksum ()</title>
<indexterm zone="idmef-file-new-checksum"><primary sortas="idmef_file_new_checksum">idmef_file_new_checksum</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_checksum             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-checksum-t">idmef_checksum_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object. The created <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-checksum-t"><type>idmef_checksum_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-category" role="function">
<title>idmef_file_get_category ()</title>
<indexterm zone="idmef-file-get-category"><primary sortas="idmef_file_get_category">idmef_file_get_category</primary></indexterm><programlisting><link linkend="idmef-file-category-t">idmef_file_category_t</link>  idmef_file_get_category          (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
Get category children of the <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_file_category_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-category" role="function">
<title>idmef_file_set_category ()</title>
<indexterm zone="idmef-file-set-category"><primary sortas="idmef_file_set_category">idmef_file_set_category</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_category             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-category-t">idmef_file_category_t</link> category);</programlisting>
<para>
Set <parameter>category</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>category</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>category</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-category-t"><type>idmef_file_category_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-category" role="function">
<title>idmef_file_new_category ()</title>
<indexterm zone="idmef-file-new-category"><primary sortas="idmef_file_new_category">idmef_file_new_category</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_category             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-category-t">idmef_file_category_t</link> **ret);</programlisting>
<para>
Create a new category object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-file-category-t"><type>idmef_file_category_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-file-category-t"><type>idmef_file_category_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-unset-fstype" role="function">
<title>idmef_file_unset_fstype ()</title>
<indexterm zone="idmef-file-unset-fstype"><primary sortas="idmef_file_unset_fstype">idmef_file_unset_fstype</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_unset_fstype             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-fstype" role="function">
<title>idmef_file_get_fstype ()</title>
<indexterm zone="idmef-file-get-fstype"><primary sortas="idmef_file_get_fstype">idmef_file_get_fstype</primary></indexterm><programlisting><link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> * idmef_file_get_fstype             (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-fstype" role="function">
<title>idmef_file_set_fstype ()</title>
<indexterm zone="idmef-file-set-fstype"><primary sortas="idmef_file_set_fstype">idmef_file_set_fstype</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_fstype               (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> fstype);</programlisting>
<para>
Set <parameter>fstype</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>fstype</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>fstype</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fstype</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-fstype-t"><type>idmef_file_fstype_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-fstype" role="function">
<title>idmef_file_new_fstype ()</title>
<indexterm zone="idmef-file-new-fstype"><primary sortas="idmef_file_new_fstype">idmef_file_new_fstype</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_fstype               (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="idmef-file-fstype-t">idmef_file_fstype_t</link> **ret);</programlisting>
<para>
Create a new fstype object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-file-fstype-t"><type>idmef_file_fstype_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-file-fstype-t"><type>idmef_file_fstype_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-get-file-type" role="function">
<title>idmef_file_get_file_type ()</title>
<indexterm zone="idmef-file-get-file-type"><primary sortas="idmef_file_get_file_type">idmef_file_get_file_type</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_file_get_file_type            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-set-file-type" role="function">
<title>idmef_file_set_file_type ()</title>
<indexterm zone="idmef-file-set-file-type"><primary sortas="idmef_file_set_file_type">idmef_file_set_file_type</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_file_set_file_type            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *file_type);</programlisting>
<para>
Set <parameter>file_type</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>file_type</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>file_type</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_type</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-new-file-type" role="function">
<title>idmef_file_new_file_type ()</title>
<indexterm zone="idmef-file-new-file-type"><primary sortas="idmef_file_new_file_type">idmef_file_new_file_type</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_new_file_type            (<link linkend="idmef-file-t">idmef_file_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new file_type object, children of <link linkend="idmef-file-t"><type>idmef_file_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-category-t" role="enum">
<title>enum idmef_linkage_category_t</title>
<indexterm zone="idmef-linkage-category-t"><primary sortas="idmef_linkage_category_t">idmef_linkage_category_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_LINKAGE_CATEGORY_ERROR = -1,
        IDMEF_LINKAGE_CATEGORY_HARD_LINK = 1,
        IDMEF_LINKAGE_CATEGORY_MOUNT_POINT = 2,
        IDMEF_LINKAGE_CATEGORY_REPARSE_POINT = 3,
        IDMEF_LINKAGE_CATEGORY_SHORTCUT = 4,
        IDMEF_LINKAGE_CATEGORY_STREAM = 5,
        IDMEF_LINKAGE_CATEGORY_SYMBOLIC_LINK = 6
} idmef_linkage_category_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-linkage-category-to-numeric" role="function">
<title>idmef_linkage_category_to_numeric ()</title>
<indexterm zone="idmef-linkage-category-to-numeric"><primary sortas="idmef_linkage_category_to_numeric">idmef_linkage_category_to_numeric</primary></indexterm><programlisting><link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link>  idmef_linkage_category_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-linkage-category-t"><type>idmef_linkage_category_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-category-to-string" role="function">
<title>idmef_linkage_category_to_string ()</title>
<indexterm zone="idmef-linkage-category-to-string"><primary sortas="idmef_linkage_category_to_string">idmef_linkage_category_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_linkage_category_to_string    (<link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-linkage-category-t"><type>idmef_linkage_category_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-linkage-category-t"><type>idmef_linkage_category_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-new" role="function">
<title>idmef_linkage_new ()</title>
<indexterm zone="idmef-linkage-new"><primary sortas="idmef_linkage_new">idmef_linkage_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_new                   (<link linkend="idmef-linkage-t">idmef_linkage_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-copy" role="function">
<title>idmef_linkage_copy ()</title>
<indexterm zone="idmef-linkage-copy"><primary sortas="idmef_linkage_copy">idmef_linkage_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_copy                  (const <link linkend="idmef-linkage-t">idmef_linkage_t</link> *src,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-clone" role="function">
<title>idmef_linkage_clone ()</title>
<indexterm zone="idmef-linkage-clone"><primary sortas="idmef_linkage_clone">idmef_linkage_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_clone                 (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *src,
                                                         <link linkend="idmef-linkage-t">idmef_linkage_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-ref" role="function">
<title>idmef_linkage_ref ()</title>
<indexterm zone="idmef-linkage-ref"><primary sortas="idmef_linkage_ref">idmef_linkage_ref</primary></indexterm><programlisting><link linkend="idmef-linkage-t">idmef_linkage_t</link> *   idmef_linkage_ref                   (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *linkage);</programlisting>
<para>
Increase <parameter>linkage</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>linkage</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>linkage</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-destroy" role="function">
<title>idmef_linkage_destroy ()</title>
<indexterm zone="idmef-linkage-destroy"><primary sortas="idmef_linkage_destroy">idmef_linkage_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_linkage_destroy               (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-get-category" role="function">
<title>idmef_linkage_get_category ()</title>
<indexterm zone="idmef-linkage-get-category"><primary sortas="idmef_linkage_get_category">idmef_linkage_get_category</primary></indexterm><programlisting><link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link>  idmef_linkage_get_category    (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);</programlisting>
<para>
Get category children of the <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_linkage_category_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-set-category" role="function">
<title>idmef_linkage_set_category ()</title>
<indexterm zone="idmef-linkage-set-category"><primary sortas="idmef_linkage_set_category">idmef_linkage_set_category</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_linkage_set_category          (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link> category);</programlisting>
<para>
Set <parameter>category</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>category</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>category</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-category-t"><type>idmef_linkage_category_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-new-category" role="function">
<title>idmef_linkage_new_category ()</title>
<indexterm zone="idmef-linkage-new-category"><primary sortas="idmef_linkage_new_category">idmef_linkage_new_category</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_new_category          (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-linkage-category-t">idmef_linkage_category_t</link> **ret);</programlisting>
<para>
Create a new category object, children of <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-linkage-category-t"><type>idmef_linkage_category_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-linkage-category-t"><type>idmef_linkage_category_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-get-name" role="function">
<title>idmef_linkage_get_name ()</title>
<indexterm zone="idmef-linkage-get-name"><primary sortas="idmef_linkage_get_name">idmef_linkage_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_linkage_get_name              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-set-name" role="function">
<title>idmef_linkage_set_name ()</title>
<indexterm zone="idmef-linkage-set-name"><primary sortas="idmef_linkage_set_name">idmef_linkage_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_linkage_set_name              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-new-name" role="function">
<title>idmef_linkage_new_name ()</title>
<indexterm zone="idmef-linkage-new-name"><primary sortas="idmef_linkage_new_name">idmef_linkage_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_new_name              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-get-path" role="function">
<title>idmef_linkage_get_path ()</title>
<indexterm zone="idmef-linkage-get-path"><primary sortas="idmef_linkage_get_path">idmef_linkage_get_path</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_linkage_get_path              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-set-path" role="function">
<title>idmef_linkage_set_path ()</title>
<indexterm zone="idmef-linkage-set-path"><primary sortas="idmef_linkage_set_path">idmef_linkage_set_path</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_linkage_set_path              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *path);</programlisting>
<para>
Set <parameter>path</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>path</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>path</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-new-path" role="function">
<title>idmef_linkage_new_path ()</title>
<indexterm zone="idmef-linkage-new-path"><primary sortas="idmef_linkage_new_path">idmef_linkage_new_path</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_new_path              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new path object, children of <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-get-file" role="function">
<title>idmef_linkage_get_file ()</title>
<indexterm zone="idmef-linkage-get-file"><primary sortas="idmef_linkage_get_file">idmef_linkage_get_file</primary></indexterm><programlisting><link linkend="idmef-file-t">idmef_file_t</link> *      idmef_linkage_get_file              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-set-file" role="function">
<title>idmef_linkage_set_file ()</title>
<indexterm zone="idmef-linkage-set-file"><primary sortas="idmef_linkage_set_file">idmef_linkage_set_file</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_linkage_set_file              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *file);</programlisting>
<para>
Set <parameter>file</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>file</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>file</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-new-file" role="function">
<title>idmef_linkage_new_file ()</title>
<indexterm zone="idmef-linkage-new-file"><primary sortas="idmef_linkage_new_file">idmef_linkage_new_file</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_new_file              (<link linkend="idmef-linkage-t">idmef_linkage_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> **ret);</programlisting>
<para>
Create a new file object, children of <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-linkage-t"><type>idmef_linkage_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-decoy-t" role="enum">
<title>enum idmef_target_decoy_t</title>
<indexterm zone="idmef-target-decoy-t"><primary sortas="idmef_target_decoy_t">idmef_target_decoy_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_TARGET_DECOY_ERROR = -1,
        IDMEF_TARGET_DECOY_UNKNOWN = 0,
        IDMEF_TARGET_DECOY_YES = 1,
        IDMEF_TARGET_DECOY_NO = 2
} idmef_target_decoy_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-target-decoy-to-numeric" role="function">
<title>idmef_target_decoy_to_numeric ()</title>
<indexterm zone="idmef-target-decoy-to-numeric"><primary sortas="idmef_target_decoy_to_numeric">idmef_target_decoy_to_numeric</primary></indexterm><programlisting><link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link>  idmef_target_decoy_to_numeric     (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-target-decoy-t"><type>idmef_target_decoy_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-decoy-to-string" role="function">
<title>idmef_target_decoy_to_string ()</title>
<indexterm zone="idmef-target-decoy-to-string"><primary sortas="idmef_target_decoy_to_string">idmef_target_decoy_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_target_decoy_to_string        (<link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-target-decoy-t"><type>idmef_target_decoy_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-target-decoy-t"><type>idmef_target_decoy_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-t" role="typedef">
<title>idmef_target_t</title>
<indexterm zone="idmef-target-t"><primary sortas="idmef_target_t">idmef_target_t</primary></indexterm><programlisting>typedef struct idmef_target idmef_target_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-target-new" role="function">
<title>idmef_target_new ()</title>
<indexterm zone="idmef-target-new"><primary sortas="idmef_target_new">idmef_target_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new                    (<link linkend="idmef-target-t">idmef_target_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-copy" role="function">
<title>idmef_target_copy ()</title>
<indexterm zone="idmef-target-copy"><primary sortas="idmef_target_copy">idmef_target_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_copy                   (const <link linkend="idmef-target-t">idmef_target_t</link> *src,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-clone" role="function">
<title>idmef_target_clone ()</title>
<indexterm zone="idmef-target-clone"><primary sortas="idmef_target_clone">idmef_target_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_clone                  (<link linkend="idmef-target-t">idmef_target_t</link> *src,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-ref" role="function">
<title>idmef_target_ref ()</title>
<indexterm zone="idmef-target-ref"><primary sortas="idmef_target_ref">idmef_target_ref</primary></indexterm><programlisting><link linkend="idmef-target-t">idmef_target_t</link> *    idmef_target_ref                    (<link linkend="idmef-target-t">idmef_target_t</link> *target);</programlisting>
<para>
Increase <parameter>target</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>target</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>target</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-destroy" role="function">
<title>idmef_target_destroy ()</title>
<indexterm zone="idmef-target-destroy"><primary sortas="idmef_target_destroy">idmef_target_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_destroy                (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-ident" role="function">
<title>idmef_target_get_ident ()</title>
<indexterm zone="idmef-target-get-ident"><primary sortas="idmef_target_get_ident">idmef_target_get_ident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_target_get_ident              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-ident" role="function">
<title>idmef_target_set_ident ()</title>
<indexterm zone="idmef-target-set-ident"><primary sortas="idmef_target_set_ident">idmef_target_set_ident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_ident              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ident);</programlisting>
<para>
Set <parameter>ident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-ident" role="function">
<title>idmef_target_new_ident ()</title>
<indexterm zone="idmef-target-new-ident"><primary sortas="idmef_target_new_ident">idmef_target_new_ident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_ident              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ident object, children of <link linkend="idmef-target-t"><type>idmef_target_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-decoy" role="function">
<title>idmef_target_get_decoy ()</title>
<indexterm zone="idmef-target-get-decoy"><primary sortas="idmef_target_get_decoy">idmef_target_get_decoy</primary></indexterm><programlisting><link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link>  idmef_target_get_decoy            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
Get decoy children of the <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_target_decoy_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-decoy" role="function">
<title>idmef_target_set_decoy ()</title>
<indexterm zone="idmef-target-set-decoy"><primary sortas="idmef_target_set_decoy">idmef_target_set_decoy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_decoy              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link> decoy);</programlisting>
<para>
Set <parameter>decoy</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>decoy</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>decoy</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>decoy</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-decoy-t"><type>idmef_target_decoy_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-decoy" role="function">
<title>idmef_target_new_decoy ()</title>
<indexterm zone="idmef-target-new-decoy"><primary sortas="idmef_target_new_decoy">idmef_target_new_decoy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_decoy              (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-target-decoy-t">idmef_target_decoy_t</link> **ret);</programlisting>
<para>
Create a new decoy object, children of <link linkend="idmef-target-t"><type>idmef_target_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-target-decoy-t"><type>idmef_target_decoy_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-target-decoy-t"><type>idmef_target_decoy_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-interface" role="function">
<title>idmef_target_get_interface ()</title>
<indexterm zone="idmef-target-get-interface"><primary sortas="idmef_target_get_interface">idmef_target_get_interface</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_target_get_interface          (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-interface" role="function">
<title>idmef_target_set_interface ()</title>
<indexterm zone="idmef-target-set-interface"><primary sortas="idmef_target_set_interface">idmef_target_set_interface</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_interface          (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *interface);</programlisting>
<para>
Set <parameter>interface</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>interface</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>interface</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-interface" role="function">
<title>idmef_target_new_interface ()</title>
<indexterm zone="idmef-target-new-interface"><primary sortas="idmef_target_new_interface">idmef_target_new_interface</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_interface          (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new interface object, children of <link linkend="idmef-target-t"><type>idmef_target_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-node" role="function">
<title>idmef_target_get_node ()</title>
<indexterm zone="idmef-target-get-node"><primary sortas="idmef_target_get_node">idmef_target_get_node</primary></indexterm><programlisting><link linkend="idmef-node-t">idmef_node_t</link> *      idmef_target_get_node               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-node" role="function">
<title>idmef_target_set_node ()</title>
<indexterm zone="idmef-target-set-node"><primary sortas="idmef_target_set_node">idmef_target_set_node</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_node               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *node);</programlisting>
<para>
Set <parameter>node</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>node</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>node</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-node" role="function">
<title>idmef_target_new_node ()</title>
<indexterm zone="idmef-target-new-node"><primary sortas="idmef_target_new_node">idmef_target_new_node</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_node               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **ret);</programlisting>
<para>
Create a new node object, children of <link linkend="idmef-target-t"><type>idmef_target_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-user" role="function">
<title>idmef_target_get_user ()</title>
<indexterm zone="idmef-target-get-user"><primary sortas="idmef_target_get_user">idmef_target_get_user</primary></indexterm><programlisting><link linkend="idmef-user-t">idmef_user_t</link> *      idmef_target_get_user               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-user" role="function">
<title>idmef_target_set_user ()</title>
<indexterm zone="idmef-target-set-user"><primary sortas="idmef_target_set_user">idmef_target_set_user</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_user               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> *user);</programlisting>
<para>
Set <parameter>user</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>user</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>user</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-user" role="function">
<title>idmef_target_new_user ()</title>
<indexterm zone="idmef-target-new-user"><primary sortas="idmef_target_new_user">idmef_target_new_user</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_user               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-user-t">idmef_user_t</link> **ret);</programlisting>
<para>
Create a new user object, children of <link linkend="idmef-target-t"><type>idmef_target_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-user-t"><type>idmef_user_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-process" role="function">
<title>idmef_target_get_process ()</title>
<indexterm zone="idmef-target-get-process"><primary sortas="idmef_target_get_process">idmef_target_get_process</primary></indexterm><programlisting><link linkend="idmef-process-t">idmef_process_t</link> *   idmef_target_get_process            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-process" role="function">
<title>idmef_target_set_process ()</title>
<indexterm zone="idmef-target-set-process"><primary sortas="idmef_target_set_process">idmef_target_set_process</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_process            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *process);</programlisting>
<para>
Set <parameter>process</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>process</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>process</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>process</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-process" role="function">
<title>idmef_target_new_process ()</title>
<indexterm zone="idmef-target-new-process"><primary sortas="idmef_target_new_process">idmef_target_new_process</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_process            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **ret);</programlisting>
<para>
Create a new process object, children of <link linkend="idmef-target-t"><type>idmef_target_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-service" role="function">
<title>idmef_target_get_service ()</title>
<indexterm zone="idmef-target-get-service"><primary sortas="idmef_target_get_service">idmef_target_get_service</primary></indexterm><programlisting><link linkend="idmef-service-t">idmef_service_t</link> *   idmef_target_get_service            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-service" role="function">
<title>idmef_target_set_service ()</title>
<indexterm zone="idmef-target-set-service"><primary sortas="idmef_target_set_service">idmef_target_set_service</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_service            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> *service);</programlisting>
<para>
Set <parameter>service</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>service</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>service</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>service</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-service" role="function">
<title>idmef_target_new_service ()</title>
<indexterm zone="idmef-target-new-service"><primary sortas="idmef_target_new_service">idmef_target_new_service</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_service            (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-service-t">idmef_service_t</link> **ret);</programlisting>
<para>
Create a new service object, children of <link linkend="idmef-target-t"><type>idmef_target_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-service-t"><type>idmef_service_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-get-next-file" role="function">
<title>idmef_target_get_next_file ()</title>
<indexterm zone="idmef-target-get-next-file"><primary sortas="idmef_target_get_next_file">idmef_target_get_next_file</primary></indexterm><programlisting><link linkend="idmef-file-t">idmef_file_t</link> *      idmef_target_get_next_file          (<link linkend="idmef-target-t">idmef_target_t</link> *target,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *file_cur);</programlisting>
<para>
Get the next <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_file_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>target</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-file-t"><type>idmef_file_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-set-file" role="function">
<title>idmef_target_set_file ()</title>
<indexterm zone="idmef-target-set-file"><primary sortas="idmef_target_set_file">idmef_target_set_file</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_target_set_file               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-new-file" role="function">
<title>idmef_target_new_file ()</title>
<indexterm zone="idmef-target-new-file"><primary sortas="idmef_target_new_file">idmef_target_new_file</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_new_file               (<link linkend="idmef-target-t">idmef_target_t</link> *ptr,
                                                         <link linkend="idmef-file-t">idmef_file_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-file-t"><type>idmef_file_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object. The created <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-file-t"><type>idmef_file_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-t" role="typedef">
<title>idmef_analyzer_t</title>
<indexterm zone="idmef-analyzer-t"><primary sortas="idmef_analyzer_t">idmef_analyzer_t</primary></indexterm><programlisting>typedef struct idmef_analyzer idmef_analyzer_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-analyzer-new" role="function">
<title>idmef_analyzer_new ()</title>
<indexterm zone="idmef-analyzer-new"><primary sortas="idmef_analyzer_new">idmef_analyzer_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new                  (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-copy" role="function">
<title>idmef_analyzer_copy ()</title>
<indexterm zone="idmef-analyzer-copy"><primary sortas="idmef_analyzer_copy">idmef_analyzer_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_copy                 (const <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *src,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-clone" role="function">
<title>idmef_analyzer_clone ()</title>
<indexterm zone="idmef-analyzer-clone"><primary sortas="idmef_analyzer_clone">idmef_analyzer_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_clone                (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *src,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-ref" role="function">
<title>idmef_analyzer_ref ()</title>
<indexterm zone="idmef-analyzer-ref"><primary sortas="idmef_analyzer_ref">idmef_analyzer_ref</primary></indexterm><programlisting><link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *  idmef_analyzer_ref                  (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *analyzer);</programlisting>
<para>
Increase <parameter>analyzer</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>analyzer</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>analyzer</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-destroy" role="function">
<title>idmef_analyzer_destroy ()</title>
<indexterm zone="idmef-analyzer-destroy"><primary sortas="idmef_analyzer_destroy">idmef_analyzer_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_destroy              (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-analyzerid" role="function">
<title>idmef_analyzer_get_analyzerid ()</title>
<indexterm zone="idmef-analyzer-get-analyzerid"><primary sortas="idmef_analyzer_get_analyzerid">idmef_analyzer_get_analyzerid</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_analyzerid       (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-analyzerid" role="function">
<title>idmef_analyzer_set_analyzerid ()</title>
<indexterm zone="idmef-analyzer-set-analyzerid"><primary sortas="idmef_analyzer_set_analyzerid">idmef_analyzer_set_analyzerid</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_analyzerid       (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *analyzerid);</programlisting>
<para>
Set <parameter>analyzerid</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>analyzerid</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>analyzerid</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analyzerid</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-analyzerid" role="function">
<title>idmef_analyzer_new_analyzerid ()</title>
<indexterm zone="idmef-analyzer-new-analyzerid"><primary sortas="idmef_analyzer_new_analyzerid">idmef_analyzer_new_analyzerid</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_analyzerid       (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new analyzerid object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-name" role="function">
<title>idmef_analyzer_get_name ()</title>
<indexterm zone="idmef-analyzer-get-name"><primary sortas="idmef_analyzer_get_name">idmef_analyzer_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_name             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-name" role="function">
<title>idmef_analyzer_set_name ()</title>
<indexterm zone="idmef-analyzer-set-name"><primary sortas="idmef_analyzer_set_name">idmef_analyzer_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_name             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-name" role="function">
<title>idmef_analyzer_new_name ()</title>
<indexterm zone="idmef-analyzer-new-name"><primary sortas="idmef_analyzer_new_name">idmef_analyzer_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_name             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-manufacturer" role="function">
<title>idmef_analyzer_get_manufacturer ()</title>
<indexterm zone="idmef-analyzer-get-manufacturer"><primary sortas="idmef_analyzer_get_manufacturer">idmef_analyzer_get_manufacturer</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_manufacturer     (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-manufacturer" role="function">
<title>idmef_analyzer_set_manufacturer ()</title>
<indexterm zone="idmef-analyzer-set-manufacturer"><primary sortas="idmef_analyzer_set_manufacturer">idmef_analyzer_set_manufacturer</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_manufacturer     (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *manufacturer);</programlisting>
<para>
Set <parameter>manufacturer</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>manufacturer</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>manufacturer</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>manufacturer</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-manufacturer" role="function">
<title>idmef_analyzer_new_manufacturer ()</title>
<indexterm zone="idmef-analyzer-new-manufacturer"><primary sortas="idmef_analyzer_new_manufacturer">idmef_analyzer_new_manufacturer</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_manufacturer     (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new manufacturer object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-model" role="function">
<title>idmef_analyzer_get_model ()</title>
<indexterm zone="idmef-analyzer-get-model"><primary sortas="idmef_analyzer_get_model">idmef_analyzer_get_model</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_model            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-model" role="function">
<title>idmef_analyzer_set_model ()</title>
<indexterm zone="idmef-analyzer-set-model"><primary sortas="idmef_analyzer_set_model">idmef_analyzer_set_model</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_model            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *model);</programlisting>
<para>
Set <parameter>model</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>model</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>model</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>model</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-model" role="function">
<title>idmef_analyzer_new_model ()</title>
<indexterm zone="idmef-analyzer-new-model"><primary sortas="idmef_analyzer_new_model">idmef_analyzer_new_model</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_model            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new model object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-version" role="function">
<title>idmef_analyzer_get_version ()</title>
<indexterm zone="idmef-analyzer-get-version"><primary sortas="idmef_analyzer_get_version">idmef_analyzer_get_version</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_version          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-version" role="function">
<title>idmef_analyzer_set_version ()</title>
<indexterm zone="idmef-analyzer-set-version"><primary sortas="idmef_analyzer_set_version">idmef_analyzer_set_version</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_version          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *version);</programlisting>
<para>
Set <parameter>version</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>version</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>version</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-version" role="function">
<title>idmef_analyzer_new_version ()</title>
<indexterm zone="idmef-analyzer-new-version"><primary sortas="idmef_analyzer_new_version">idmef_analyzer_new_version</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_version          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new version object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-class" role="function">
<title>idmef_analyzer_get_class ()</title>
<indexterm zone="idmef-analyzer-get-class"><primary sortas="idmef_analyzer_get_class">idmef_analyzer_get_class</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_class            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-class" role="function">
<title>idmef_analyzer_set_class ()</title>
<indexterm zone="idmef-analyzer-set-class"><primary sortas="idmef_analyzer_set_class">idmef_analyzer_set_class</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_class            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *class_str);</programlisting>
<para>
Set <parameter>class_str</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>class_str</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>class_str</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>class_str</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-class" role="function">
<title>idmef_analyzer_new_class ()</title>
<indexterm zone="idmef-analyzer-new-class"><primary sortas="idmef_analyzer_new_class">idmef_analyzer_new_class</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_class            (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new class object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-ostype" role="function">
<title>idmef_analyzer_get_ostype ()</title>
<indexterm zone="idmef-analyzer-get-ostype"><primary sortas="idmef_analyzer_get_ostype">idmef_analyzer_get_ostype</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_ostype           (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-ostype" role="function">
<title>idmef_analyzer_set_ostype ()</title>
<indexterm zone="idmef-analyzer-set-ostype"><primary sortas="idmef_analyzer_set_ostype">idmef_analyzer_set_ostype</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_ostype           (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *ostype);</programlisting>
<para>
Set <parameter>ostype</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>ostype</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>ostype</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ostype</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-ostype" role="function">
<title>idmef_analyzer_new_ostype ()</title>
<indexterm zone="idmef-analyzer-new-ostype"><primary sortas="idmef_analyzer_new_ostype">idmef_analyzer_new_ostype</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_ostype           (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new ostype object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-osversion" role="function">
<title>idmef_analyzer_get_osversion ()</title>
<indexterm zone="idmef-analyzer-get-osversion"><primary sortas="idmef_analyzer_get_osversion">idmef_analyzer_get_osversion</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_analyzer_get_osversion        (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-osversion" role="function">
<title>idmef_analyzer_set_osversion ()</title>
<indexterm zone="idmef-analyzer-set-osversion"><primary sortas="idmef_analyzer_set_osversion">idmef_analyzer_set_osversion</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_osversion        (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *osversion);</programlisting>
<para>
Set <parameter>osversion</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>osversion</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>osversion</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>osversion</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-osversion" role="function">
<title>idmef_analyzer_new_osversion ()</title>
<indexterm zone="idmef-analyzer-new-osversion"><primary sortas="idmef_analyzer_new_osversion">idmef_analyzer_new_osversion</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_osversion        (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new osversion object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-node" role="function">
<title>idmef_analyzer_get_node ()</title>
<indexterm zone="idmef-analyzer-get-node"><primary sortas="idmef_analyzer_get_node">idmef_analyzer_get_node</primary></indexterm><programlisting><link linkend="idmef-node-t">idmef_node_t</link> *      idmef_analyzer_get_node             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-node" role="function">
<title>idmef_analyzer_set_node ()</title>
<indexterm zone="idmef-analyzer-set-node"><primary sortas="idmef_analyzer_set_node">idmef_analyzer_set_node</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_node             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> *node);</programlisting>
<para>
Set <parameter>node</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>node</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>node</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-node" role="function">
<title>idmef_analyzer_new_node ()</title>
<indexterm zone="idmef-analyzer-new-node"><primary sortas="idmef_analyzer_new_node">idmef_analyzer_new_node</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_node             (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-node-t">idmef_node_t</link> **ret);</programlisting>
<para>
Create a new node object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-node-t"><type>idmef_node_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-get-process" role="function">
<title>idmef_analyzer_get_process ()</title>
<indexterm zone="idmef-analyzer-get-process"><primary sortas="idmef_analyzer_get_process">idmef_analyzer_get_process</primary></indexterm><programlisting><link linkend="idmef-process-t">idmef_process_t</link> *   idmef_analyzer_get_process          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-set-process" role="function">
<title>idmef_analyzer_set_process ()</title>
<indexterm zone="idmef-analyzer-set-process"><primary sortas="idmef_analyzer_set_process">idmef_analyzer_set_process</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_analyzer_set_process          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> *process);</programlisting>
<para>
Set <parameter>process</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>process</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>process</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>process</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-new-process" role="function">
<title>idmef_analyzer_new_process ()</title>
<indexterm zone="idmef-analyzer-new-process"><primary sortas="idmef_analyzer_new_process">idmef_analyzer_new_process</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_new_process          (<link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *ptr,
                                                         <link linkend="idmef-process-t">idmef_process_t</link> **ret);</programlisting>
<para>
Create a new process object, children of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-process-t"><type>idmef_process_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-t" role="typedef">
<title>idmef_alertident_t</title>
<indexterm zone="idmef-alertident-t"><primary sortas="idmef_alertident_t">idmef_alertident_t</primary></indexterm><programlisting>typedef struct idmef_alertident idmef_alertident_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-alertident-new" role="function">
<title>idmef_alertident_new ()</title>
<indexterm zone="idmef-alertident-new"><primary sortas="idmef_alertident_new">idmef_alertident_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alertident_new                (<link linkend="idmef-alertident-t">idmef_alertident_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-copy" role="function">
<title>idmef_alertident_copy ()</title>
<indexterm zone="idmef-alertident-copy"><primary sortas="idmef_alertident_copy">idmef_alertident_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alertident_copy               (const <link linkend="idmef-alertident-t">idmef_alertident_t</link> *src,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-clone" role="function">
<title>idmef_alertident_clone ()</title>
<indexterm zone="idmef-alertident-clone"><primary sortas="idmef_alertident_clone">idmef_alertident_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alertident_clone              (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *src,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-ref" role="function">
<title>idmef_alertident_ref ()</title>
<indexterm zone="idmef-alertident-ref"><primary sortas="idmef_alertident_ref">idmef_alertident_ref</primary></indexterm><programlisting><link linkend="idmef-alertident-t">idmef_alertident_t</link> * idmef_alertident_ref               (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *alertident);</programlisting>
<para>
Increase <parameter>alertident</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alertident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>alertident</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-destroy" role="function">
<title>idmef_alertident_destroy ()</title>
<indexterm zone="idmef-alertident-destroy"><primary sortas="idmef_alertident_destroy">idmef_alertident_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alertident_destroy            (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-get-alertident" role="function">
<title>idmef_alertident_get_alertident ()</title>
<indexterm zone="idmef-alertident-get-alertident"><primary sortas="idmef_alertident_get_alertident">idmef_alertident_get_alertident</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_alertident_get_alertident     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-set-alertident" role="function">
<title>idmef_alertident_set_alertident ()</title>
<indexterm zone="idmef-alertident-set-alertident"><primary sortas="idmef_alertident_set_alertident">idmef_alertident_set_alertident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alertident_set_alertident     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *alertident);</programlisting>
<para>
Set <parameter>alertident</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>alertident</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>alertident</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alertident</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-new-alertident" role="function">
<title>idmef_alertident_new_alertident ()</title>
<indexterm zone="idmef-alertident-new-alertident"><primary sortas="idmef_alertident_new_alertident">idmef_alertident_new_alertident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alertident_new_alertident     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new alertident object, children of <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-get-analyzerid" role="function">
<title>idmef_alertident_get_analyzerid ()</title>
<indexterm zone="idmef-alertident-get-analyzerid"><primary sortas="idmef_alertident_get_analyzerid">idmef_alertident_get_analyzerid</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_alertident_get_analyzerid     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-set-analyzerid" role="function">
<title>idmef_alertident_set_analyzerid ()</title>
<indexterm zone="idmef-alertident-set-analyzerid"><primary sortas="idmef_alertident_set_analyzerid">idmef_alertident_set_analyzerid</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alertident_set_analyzerid     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *analyzerid);</programlisting>
<para>
Set <parameter>analyzerid</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>analyzerid</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>analyzerid</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analyzerid</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-new-analyzerid" role="function">
<title>idmef_alertident_new_analyzerid ()</title>
<indexterm zone="idmef-alertident-new-analyzerid"><primary sortas="idmef_alertident_new_analyzerid">idmef_alertident_new_analyzerid</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alertident_new_analyzerid     (<link linkend="idmef-alertident-t">idmef_alertident_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new analyzerid object, children of <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-severity-t" role="enum">
<title>enum idmef_impact_severity_t</title>
<indexterm zone="idmef-impact-severity-t"><primary sortas="idmef_impact_severity_t">idmef_impact_severity_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_IMPACT_SEVERITY_ERROR = -1,
        IDMEF_IMPACT_SEVERITY_INFO = 1,
        IDMEF_IMPACT_SEVERITY_LOW = 2,
        IDMEF_IMPACT_SEVERITY_MEDIUM = 3,
        IDMEF_IMPACT_SEVERITY_HIGH = 4
} idmef_impact_severity_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-impact-severity-to-numeric" role="function">
<title>idmef_impact_severity_to_numeric ()</title>
<indexterm zone="idmef-impact-severity-to-numeric"><primary sortas="idmef_impact_severity_to_numeric">idmef_impact_severity_to_numeric</primary></indexterm><programlisting><link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link>  idmef_impact_severity_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-impact-severity-t"><type>idmef_impact_severity_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-severity-to-string" role="function">
<title>idmef_impact_severity_to_string ()</title>
<indexterm zone="idmef-impact-severity-to-string"><primary sortas="idmef_impact_severity_to_string">idmef_impact_severity_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_impact_severity_to_string     (<link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-impact-severity-t"><type>idmef_impact_severity_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-impact-severity-t"><type>idmef_impact_severity_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-completion-t" role="enum">
<title>enum idmef_impact_completion_t</title>
<indexterm zone="idmef-impact-completion-t"><primary sortas="idmef_impact_completion_t">idmef_impact_completion_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_IMPACT_COMPLETION_ERROR = -1,
        IDMEF_IMPACT_COMPLETION_FAILED = 1,
        IDMEF_IMPACT_COMPLETION_SUCCEEDED = 2
} idmef_impact_completion_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-impact-completion-to-numeric" role="function">
<title>idmef_impact_completion_to_numeric ()</title>
<indexterm zone="idmef-impact-completion-to-numeric"><primary sortas="idmef_impact_completion_to_numeric">idmef_impact_completion_to_numeric</primary></indexterm><programlisting><link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link>  idmef_impact_completion_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-impact-completion-t"><type>idmef_impact_completion_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-completion-to-string" role="function">
<title>idmef_impact_completion_to_string ()</title>
<indexterm zone="idmef-impact-completion-to-string"><primary sortas="idmef_impact_completion_to_string">idmef_impact_completion_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_impact_completion_to_string   (<link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-impact-completion-t"><type>idmef_impact_completion_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-impact-completion-t"><type>idmef_impact_completion_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-type-t" role="enum">
<title>enum idmef_impact_type_t</title>
<indexterm zone="idmef-impact-type-t"><primary sortas="idmef_impact_type_t">idmef_impact_type_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_IMPACT_TYPE_ERROR = -1,
        IDMEF_IMPACT_TYPE_OTHER = 0,
        IDMEF_IMPACT_TYPE_ADMIN = 1,
        IDMEF_IMPACT_TYPE_DOS = 2,
        IDMEF_IMPACT_TYPE_FILE = 3,
        IDMEF_IMPACT_TYPE_RECON = 4,
        IDMEF_IMPACT_TYPE_USER = 5
} idmef_impact_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-impact-type-to-numeric" role="function">
<title>idmef_impact_type_to_numeric ()</title>
<indexterm zone="idmef-impact-type-to-numeric"><primary sortas="idmef_impact_type_to_numeric">idmef_impact_type_to_numeric</primary></indexterm><programlisting><link linkend="idmef-impact-type-t">idmef_impact_type_t</link>  idmef_impact_type_to_numeric       (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-impact-type-t"><type>idmef_impact_type_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-type-to-string" role="function">
<title>idmef_impact_type_to_string ()</title>
<indexterm zone="idmef-impact-type-to-string"><primary sortas="idmef_impact_type_to_string">idmef_impact_type_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_impact_type_to_string         (<link linkend="idmef-impact-type-t">idmef_impact_type_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-impact-type-t"><type>idmef_impact_type_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-impact-type-t"><type>idmef_impact_type_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-t" role="typedef">
<title>idmef_impact_t</title>
<indexterm zone="idmef-impact-t"><primary sortas="idmef_impact_t">idmef_impact_t</primary></indexterm><programlisting>typedef struct idmef_impact idmef_impact_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-impact-new" role="function">
<title>idmef_impact_new ()</title>
<indexterm zone="idmef-impact-new"><primary sortas="idmef_impact_new">idmef_impact_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_new                    (<link linkend="idmef-impact-t">idmef_impact_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-copy" role="function">
<title>idmef_impact_copy ()</title>
<indexterm zone="idmef-impact-copy"><primary sortas="idmef_impact_copy">idmef_impact_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_copy                   (const <link linkend="idmef-impact-t">idmef_impact_t</link> *src,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-clone" role="function">
<title>idmef_impact_clone ()</title>
<indexterm zone="idmef-impact-clone"><primary sortas="idmef_impact_clone">idmef_impact_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_clone                  (<link linkend="idmef-impact-t">idmef_impact_t</link> *src,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-ref" role="function">
<title>idmef_impact_ref ()</title>
<indexterm zone="idmef-impact-ref"><primary sortas="idmef_impact_ref">idmef_impact_ref</primary></indexterm><programlisting><link linkend="idmef-impact-t">idmef_impact_t</link> *    idmef_impact_ref                    (<link linkend="idmef-impact-t">idmef_impact_t</link> *impact);</programlisting>
<para>
Increase <parameter>impact</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>impact</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>impact</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-destroy" role="function">
<title>idmef_impact_destroy ()</title>
<indexterm zone="idmef-impact-destroy"><primary sortas="idmef_impact_destroy">idmef_impact_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_impact_destroy                (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-unset-severity" role="function">
<title>idmef_impact_unset_severity ()</title>
<indexterm zone="idmef-impact-unset-severity"><primary sortas="idmef_impact_unset_severity">idmef_impact_unset_severity</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_impact_unset_severity         (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-get-severity" role="function">
<title>idmef_impact_get_severity ()</title>
<indexterm zone="idmef-impact-get-severity"><primary sortas="idmef_impact_get_severity">idmef_impact_get_severity</primary></indexterm><programlisting><link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> * idmef_impact_get_severity     (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-set-severity" role="function">
<title>idmef_impact_set_severity ()</title>
<indexterm zone="idmef-impact-set-severity"><primary sortas="idmef_impact_set_severity">idmef_impact_set_severity</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_impact_set_severity           (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> severity);</programlisting>
<para>
Set <parameter>severity</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>severity</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>severity</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>severity</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-severity-t"><type>idmef_impact_severity_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-new-severity" role="function">
<title>idmef_impact_new_severity ()</title>
<indexterm zone="idmef-impact-new-severity"><primary sortas="idmef_impact_new_severity">idmef_impact_new_severity</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_new_severity           (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-severity-t">idmef_impact_severity_t</link> **ret);</programlisting>
<para>
Create a new severity object, children of <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-impact-severity-t"><type>idmef_impact_severity_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-impact-severity-t"><type>idmef_impact_severity_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-unset-completion" role="function">
<title>idmef_impact_unset_completion ()</title>
<indexterm zone="idmef-impact-unset-completion"><primary sortas="idmef_impact_unset_completion">idmef_impact_unset_completion</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_impact_unset_completion       (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-get-completion" role="function">
<title>idmef_impact_get_completion ()</title>
<indexterm zone="idmef-impact-get-completion"><primary sortas="idmef_impact_get_completion">idmef_impact_get_completion</primary></indexterm><programlisting><link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> * idmef_impact_get_completion (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-set-completion" role="function">
<title>idmef_impact_set_completion ()</title>
<indexterm zone="idmef-impact-set-completion"><primary sortas="idmef_impact_set_completion">idmef_impact_set_completion</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_impact_set_completion         (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> completion);</programlisting>
<para>
Set <parameter>completion</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>completion</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>completion</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>completion</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-completion-t"><type>idmef_impact_completion_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-new-completion" role="function">
<title>idmef_impact_new_completion ()</title>
<indexterm zone="idmef-impact-new-completion"><primary sortas="idmef_impact_new_completion">idmef_impact_new_completion</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_new_completion         (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-completion-t">idmef_impact_completion_t</link> **ret);</programlisting>
<para>
Create a new completion object, children of <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-impact-completion-t"><type>idmef_impact_completion_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-impact-completion-t"><type>idmef_impact_completion_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-get-type" role="function">
<title>idmef_impact_get_type ()</title>
<indexterm zone="idmef-impact-get-type"><primary sortas="idmef_impact_get_type">idmef_impact_get_type</primary></indexterm><programlisting><link linkend="idmef-impact-type-t">idmef_impact_type_t</link>  idmef_impact_get_type              (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);</programlisting>
<para>
Get type children of the <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_impact_type_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-set-type" role="function">
<title>idmef_impact_set_type ()</title>
<indexterm zone="idmef-impact-set-type"><primary sortas="idmef_impact_set_type">idmef_impact_set_type</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_impact_set_type               (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-type-t">idmef_impact_type_t</link> type);</programlisting>
<para>
Set <parameter>type</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>type</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>type</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-type-t"><type>idmef_impact_type_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-new-type" role="function">
<title>idmef_impact_new_type ()</title>
<indexterm zone="idmef-impact-new-type"><primary sortas="idmef_impact_new_type">idmef_impact_new_type</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_new_type               (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="idmef-impact-type-t">idmef_impact_type_t</link> **ret);</programlisting>
<para>
Create a new type object, children of <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-impact-type-t"><type>idmef_impact_type_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-impact-type-t"><type>idmef_impact_type_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-get-description" role="function">
<title>idmef_impact_get_description ()</title>
<indexterm zone="idmef-impact-get-description"><primary sortas="idmef_impact_get_description">idmef_impact_get_description</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_impact_get_description        (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-set-description" role="function">
<title>idmef_impact_set_description ()</title>
<indexterm zone="idmef-impact-set-description"><primary sortas="idmef_impact_set_description">idmef_impact_set_description</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_impact_set_description        (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *description);</programlisting>
<para>
Set <parameter>description</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>description</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>description</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>description</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-new-description" role="function">
<title>idmef_impact_new_description ()</title>
<indexterm zone="idmef-impact-new-description"><primary sortas="idmef_impact_new_description">idmef_impact_new_description</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_new_description        (<link linkend="idmef-impact-t">idmef_impact_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new description object, children of <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-category-t" role="enum">
<title>enum idmef_action_category_t</title>
<indexterm zone="idmef-action-category-t"><primary sortas="idmef_action_category_t">idmef_action_category_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_ACTION_CATEGORY_ERROR = -1,
        IDMEF_ACTION_CATEGORY_OTHER = 0,
        IDMEF_ACTION_CATEGORY_BLOCK_INSTALLED = 1,
        IDMEF_ACTION_CATEGORY_NOTIFICATION_SENT = 2,
        IDMEF_ACTION_CATEGORY_TAKEN_OFFLINE = 3
} idmef_action_category_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-action-category-to-numeric" role="function">
<title>idmef_action_category_to_numeric ()</title>
<indexterm zone="idmef-action-category-to-numeric"><primary sortas="idmef_action_category_to_numeric">idmef_action_category_to_numeric</primary></indexterm><programlisting><link linkend="idmef-action-category-t">idmef_action_category_t</link>  idmef_action_category_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-action-category-t"><type>idmef_action_category_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-category-to-string" role="function">
<title>idmef_action_category_to_string ()</title>
<indexterm zone="idmef-action-category-to-string"><primary sortas="idmef_action_category_to_string">idmef_action_category_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_action_category_to_string     (<link linkend="idmef-action-category-t">idmef_action_category_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-action-category-t"><type>idmef_action_category_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-action-category-t"><type>idmef_action_category_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-t" role="typedef">
<title>idmef_action_t</title>
<indexterm zone="idmef-action-t"><primary sortas="idmef_action_t">idmef_action_t</primary></indexterm><programlisting>typedef struct idmef_action idmef_action_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-action-new" role="function">
<title>idmef_action_new ()</title>
<indexterm zone="idmef-action-new"><primary sortas="idmef_action_new">idmef_action_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_action_new                    (<link linkend="idmef-action-t">idmef_action_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-copy" role="function">
<title>idmef_action_copy ()</title>
<indexterm zone="idmef-action-copy"><primary sortas="idmef_action_copy">idmef_action_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_action_copy                   (const <link linkend="idmef-action-t">idmef_action_t</link> *src,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-clone" role="function">
<title>idmef_action_clone ()</title>
<indexterm zone="idmef-action-clone"><primary sortas="idmef_action_clone">idmef_action_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_action_clone                  (<link linkend="idmef-action-t">idmef_action_t</link> *src,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-ref" role="function">
<title>idmef_action_ref ()</title>
<indexterm zone="idmef-action-ref"><primary sortas="idmef_action_ref">idmef_action_ref</primary></indexterm><programlisting><link linkend="idmef-action-t">idmef_action_t</link> *    idmef_action_ref                    (<link linkend="idmef-action-t">idmef_action_t</link> *action);</programlisting>
<para>
Increase <parameter>action</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>action</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>action</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-destroy" role="function">
<title>idmef_action_destroy ()</title>
<indexterm zone="idmef-action-destroy"><primary sortas="idmef_action_destroy">idmef_action_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_action_destroy                (<link linkend="idmef-action-t">idmef_action_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-get-category" role="function">
<title>idmef_action_get_category ()</title>
<indexterm zone="idmef-action-get-category"><primary sortas="idmef_action_get_category">idmef_action_get_category</primary></indexterm><programlisting><link linkend="idmef-action-category-t">idmef_action_category_t</link>  idmef_action_get_category      (<link linkend="idmef-action-t">idmef_action_t</link> *ptr);</programlisting>
<para>
Get category children of the <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_action_category_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-set-category" role="function">
<title>idmef_action_set_category ()</title>
<indexterm zone="idmef-action-set-category"><primary sortas="idmef_action_set_category">idmef_action_set_category</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_action_set_category           (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="idmef-action-category-t">idmef_action_category_t</link> category);</programlisting>
<para>
Set <parameter>category</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>category</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>category</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-category-t"><type>idmef_action_category_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-new-category" role="function">
<title>idmef_action_new_category ()</title>
<indexterm zone="idmef-action-new-category"><primary sortas="idmef_action_new_category">idmef_action_new_category</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_action_new_category           (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="idmef-action-category-t">idmef_action_category_t</link> **ret);</programlisting>
<para>
Create a new category object, children of <link linkend="idmef-action-t"><type>idmef_action_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-action-category-t"><type>idmef_action_category_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-action-category-t"><type>idmef_action_category_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-get-description" role="function">
<title>idmef_action_get_description ()</title>
<indexterm zone="idmef-action-get-description"><primary sortas="idmef_action_get_description">idmef_action_get_description</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_action_get_description        (<link linkend="idmef-action-t">idmef_action_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-set-description" role="function">
<title>idmef_action_set_description ()</title>
<indexterm zone="idmef-action-set-description"><primary sortas="idmef_action_set_description">idmef_action_set_description</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_action_set_description        (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *description);</programlisting>
<para>
Set <parameter>description</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>description</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>description</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>description</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-new-description" role="function">
<title>idmef_action_new_description ()</title>
<indexterm zone="idmef-action-new-description"><primary sortas="idmef_action_new_description">idmef_action_new_description</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_action_new_description        (<link linkend="idmef-action-t">idmef_action_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new description object, children of <link linkend="idmef-action-t"><type>idmef_action_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-rating-t" role="enum">
<title>enum idmef_confidence_rating_t</title>
<indexterm zone="idmef-confidence-rating-t"><primary sortas="idmef_confidence_rating_t">idmef_confidence_rating_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_CONFIDENCE_RATING_ERROR = -1,
        IDMEF_CONFIDENCE_RATING_NUMERIC = 0,
        IDMEF_CONFIDENCE_RATING_LOW = 1,
        IDMEF_CONFIDENCE_RATING_MEDIUM = 2,
        IDMEF_CONFIDENCE_RATING_HIGH = 3
} idmef_confidence_rating_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-confidence-rating-to-numeric" role="function">
<title>idmef_confidence_rating_to_numeric ()</title>
<indexterm zone="idmef-confidence-rating-to-numeric"><primary sortas="idmef_confidence_rating_to_numeric">idmef_confidence_rating_to_numeric</primary></indexterm><programlisting><link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link>  idmef_confidence_rating_to_numeric
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-confidence-rating-t"><type>idmef_confidence_rating_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-rating-to-string" role="function">
<title>idmef_confidence_rating_to_string ()</title>
<indexterm zone="idmef-confidence-rating-to-string"><primary sortas="idmef_confidence_rating_to_string">idmef_confidence_rating_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_confidence_rating_to_string   (<link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-confidence-rating-t"><type>idmef_confidence_rating_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-confidence-rating-t"><type>idmef_confidence_rating_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-t" role="typedef">
<title>idmef_confidence_t</title>
<indexterm zone="idmef-confidence-t"><primary sortas="idmef_confidence_t">idmef_confidence_t</primary></indexterm><programlisting>typedef struct idmef_confidence idmef_confidence_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-confidence-new" role="function">
<title>idmef_confidence_new ()</title>
<indexterm zone="idmef-confidence-new"><primary sortas="idmef_confidence_new">idmef_confidence_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_confidence_new                (<link linkend="idmef-confidence-t">idmef_confidence_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-copy" role="function">
<title>idmef_confidence_copy ()</title>
<indexterm zone="idmef-confidence-copy"><primary sortas="idmef_confidence_copy">idmef_confidence_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_confidence_copy               (const <link linkend="idmef-confidence-t">idmef_confidence_t</link> *src,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-clone" role="function">
<title>idmef_confidence_clone ()</title>
<indexterm zone="idmef-confidence-clone"><primary sortas="idmef_confidence_clone">idmef_confidence_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_confidence_clone              (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *src,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-ref" role="function">
<title>idmef_confidence_ref ()</title>
<indexterm zone="idmef-confidence-ref"><primary sortas="idmef_confidence_ref">idmef_confidence_ref</primary></indexterm><programlisting><link linkend="idmef-confidence-t">idmef_confidence_t</link> * idmef_confidence_ref               (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *confidence);</programlisting>
<para>
Increase <parameter>confidence</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>confidence</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>confidence</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-destroy" role="function">
<title>idmef_confidence_destroy ()</title>
<indexterm zone="idmef-confidence-destroy"><primary sortas="idmef_confidence_destroy">idmef_confidence_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_confidence_destroy            (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-get-rating" role="function">
<title>idmef_confidence_get_rating ()</title>
<indexterm zone="idmef-confidence-get-rating"><primary sortas="idmef_confidence_get_rating">idmef_confidence_get_rating</primary></indexterm><programlisting><link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link>  idmef_confidence_get_rating  (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr);</programlisting>
<para>
Get rating children of the <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a idmef_confidence_rating_t object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-set-rating" role="function">
<title>idmef_confidence_set_rating ()</title>
<indexterm zone="idmef-confidence-set-rating"><primary sortas="idmef_confidence_set_rating">idmef_confidence_set_rating</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_confidence_set_rating         (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link> rating);</programlisting>
<para>
Set <parameter>rating</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>rating</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>rating</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rating</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-rating-t"><type>idmef_confidence_rating_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-new-rating" role="function">
<title>idmef_confidence_new_rating ()</title>
<indexterm zone="idmef-confidence-new-rating"><primary sortas="idmef_confidence_new_rating">idmef_confidence_new_rating</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_confidence_new_rating         (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="idmef-confidence-rating-t">idmef_confidence_rating_t</link> **ret);</programlisting>
<para>
Create a new rating object, children of <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-confidence-rating-t"><type>idmef_confidence_rating_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-confidence-rating-t"><type>idmef_confidence_rating_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-get-confidence" role="function">
<title>idmef_confidence_get_confidence ()</title>
<indexterm zone="idmef-confidence-get-confidence"><primary sortas="idmef_confidence_get_confidence">idmef_confidence_get_confidence</primary></indexterm><programlisting><link linkend="float">float</link>               idmef_confidence_get_confidence     (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr);</programlisting>
<para>
Get confidence children of the <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a float object, or NULL if the children object is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-set-confidence" role="function">
<title>idmef_confidence_set_confidence ()</title>
<indexterm zone="idmef-confidence-set-confidence"><primary sortas="idmef_confidence_set_confidence">idmef_confidence_set_confidence</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_confidence_set_confidence     (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="float">float</link> confidence);</programlisting>
<para>
Set <parameter>confidence</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>confidence</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>confidence</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>confidence</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="float"><type>float</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-new-confidence" role="function">
<title>idmef_confidence_new_confidence ()</title>
<indexterm zone="idmef-confidence-new-confidence"><primary sortas="idmef_confidence_new_confidence">idmef_confidence_new_confidence</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_confidence_new_confidence     (<link linkend="idmef-confidence-t">idmef_confidence_t</link> *ptr,
                                                         <link linkend="float">float</link> **ret);</programlisting>
<para>
Create a new confidence object, children of <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="float"><type>float</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="float"><type>float</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-t" role="typedef">
<title>idmef_assessment_t</title>
<indexterm zone="idmef-assessment-t"><primary sortas="idmef_assessment_t">idmef_assessment_t</primary></indexterm><programlisting>typedef struct idmef_assessment idmef_assessment_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-assessment-new" role="function">
<title>idmef_assessment_new ()</title>
<indexterm zone="idmef-assessment-new"><primary sortas="idmef_assessment_new">idmef_assessment_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_assessment_new                (<link linkend="idmef-assessment-t">idmef_assessment_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-copy" role="function">
<title>idmef_assessment_copy ()</title>
<indexterm zone="idmef-assessment-copy"><primary sortas="idmef_assessment_copy">idmef_assessment_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_assessment_copy               (const <link linkend="idmef-assessment-t">idmef_assessment_t</link> *src,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-clone" role="function">
<title>idmef_assessment_clone ()</title>
<indexterm zone="idmef-assessment-clone"><primary sortas="idmef_assessment_clone">idmef_assessment_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_assessment_clone              (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *src,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-ref" role="function">
<title>idmef_assessment_ref ()</title>
<indexterm zone="idmef-assessment-ref"><primary sortas="idmef_assessment_ref">idmef_assessment_ref</primary></indexterm><programlisting><link linkend="idmef-assessment-t">idmef_assessment_t</link> * idmef_assessment_ref               (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *assessment);</programlisting>
<para>
Increase <parameter>assessment</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>assessment</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>assessment</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-destroy" role="function">
<title>idmef_assessment_destroy ()</title>
<indexterm zone="idmef-assessment-destroy"><primary sortas="idmef_assessment_destroy">idmef_assessment_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_assessment_destroy            (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-get-impact" role="function">
<title>idmef_assessment_get_impact ()</title>
<indexterm zone="idmef-assessment-get-impact"><primary sortas="idmef_assessment_get_impact">idmef_assessment_get_impact</primary></indexterm><programlisting><link linkend="idmef-impact-t">idmef_impact_t</link> *    idmef_assessment_get_impact         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-set-impact" role="function">
<title>idmef_assessment_set_impact ()</title>
<indexterm zone="idmef-assessment-set-impact"><primary sortas="idmef_assessment_set_impact">idmef_assessment_set_impact</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_assessment_set_impact         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> *impact);</programlisting>
<para>
Set <parameter>impact</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>impact</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>impact</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impact</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-new-impact" role="function">
<title>idmef_assessment_new_impact ()</title>
<indexterm zone="idmef-assessment-new-impact"><primary sortas="idmef_assessment_new_impact">idmef_assessment_new_impact</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_assessment_new_impact         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-impact-t">idmef_impact_t</link> **ret);</programlisting>
<para>
Create a new impact object, children of <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-impact-t"><type>idmef_impact_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-get-next-action" role="function">
<title>idmef_assessment_get_next_action ()</title>
<indexterm zone="idmef-assessment-get-next-action"><primary sortas="idmef_assessment_get_next_action">idmef_assessment_get_next_action</primary></indexterm><programlisting><link linkend="idmef-action-t">idmef_action_t</link> *    idmef_assessment_get_next_action    (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *assessment,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> *action_cur);</programlisting>
<para>
Get the next <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_action_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>assessment</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-action-t"><type>idmef_action_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-set-action" role="function">
<title>idmef_assessment_set_action ()</title>
<indexterm zone="idmef-assessment-set-action"><primary sortas="idmef_assessment_set_action">idmef_assessment_set_action</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_assessment_set_action         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-new-action" role="function">
<title>idmef_assessment_new_action ()</title>
<indexterm zone="idmef-assessment-new-action"><primary sortas="idmef_assessment_new_action">idmef_assessment_new_action</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_assessment_new_action         (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-action-t">idmef_action_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-action-t"><type>idmef_action_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object. The created <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-action-t"><type>idmef_action_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-get-confidence" role="function">
<title>idmef_assessment_get_confidence ()</title>
<indexterm zone="idmef-assessment-get-confidence"><primary sortas="idmef_assessment_get_confidence">idmef_assessment_get_confidence</primary></indexterm><programlisting><link linkend="idmef-confidence-t">idmef_confidence_t</link> * idmef_assessment_get_confidence    (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-set-confidence" role="function">
<title>idmef_assessment_set_confidence ()</title>
<indexterm zone="idmef-assessment-set-confidence"><primary sortas="idmef_assessment_set_confidence">idmef_assessment_set_confidence</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_assessment_set_confidence     (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> *confidence);</programlisting>
<para>
Set <parameter>confidence</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>confidence</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>confidence</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>confidence</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-new-confidence" role="function">
<title>idmef_assessment_new_confidence ()</title>
<indexterm zone="idmef-assessment-new-confidence"><primary sortas="idmef_assessment_new_confidence">idmef_assessment_new_confidence</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_assessment_new_confidence     (<link linkend="idmef-assessment-t">idmef_assessment_t</link> *ptr,
                                                         <link linkend="idmef-confidence-t">idmef_confidence_t</link> **ret);</programlisting>
<para>
Create a new confidence object, children of <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-confidence-t"><type>idmef_confidence_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-t" role="typedef">
<title>idmef_tool_alert_t</title>
<indexterm zone="idmef-tool-alert-t"><primary sortas="idmef_tool_alert_t">idmef_tool_alert_t</primary></indexterm><programlisting>typedef struct idmef_tool_alert idmef_tool_alert_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-tool-alert-new" role="function">
<title>idmef_tool_alert_new ()</title>
<indexterm zone="idmef-tool-alert-new"><primary sortas="idmef_tool_alert_new">idmef_tool_alert_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_tool_alert_new                (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-copy" role="function">
<title>idmef_tool_alert_copy ()</title>
<indexterm zone="idmef-tool-alert-copy"><primary sortas="idmef_tool_alert_copy">idmef_tool_alert_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_tool_alert_copy               (const <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *src,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-clone" role="function">
<title>idmef_tool_alert_clone ()</title>
<indexterm zone="idmef-tool-alert-clone"><primary sortas="idmef_tool_alert_clone">idmef_tool_alert_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_tool_alert_clone              (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *src,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-ref" role="function">
<title>idmef_tool_alert_ref ()</title>
<indexterm zone="idmef-tool-alert-ref"><primary sortas="idmef_tool_alert_ref">idmef_tool_alert_ref</primary></indexterm><programlisting><link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> * idmef_tool_alert_ref               (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *tool_alert);</programlisting>
<para>
Increase <parameter>tool_alert</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tool_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>tool_alert</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-destroy" role="function">
<title>idmef_tool_alert_destroy ()</title>
<indexterm zone="idmef-tool-alert-destroy"><primary sortas="idmef_tool_alert_destroy">idmef_tool_alert_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_tool_alert_destroy            (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-get-name" role="function">
<title>idmef_tool_alert_get_name ()</title>
<indexterm zone="idmef-tool-alert-get-name"><primary sortas="idmef_tool_alert_get_name">idmef_tool_alert_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_tool_alert_get_name           (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-set-name" role="function">
<title>idmef_tool_alert_set_name ()</title>
<indexterm zone="idmef-tool-alert-set-name"><primary sortas="idmef_tool_alert_set_name">idmef_tool_alert_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_tool_alert_set_name           (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-new-name" role="function">
<title>idmef_tool_alert_new_name ()</title>
<indexterm zone="idmef-tool-alert-new-name"><primary sortas="idmef_tool_alert_new_name">idmef_tool_alert_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_tool_alert_new_name           (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-get-command" role="function">
<title>idmef_tool_alert_get_command ()</title>
<indexterm zone="idmef-tool-alert-get-command"><primary sortas="idmef_tool_alert_get_command">idmef_tool_alert_get_command</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_tool_alert_get_command        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-set-command" role="function">
<title>idmef_tool_alert_set_command ()</title>
<indexterm zone="idmef-tool-alert-set-command"><primary sortas="idmef_tool_alert_set_command">idmef_tool_alert_set_command</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_tool_alert_set_command        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *command);</programlisting>
<para>
Set <parameter>command</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>command</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>command</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>command</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-new-command" role="function">
<title>idmef_tool_alert_new_command ()</title>
<indexterm zone="idmef-tool-alert-new-command"><primary sortas="idmef_tool_alert_new_command">idmef_tool_alert_new_command</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_tool_alert_new_command        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new command object, children of <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-get-next-alertident" role="function">
<title>idmef_tool_alert_get_next_alertident ()</title>
<indexterm zone="idmef-tool-alert-get-next-alertident"><primary sortas="idmef_tool_alert_get_next_alertident">idmef_tool_alert_get_next_alertident</primary></indexterm><programlisting><link linkend="idmef-alertident-t">idmef_alertident_t</link> * idmef_tool_alert_get_next_alertident
                                                        (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *tool_alert,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *alertident_cur);</programlisting>
<para>
Get the next <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_alertident_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tool_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alertident_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-set-alertident" role="function">
<title>idmef_tool_alert_set_alertident ()</title>
<indexterm zone="idmef-tool-alert-set-alertident"><primary sortas="idmef_tool_alert_set_alertident">idmef_tool_alert_set_alertident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_tool_alert_set_alertident     (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-new-alertident" role="function">
<title>idmef_tool_alert_new_alertident ()</title>
<indexterm zone="idmef-tool-alert-new-alertident"><primary sortas="idmef_tool_alert_new_alertident">idmef_tool_alert_new_alertident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_tool_alert_new_alertident     (<link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object. The created <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-t" role="typedef">
<title>idmef_correlation_alert_t</title>
<indexterm zone="idmef-correlation-alert-t"><primary sortas="idmef_correlation_alert_t">idmef_correlation_alert_t</primary></indexterm><programlisting>typedef struct idmef_correlation_alert idmef_correlation_alert_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-correlation-alert-new" role="function">
<title>idmef_correlation_alert_new ()</title>
<indexterm zone="idmef-correlation-alert-new"><primary sortas="idmef_correlation_alert_new">idmef_correlation_alert_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_correlation_alert_new         (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-copy" role="function">
<title>idmef_correlation_alert_copy ()</title>
<indexterm zone="idmef-correlation-alert-copy"><primary sortas="idmef_correlation_alert_copy">idmef_correlation_alert_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_correlation_alert_copy        (const <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *src,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-clone" role="function">
<title>idmef_correlation_alert_clone ()</title>
<indexterm zone="idmef-correlation-alert-clone"><primary sortas="idmef_correlation_alert_clone">idmef_correlation_alert_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_correlation_alert_clone       (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *src,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-ref" role="function">
<title>idmef_correlation_alert_ref ()</title>
<indexterm zone="idmef-correlation-alert-ref"><primary sortas="idmef_correlation_alert_ref">idmef_correlation_alert_ref</primary></indexterm><programlisting><link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> * idmef_correlation_alert_ref (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *correlation_alert);</programlisting>
<para>
Increase <parameter>correlation_alert</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>correlation_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>correlation_alert</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-destroy" role="function">
<title>idmef_correlation_alert_destroy ()</title>
<indexterm zone="idmef-correlation-alert-destroy"><primary sortas="idmef_correlation_alert_destroy">idmef_correlation_alert_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_correlation_alert_destroy     (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-get-name" role="function">
<title>idmef_correlation_alert_get_name ()</title>
<indexterm zone="idmef-correlation-alert-get-name"><primary sortas="idmef_correlation_alert_get_name">idmef_correlation_alert_get_name</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_correlation_alert_get_name    (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-set-name" role="function">
<title>idmef_correlation_alert_set_name ()</title>
<indexterm zone="idmef-correlation-alert-set-name"><primary sortas="idmef_correlation_alert_set_name">idmef_correlation_alert_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_correlation_alert_set_name    (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *name);</programlisting>
<para>
Set <parameter>name</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>name</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>name</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-new-name" role="function">
<title>idmef_correlation_alert_new_name ()</title>
<indexterm zone="idmef-correlation-alert-new-name"><primary sortas="idmef_correlation_alert_new_name">idmef_correlation_alert_new_name</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_correlation_alert_new_name    (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new name object, children of <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-get-next-alertident" role="function">
<title>idmef_correlation_alert_get_next_alertident ()</title>
<indexterm zone="idmef-correlation-alert-get-next-alertident"><primary sortas="idmef_correlation_alert_get_next_alertident">idmef_correlation_alert_get_next_alertident</primary></indexterm><programlisting><link linkend="idmef-alertident-t">idmef_alertident_t</link> * idmef_correlation_alert_get_next_alertident
                                                        (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *correlation_alert,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *alertident_cur);</programlisting>
<para>
Get the next <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_alertident_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>correlation_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alertident_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-set-alertident" role="function">
<title>idmef_correlation_alert_set_alertident ()</title>
<indexterm zone="idmef-correlation-alert-set-alertident"><primary sortas="idmef_correlation_alert_set_alertident">idmef_correlation_alert_set_alertident</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_correlation_alert_set_alertident
                                                        (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-new-alertident" role="function">
<title>idmef_correlation_alert_new_alertident ()</title>
<indexterm zone="idmef-correlation-alert-new-alertident"><primary sortas="idmef_correlation_alert_new_alertident">idmef_correlation_alert_new_alertident</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_correlation_alert_new_alertident
                                                        (<link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *ptr,
                                                         <link linkend="idmef-alertident-t">idmef_alertident_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object. The created <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-alertident-t"><type>idmef_alertident_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-t" role="typedef">
<title>idmef_overflow_alert_t</title>
<indexterm zone="idmef-overflow-alert-t"><primary sortas="idmef_overflow_alert_t">idmef_overflow_alert_t</primary></indexterm><programlisting>typedef struct idmef_overflow_alert idmef_overflow_alert_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-overflow-alert-new" role="function">
<title>idmef_overflow_alert_new ()</title>
<indexterm zone="idmef-overflow-alert-new"><primary sortas="idmef_overflow_alert_new">idmef_overflow_alert_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_overflow_alert_new            (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-copy" role="function">
<title>idmef_overflow_alert_copy ()</title>
<indexterm zone="idmef-overflow-alert-copy"><primary sortas="idmef_overflow_alert_copy">idmef_overflow_alert_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_overflow_alert_copy           (const <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *src,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-clone" role="function">
<title>idmef_overflow_alert_clone ()</title>
<indexterm zone="idmef-overflow-alert-clone"><primary sortas="idmef_overflow_alert_clone">idmef_overflow_alert_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_overflow_alert_clone          (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *src,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-ref" role="function">
<title>idmef_overflow_alert_ref ()</title>
<indexterm zone="idmef-overflow-alert-ref"><primary sortas="idmef_overflow_alert_ref">idmef_overflow_alert_ref</primary></indexterm><programlisting><link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> * idmef_overflow_alert_ref       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *overflow_alert);</programlisting>
<para>
Increase <parameter>overflow_alert</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>overflow_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>overflow_alert</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-destroy" role="function">
<title>idmef_overflow_alert_destroy ()</title>
<indexterm zone="idmef-overflow-alert-destroy"><primary sortas="idmef_overflow_alert_destroy">idmef_overflow_alert_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_overflow_alert_destroy        (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-get-program" role="function">
<title>idmef_overflow_alert_get_program ()</title>
<indexterm zone="idmef-overflow-alert-get-program"><primary sortas="idmef_overflow_alert_get_program">idmef_overflow_alert_get_program</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_overflow_alert_get_program    (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-set-program" role="function">
<title>idmef_overflow_alert_set_program ()</title>
<indexterm zone="idmef-overflow-alert-set-program"><primary sortas="idmef_overflow_alert_set_program">idmef_overflow_alert_set_program</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_overflow_alert_set_program    (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *program);</programlisting>
<para>
Set <parameter>program</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>program</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>program</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-new-program" role="function">
<title>idmef_overflow_alert_new_program ()</title>
<indexterm zone="idmef-overflow-alert-new-program"><primary sortas="idmef_overflow_alert_new_program">idmef_overflow_alert_new_program</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_overflow_alert_new_program    (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new program object, children of <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-unset-size" role="function">
<title>idmef_overflow_alert_unset_size ()</title>
<indexterm zone="idmef-overflow-alert-unset-size"><primary sortas="idmef_overflow_alert_unset_size">idmef_overflow_alert_unset_size</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_overflow_alert_unset_size     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-get-size" role="function">
<title>idmef_overflow_alert_get_size ()</title>
<indexterm zone="idmef-overflow-alert-get-size"><primary sortas="idmef_overflow_alert_get_size">idmef_overflow_alert_get_size</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_overflow_alert_get_size       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-set-size" role="function">
<title>idmef_overflow_alert_set_size ()</title>
<indexterm zone="idmef-overflow-alert-set-size"><primary sortas="idmef_overflow_alert_set_size">idmef_overflow_alert_set_size</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_overflow_alert_set_size       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> size);</programlisting>
<para>
Set <parameter>size</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>size</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>size</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-new-size" role="function">
<title>idmef_overflow_alert_new_size ()</title>
<indexterm zone="idmef-overflow-alert-new-size"><primary sortas="idmef_overflow_alert_new_size">idmef_overflow_alert_new_size</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_overflow_alert_new_size       (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new size object, children of <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-get-buffer" role="function">
<title>idmef_overflow_alert_get_buffer ()</title>
<indexterm zone="idmef-overflow-alert-get-buffer"><primary sortas="idmef_overflow_alert_get_buffer">idmef_overflow_alert_get_buffer</primary></indexterm><programlisting><link linkend="idmef-data-t">idmef_data_t</link> *      idmef_overflow_alert_get_buffer     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-set-buffer" role="function">
<title>idmef_overflow_alert_set_buffer ()</title>
<indexterm zone="idmef-overflow-alert-set-buffer"><primary sortas="idmef_overflow_alert_set_buffer">idmef_overflow_alert_set_buffer</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_overflow_alert_set_buffer     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> *buffer);</programlisting>
<para>
Set <parameter>buffer</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>buffer</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>buffer</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-data-t"><type>idmef_data_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-new-buffer" role="function">
<title>idmef_overflow_alert_new_buffer ()</title>
<indexterm zone="idmef-overflow-alert-new-buffer"><primary sortas="idmef_overflow_alert_new_buffer">idmef_overflow_alert_new_buffer</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_overflow_alert_new_buffer     (<link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *ptr,
                                                         <link linkend="idmef-data-t">idmef_data_t</link> **ret);</programlisting>
<para>
Create a new buffer object, children of <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-data-t"><type>idmef_data_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-data-t"><type>idmef_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-type-t" role="enum">
<title>enum idmef_alert_type_t</title>
<indexterm zone="idmef-alert-type-t"><primary sortas="idmef_alert_type_t">idmef_alert_type_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_ALERT_TYPE_ERROR = -1,
        IDMEF_ALERT_TYPE_DEFAULT = 0,
        IDMEF_ALERT_TYPE_TOOL = 1,
        IDMEF_ALERT_TYPE_CORRELATION = 2,
        IDMEF_ALERT_TYPE_OVERFLOW = 3
} idmef_alert_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-alert-type-to-numeric" role="function">
<title>idmef_alert_type_to_numeric ()</title>
<indexterm zone="idmef-alert-type-to-numeric"><primary sortas="idmef_alert_type_to_numeric">idmef_alert_type_to_numeric</primary></indexterm><programlisting><link linkend="idmef-alert-type-t">idmef_alert_type_t</link>  idmef_alert_type_to_numeric         (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-alert-type-t"><type>idmef_alert_type_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-type-to-string" role="function">
<title>idmef_alert_type_to_string ()</title>
<indexterm zone="idmef-alert-type-to-string"><primary sortas="idmef_alert_type_to_string">idmef_alert_type_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_alert_type_to_string          (<link linkend="idmef-alert-type-t">idmef_alert_type_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-alert-type-t"><type>idmef_alert_type_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-alert-type-t"><type>idmef_alert_type_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-t" role="typedef">
<title>idmef_alert_t</title>
<indexterm zone="idmef-alert-t"><primary sortas="idmef_alert_t">idmef_alert_t</primary></indexterm><programlisting>typedef struct idmef_alert idmef_alert_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-alert-new" role="function">
<title>idmef_alert_new ()</title>
<indexterm zone="idmef-alert-new"><primary sortas="idmef_alert_new">idmef_alert_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new                     (<link linkend="idmef-alert-t">idmef_alert_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-copy" role="function">
<title>idmef_alert_copy ()</title>
<indexterm zone="idmef-alert-copy"><primary sortas="idmef_alert_copy">idmef_alert_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_copy                    (const <link linkend="idmef-alert-t">idmef_alert_t</link> *src,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-clone" role="function">
<title>idmef_alert_clone ()</title>
<indexterm zone="idmef-alert-clone"><primary sortas="idmef_alert_clone">idmef_alert_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_clone                   (<link linkend="idmef-alert-t">idmef_alert_t</link> *src,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-ref" role="function">
<title>idmef_alert_ref ()</title>
<indexterm zone="idmef-alert-ref"><primary sortas="idmef_alert_ref">idmef_alert_ref</primary></indexterm><programlisting><link linkend="idmef-alert-t">idmef_alert_t</link> *     idmef_alert_ref                     (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert);</programlisting>
<para>
Increase <parameter>alert</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>alert</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-destroy" role="function">
<title>idmef_alert_destroy ()</title>
<indexterm zone="idmef-alert-destroy"><primary sortas="idmef_alert_destroy">idmef_alert_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_destroy                 (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-messageid" role="function">
<title>idmef_alert_get_messageid ()</title>
<indexterm zone="idmef-alert-get-messageid"><primary sortas="idmef_alert_get_messageid">idmef_alert_get_messageid</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_alert_get_messageid           (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-messageid" role="function">
<title>idmef_alert_set_messageid ()</title>
<indexterm zone="idmef-alert-set-messageid"><primary sortas="idmef_alert_set_messageid">idmef_alert_set_messageid</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_messageid           (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *messageid);</programlisting>
<para>
Set <parameter>messageid</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>messageid</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>messageid</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>messageid</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-messageid" role="function">
<title>idmef_alert_new_messageid ()</title>
<indexterm zone="idmef-alert-new-messageid"><primary sortas="idmef_alert_new_messageid">idmef_alert_new_messageid</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_messageid           (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new messageid object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-next-analyzer" role="function">
<title>idmef_alert_get_next_analyzer ()</title>
<indexterm zone="idmef-alert-get-next-analyzer"><primary sortas="idmef_alert_get_next_analyzer">idmef_alert_get_next_analyzer</primary></indexterm><programlisting><link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *  idmef_alert_get_next_analyzer       (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *analyzer_cur);</programlisting>
<para>
Get the next <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_analyzer_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analyzer_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-analyzer" role="function">
<title>idmef_alert_set_analyzer ()</title>
<indexterm zone="idmef-alert-set-analyzer"><primary sortas="idmef_alert_set_analyzer">idmef_alert_set_analyzer</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_analyzer            (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-analyzer" role="function">
<title>idmef_alert_new_analyzer ()</title>
<indexterm zone="idmef-alert-new-analyzer"><primary sortas="idmef_alert_new_analyzer">idmef_alert_new_analyzer</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_analyzer            (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object. The created <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-create-time" role="function">
<title>idmef_alert_get_create_time ()</title>
<indexterm zone="idmef-alert-get-create-time"><primary sortas="idmef_alert_get_create_time">idmef_alert_get_create_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_alert_get_create_time         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-create-time" role="function">
<title>idmef_alert_set_create_time ()</title>
<indexterm zone="idmef-alert-set-create-time"><primary sortas="idmef_alert_set_create_time">idmef_alert_set_create_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_create_time         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *create_time);</programlisting>
<para>
Set <parameter>create_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>create_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>create_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>create_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-create-time" role="function">
<title>idmef_alert_new_create_time ()</title>
<indexterm zone="idmef-alert-new-create-time"><primary sortas="idmef_alert_new_create_time">idmef_alert_new_create_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_create_time         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new create_time object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-classification" role="function">
<title>idmef_alert_get_classification ()</title>
<indexterm zone="idmef-alert-get-classification"><primary sortas="idmef_alert_get_classification">idmef_alert_get_classification</primary></indexterm><programlisting><link linkend="idmef-classification-t">idmef_classification_t</link> * idmef_alert_get_classification (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-classification" role="function">
<title>idmef_alert_set_classification ()</title>
<indexterm zone="idmef-alert-set-classification"><primary sortas="idmef_alert_set_classification">idmef_alert_set_classification</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_classification      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> *classification);</programlisting>
<para>
Set <parameter>classification</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>classification</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>classification</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>classification</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-classification" role="function">
<title>idmef_alert_new_classification ()</title>
<indexterm zone="idmef-alert-new-classification"><primary sortas="idmef_alert_new_classification">idmef_alert_new_classification</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_classification      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-classification-t">idmef_classification_t</link> **ret);</programlisting>
<para>
Create a new classification object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-classification-t"><type>idmef_classification_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-detect-time" role="function">
<title>idmef_alert_get_detect_time ()</title>
<indexterm zone="idmef-alert-get-detect-time"><primary sortas="idmef_alert_get_detect_time">idmef_alert_get_detect_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_alert_get_detect_time         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-detect-time" role="function">
<title>idmef_alert_set_detect_time ()</title>
<indexterm zone="idmef-alert-set-detect-time"><primary sortas="idmef_alert_set_detect_time">idmef_alert_set_detect_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_detect_time         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *detect_time);</programlisting>
<para>
Set <parameter>detect_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>detect_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>detect_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>detect_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-detect-time" role="function">
<title>idmef_alert_new_detect_time ()</title>
<indexterm zone="idmef-alert-new-detect-time"><primary sortas="idmef_alert_new_detect_time">idmef_alert_new_detect_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_detect_time         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new detect_time object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-analyzer-time" role="function">
<title>idmef_alert_get_analyzer_time ()</title>
<indexterm zone="idmef-alert-get-analyzer-time"><primary sortas="idmef_alert_get_analyzer_time">idmef_alert_get_analyzer_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_alert_get_analyzer_time       (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-analyzer-time" role="function">
<title>idmef_alert_set_analyzer_time ()</title>
<indexterm zone="idmef-alert-set-analyzer-time"><primary sortas="idmef_alert_set_analyzer_time">idmef_alert_set_analyzer_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_analyzer_time       (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *analyzer_time);</programlisting>
<para>
Set <parameter>analyzer_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>analyzer_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>analyzer_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analyzer_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-analyzer-time" role="function">
<title>idmef_alert_new_analyzer_time ()</title>
<indexterm zone="idmef-alert-new-analyzer-time"><primary sortas="idmef_alert_new_analyzer_time">idmef_alert_new_analyzer_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_analyzer_time       (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new analyzer_time object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-next-source" role="function">
<title>idmef_alert_get_next_source ()</title>
<indexterm zone="idmef-alert-get-next-source"><primary sortas="idmef_alert_get_next_source">idmef_alert_get_next_source</primary></indexterm><programlisting><link linkend="idmef-source-t">idmef_source_t</link> *    idmef_alert_get_next_source         (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> *source_cur);</programlisting>
<para>
Get the next <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_source_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>source_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-source-t"><type>idmef_source_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-source" role="function">
<title>idmef_alert_set_source ()</title>
<indexterm zone="idmef-alert-set-source"><primary sortas="idmef_alert_set_source">idmef_alert_set_source</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_source              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-source" role="function">
<title>idmef_alert_new_source ()</title>
<indexterm zone="idmef-alert-new-source"><primary sortas="idmef_alert_new_source">idmef_alert_new_source</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_source              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-source-t">idmef_source_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-source-t"><type>idmef_source_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object. The created <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-source-t"><type>idmef_source_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-next-target" role="function">
<title>idmef_alert_get_next_target ()</title>
<indexterm zone="idmef-alert-get-next-target"><primary sortas="idmef_alert_get_next_target">idmef_alert_get_next_target</primary></indexterm><programlisting><link linkend="idmef-target-t">idmef_target_t</link> *    idmef_alert_get_next_target         (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> *target_cur);</programlisting>
<para>
Get the next <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_target_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>target_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-target-t"><type>idmef_target_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-target" role="function">
<title>idmef_alert_set_target ()</title>
<indexterm zone="idmef-alert-set-target"><primary sortas="idmef_alert_set_target">idmef_alert_set_target</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_target              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-target" role="function">
<title>idmef_alert_new_target ()</title>
<indexterm zone="idmef-alert-new-target"><primary sortas="idmef_alert_new_target">idmef_alert_new_target</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_target              (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-target-t">idmef_target_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-target-t"><type>idmef_target_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object. The created <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-target-t"><type>idmef_target_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-assessment" role="function">
<title>idmef_alert_get_assessment ()</title>
<indexterm zone="idmef-alert-get-assessment"><primary sortas="idmef_alert_get_assessment">idmef_alert_get_assessment</primary></indexterm><programlisting><link linkend="idmef-assessment-t">idmef_assessment_t</link> * idmef_alert_get_assessment         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-assessment" role="function">
<title>idmef_alert_set_assessment ()</title>
<indexterm zone="idmef-alert-set-assessment"><primary sortas="idmef_alert_set_assessment">idmef_alert_set_assessment</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_assessment          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> *assessment);</programlisting>
<para>
Set <parameter>assessment</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>assessment</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>assessment</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>assessment</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-assessment" role="function">
<title>idmef_alert_new_assessment ()</title>
<indexterm zone="idmef-alert-new-assessment"><primary sortas="idmef_alert_new_assessment">idmef_alert_new_assessment</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_assessment          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-assessment-t">idmef_assessment_t</link> **ret);</programlisting>
<para>
Create a new assessment object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-assessment-t"><type>idmef_assessment_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-next-additional-data" role="function">
<title>idmef_alert_get_next_additional_data ()</title>
<indexterm zone="idmef-alert-get-next-additional-data"><primary sortas="idmef_alert_get_next_additional_data">idmef_alert_get_next_additional_data</primary></indexterm><programlisting><link linkend="idmef-additional-data-t">idmef_additional_data_t</link> * idmef_alert_get_next_additional_data
                                                        (<link linkend="idmef-alert-t">idmef_alert_t</link> *alert,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *additional_data_cur);</programlisting>
<para>
Get the next <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_additional_data_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>additional_data_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-additional-data" role="function">
<title>idmef_alert_set_additional_data ()</title>
<indexterm zone="idmef-alert-set-additional-data"><primary sortas="idmef_alert_set_additional_data">idmef_alert_set_additional_data</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_additional_data     (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-additional-data" role="function">
<title>idmef_alert_new_additional_data ()</title>
<indexterm zone="idmef-alert-new-additional-data"><primary sortas="idmef_alert_new_additional_data">idmef_alert_new_additional_data</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_additional_data     (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object. The created <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-type" role="function">
<title>idmef_alert_get_type ()</title>
<indexterm zone="idmef-alert-get-type"><primary sortas="idmef_alert_get_type">idmef_alert_get_type</primary></indexterm><programlisting><link linkend="idmef-alert-type-t">idmef_alert_type_t</link>  idmef_alert_get_type                (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
Access the type children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-alert-type-t"><type>idmef_alert_type_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-tool-alert" role="function">
<title>idmef_alert_get_tool_alert ()</title>
<indexterm zone="idmef-alert-get-tool-alert"><primary sortas="idmef_alert_get_tool_alert">idmef_alert_get_tool_alert</primary></indexterm><programlisting><link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> * idmef_alert_get_tool_alert         (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
Access the tool_alert children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-tool-alert" role="function">
<title>idmef_alert_set_tool_alert ()</title>
<indexterm zone="idmef-alert-set-tool-alert"><primary sortas="idmef_alert_set_tool_alert">idmef_alert_set_tool_alert</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_tool_alert          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *tool_alert);</programlisting>
<para>
Set <parameter>tool_alert</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain a <parameter>tool_alert</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>tool_alert</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tool_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-tool-alert" role="function">
<title>idmef_alert_new_tool_alert ()</title>
<indexterm zone="idmef-alert-new-tool-alert"><primary sortas="idmef_alert_new_tool_alert">idmef_alert_new_tool_alert</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_tool_alert          (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> **ret);</programlisting>
<para>
Create a new idmef_tool_alert_t object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer where to store the created <link linkend="idmef-tool-alert-t"><type>idmef_tool_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-correlation-alert" role="function">
<title>idmef_alert_get_correlation_alert ()</title>
<indexterm zone="idmef-alert-get-correlation-alert"><primary sortas="idmef_alert_get_correlation_alert">idmef_alert_get_correlation_alert</primary></indexterm><programlisting><link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> * idmef_alert_get_correlation_alert
                                                        (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
Access the correlation_alert children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-correlation-alert" role="function">
<title>idmef_alert_set_correlation_alert ()</title>
<indexterm zone="idmef-alert-set-correlation-alert"><primary sortas="idmef_alert_set_correlation_alert">idmef_alert_set_correlation_alert</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_correlation_alert   (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *correlation_alert);</programlisting>
<para>
Set <parameter>correlation_alert</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain a <parameter>correlation_alert</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>correlation_alert</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>correlation_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-correlation-alert" role="function">
<title>idmef_alert_new_correlation_alert ()</title>
<indexterm zone="idmef-alert-new-correlation-alert"><primary sortas="idmef_alert_new_correlation_alert">idmef_alert_new_correlation_alert</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_correlation_alert   (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> **ret);</programlisting>
<para>
Create a new idmef_correlation_alert_t object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer where to store the created <link linkend="idmef-correlation-alert-t"><type>idmef_correlation_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-get-overflow-alert" role="function">
<title>idmef_alert_get_overflow_alert ()</title>
<indexterm zone="idmef-alert-get-overflow-alert"><primary sortas="idmef_alert_get_overflow_alert">idmef_alert_get_overflow_alert</primary></indexterm><programlisting><link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> * idmef_alert_get_overflow_alert (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr);</programlisting>
<para>
Access the overflow_alert children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-set-overflow-alert" role="function">
<title>idmef_alert_set_overflow_alert ()</title>
<indexterm zone="idmef-alert-set-overflow-alert"><primary sortas="idmef_alert_set_overflow_alert">idmef_alert_set_overflow_alert</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_alert_set_overflow_alert      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *overflow_alert);</programlisting>
<para>
Set <parameter>overflow_alert</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain a <parameter>overflow_alert</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>overflow_alert</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>overflow_alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-new-overflow-alert" role="function">
<title>idmef_alert_new_overflow_alert ()</title>
<indexterm zone="idmef-alert-new-overflow-alert"><primary sortas="idmef_alert_new_overflow_alert">idmef_alert_new_overflow_alert</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_new_overflow_alert      (<link linkend="idmef-alert-t">idmef_alert_t</link> *ptr,
                                                         <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> **ret);</programlisting>
<para>
Create a new idmef_overflow_alert_t object, children of <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer where to store the created <link linkend="idmef-overflow-alert-t"><type>idmef_overflow_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-t" role="typedef">
<title>idmef_heartbeat_t</title>
<indexterm zone="idmef-heartbeat-t"><primary sortas="idmef_heartbeat_t">idmef_heartbeat_t</primary></indexterm><programlisting>typedef struct idmef_heartbeat idmef_heartbeat_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-heartbeat-new" role="function">
<title>idmef_heartbeat_new ()</title>
<indexterm zone="idmef-heartbeat-new"><primary sortas="idmef_heartbeat_new">idmef_heartbeat_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_new                 (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-copy" role="function">
<title>idmef_heartbeat_copy ()</title>
<indexterm zone="idmef-heartbeat-copy"><primary sortas="idmef_heartbeat_copy">idmef_heartbeat_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_copy                (const <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *src,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-clone" role="function">
<title>idmef_heartbeat_clone ()</title>
<indexterm zone="idmef-heartbeat-clone"><primary sortas="idmef_heartbeat_clone">idmef_heartbeat_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_clone               (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *src,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-ref" role="function">
<title>idmef_heartbeat_ref ()</title>
<indexterm zone="idmef-heartbeat-ref"><primary sortas="idmef_heartbeat_ref">idmef_heartbeat_ref</primary></indexterm><programlisting><link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> * idmef_heartbeat_ref                 (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat);</programlisting>
<para>
Increase <parameter>heartbeat</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>heartbeat</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>heartbeat</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-destroy" role="function">
<title>idmef_heartbeat_destroy ()</title>
<indexterm zone="idmef-heartbeat-destroy"><primary sortas="idmef_heartbeat_destroy">idmef_heartbeat_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_destroy             (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-get-messageid" role="function">
<title>idmef_heartbeat_get_messageid ()</title>
<indexterm zone="idmef-heartbeat-get-messageid"><primary sortas="idmef_heartbeat_get_messageid">idmef_heartbeat_get_messageid</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_heartbeat_get_messageid       (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-set-messageid" role="function">
<title>idmef_heartbeat_set_messageid ()</title>
<indexterm zone="idmef-heartbeat-set-messageid"><primary sortas="idmef_heartbeat_set_messageid">idmef_heartbeat_set_messageid</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_set_messageid       (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *messageid);</programlisting>
<para>
Set <parameter>messageid</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>messageid</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>messageid</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>messageid</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-new-messageid" role="function">
<title>idmef_heartbeat_new_messageid ()</title>
<indexterm zone="idmef-heartbeat-new-messageid"><primary sortas="idmef_heartbeat_new_messageid">idmef_heartbeat_new_messageid</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_new_messageid       (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new messageid object, children of <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-get-next-analyzer" role="function">
<title>idmef_heartbeat_get_next_analyzer ()</title>
<indexterm zone="idmef-heartbeat-get-next-analyzer"><primary sortas="idmef_heartbeat_get_next_analyzer">idmef_heartbeat_get_next_analyzer</primary></indexterm><programlisting><link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *  idmef_heartbeat_get_next_analyzer   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *analyzer_cur);</programlisting>
<para>
Get the next <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_analyzer_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>heartbeat</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analyzer_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-set-analyzer" role="function">
<title>idmef_heartbeat_set_analyzer ()</title>
<indexterm zone="idmef-heartbeat-set-analyzer"><primary sortas="idmef_heartbeat_set_analyzer">idmef_heartbeat_set_analyzer</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_set_analyzer        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-new-analyzer" role="function">
<title>idmef_heartbeat_new_analyzer ()</title>
<indexterm zone="idmef-heartbeat-new-analyzer"><primary sortas="idmef_heartbeat_new_analyzer">idmef_heartbeat_new_analyzer</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_new_analyzer        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object. The created <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-analyzer-t"><type>idmef_analyzer_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-get-create-time" role="function">
<title>idmef_heartbeat_get_create_time ()</title>
<indexterm zone="idmef-heartbeat-get-create-time"><primary sortas="idmef_heartbeat_get_create_time">idmef_heartbeat_get_create_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_heartbeat_get_create_time     (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-set-create-time" role="function">
<title>idmef_heartbeat_set_create_time ()</title>
<indexterm zone="idmef-heartbeat-set-create-time"><primary sortas="idmef_heartbeat_set_create_time">idmef_heartbeat_set_create_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_set_create_time     (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *create_time);</programlisting>
<para>
Set <parameter>create_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>create_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>create_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>create_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-new-create-time" role="function">
<title>idmef_heartbeat_new_create_time ()</title>
<indexterm zone="idmef-heartbeat-new-create-time"><primary sortas="idmef_heartbeat_new_create_time">idmef_heartbeat_new_create_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_new_create_time     (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new create_time object, children of <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-get-analyzer-time" role="function">
<title>idmef_heartbeat_get_analyzer_time ()</title>
<indexterm zone="idmef-heartbeat-get-analyzer-time"><primary sortas="idmef_heartbeat_get_analyzer_time">idmef_heartbeat_get_analyzer_time</primary></indexterm><programlisting><link linkend="idmef-time-t">idmef_time_t</link> *      idmef_heartbeat_get_analyzer_time   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-set-analyzer-time" role="function">
<title>idmef_heartbeat_set_analyzer_time ()</title>
<indexterm zone="idmef-heartbeat-set-analyzer-time"><primary sortas="idmef_heartbeat_set_analyzer_time">idmef_heartbeat_set_analyzer_time</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_set_analyzer_time   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> *analyzer_time);</programlisting>
<para>
Set <parameter>analyzer_time</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>analyzer_time</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>analyzer_time</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analyzer_time</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-new-analyzer-time" role="function">
<title>idmef_heartbeat_new_analyzer_time ()</title>
<indexterm zone="idmef-heartbeat-new-analyzer-time"><primary sortas="idmef_heartbeat_new_analyzer_time">idmef_heartbeat_new_analyzer_time</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_new_analyzer_time   (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-time-t">idmef_time_t</link> **ret);</programlisting>
<para>
Create a new analyzer_time object, children of <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-unset-heartbeat-interval" role="function">
<title>idmef_heartbeat_unset_heartbeat_interval ()</title>
<indexterm zone="idmef-heartbeat-unset-heartbeat-interval"><primary sortas="idmef_heartbeat_unset_heartbeat_interval">idmef_heartbeat_unset_heartbeat_interval</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_unset_heartbeat_interval
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-get-heartbeat-interval" role="function">
<title>idmef_heartbeat_get_heartbeat_interval ()</title>
<indexterm zone="idmef-heartbeat-get-heartbeat-interval"><primary sortas="idmef_heartbeat_get_heartbeat_interval">idmef_heartbeat_get_heartbeat_interval</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link> *          idmef_heartbeat_get_heartbeat_interval
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-set-heartbeat-interval" role="function">
<title>idmef_heartbeat_set_heartbeat_interval ()</title>
<indexterm zone="idmef-heartbeat-set-heartbeat-interval"><primary sortas="idmef_heartbeat_set_heartbeat_interval">idmef_heartbeat_set_heartbeat_interval</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_set_heartbeat_interval
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> heartbeat_interval);</programlisting>
<para>
Set <parameter>heartbeat_interval</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>heartbeat_interval</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>heartbeat_interval</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>heartbeat_interval</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-new-heartbeat-interval" role="function">
<title>idmef_heartbeat_new_heartbeat_interval ()</title>
<indexterm zone="idmef-heartbeat-new-heartbeat-interval"><primary sortas="idmef_heartbeat_new_heartbeat_interval">idmef_heartbeat_new_heartbeat_interval</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_new_heartbeat_interval
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="uint32-t">uint32_t</link> **ret);</programlisting>
<para>
Create a new heartbeat_interval object, children of <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="uint32-t"><type>uint32_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="uint32-t"><type>uint32_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-get-next-additional-data" role="function">
<title>idmef_heartbeat_get_next_additional_data ()</title>
<indexterm zone="idmef-heartbeat-get-next-additional-data"><primary sortas="idmef_heartbeat_get_next_additional_data">idmef_heartbeat_get_next_additional_data</primary></indexterm><programlisting><link linkend="idmef-additional-data-t">idmef_additional_data_t</link> * idmef_heartbeat_get_next_additional_data
                                                        (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *additional_data_cur);</programlisting>
<para>
Get the next <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object listed in <parameter>ptr</parameter>.
When iterating over the idmef_additional_data_t object listed in <parameter>ptr</parameter>,
<parameter>object</parameter> should be set to the latest returned <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>heartbeat</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>additional_data_cur</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the next <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-set-additional-data" role="function">
<title>idmef_heartbeat_set_additional_data ()</title>
<indexterm zone="idmef-heartbeat-set-additional-data"><primary sortas="idmef_heartbeat_set_additional_data">idmef_heartbeat_set_additional_data</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_heartbeat_set_additional_data (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *object,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Add <parameter>object</parameter> to position <parameter>pos</parameter> of <parameter>ptr</parameter> list of <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> Position in the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-new-additional-data" role="function">
<title>idmef_heartbeat_new_additional_data ()</title>
<indexterm zone="idmef-heartbeat-new-additional-data"><primary sortas="idmef_heartbeat_new_additional_data">idmef_heartbeat_new_additional_data</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_new_additional_data (<link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *ptr,
                                                         <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> **ret,
                                                         <link linkend="int">int</link> pos);</programlisting>
<para>
Create a new <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> children of <parameter>ptr</parameter>, and add it to position <parameter>pos</parameter> of
<parameter>ptr</parameter> list of <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object. The created <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object is
stored in <parameter>ret</parameter>.
</para>
<para>
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-APPEND--CAPS"><type>IDMEF_LIST_APPEND</type></link>, <parameter>object</parameter> will be inserted at the tail of the list.
If <parameter>pos</parameter> is <link linkend="IDMEF-LIST-PREPEND--CAPS"><type>IDMEF_LIST_PREPEND</type></link>, <parameter>object</parameter> will be inserted at the head of the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="idmef-additional-data-t"><type>idmef_additional_data_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara> position in the list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-type-t" role="enum">
<title>enum idmef_message_type_t</title>
<indexterm zone="idmef-message-type-t"><primary sortas="idmef_message_type_t">idmef_message_type_t</primary></indexterm><programlisting>typedef enum {
        IDMEF_MESSAGE_TYPE_ERROR = -1,
        IDMEF_MESSAGE_TYPE_ALERT = 1,
        IDMEF_MESSAGE_TYPE_HEARTBEAT = 2
} idmef_message_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-message-type-to-numeric" role="function">
<title>idmef_message_type_to_numeric ()</title>
<indexterm zone="idmef-message-type-to-numeric"><primary sortas="idmef_message_type_to_numeric">idmef_message_type_to_numeric</primary></indexterm><programlisting><link linkend="idmef-message-type-t">idmef_message_type_t</link>  idmef_message_type_to_numeric     (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> pointer to an IDMEF string representation of a <link linkend="idmef-message-type-t"><type>idmef_message_type_t</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the numeric equivalent of <parameter>name</parameter>, or -1 if <parameter>name</parameter> is not valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-type-to-string" role="function">
<title>idmef_message_type_to_string ()</title>
<indexterm zone="idmef-message-type-to-string"><primary sortas="idmef_message_type_to_string">idmef_message_type_to_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        idmef_message_type_to_string        (<link linkend="idmef-message-type-t">idmef_message_type_t</link> val);</programlisting>
<para>
Return the IDMEF string equivalent of <parameter>val</parameter> provided <link linkend="idmef-message-type-t"><type>idmef_message_type_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> an enumeration value for <link linkend="idmef-message-type-t"><type>idmef_message_type_t</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the string describing <parameter>val</parameter>, or NULL if <parameter>val</parameter> is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-t" role="typedef">
<title>idmef_message_t</title>
<indexterm zone="idmef-message-t"><primary sortas="idmef_message_t">idmef_message_t</primary></indexterm><programlisting>typedef struct idmef_message idmef_message_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="idmef-message-new" role="function">
<title>idmef_message_new ()</title>
<indexterm zone="idmef-message-new"><primary sortas="idmef_message_new">idmef_message_new</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_new                   (<link linkend="idmef-message-t">idmef_message_t</link> **ret);</programlisting>
<para>
Create a new <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> Pointer where to store the created <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-copy" role="function">
<title>idmef_message_copy ()</title>
<indexterm zone="idmef-message-copy"><primary sortas="idmef_message_copy">idmef_message_copy</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_copy                  (const <link linkend="idmef-message-t">idmef_message_t</link> *src,
                                                         <link linkend="idmef-message-t">idmef_message_t</link> *dst);</programlisting>
<para>
Copy a new <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object from <parameter>src</parameter> to <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Source of the copy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Where to copy the object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-clone" role="function">
<title>idmef_message_clone ()</title>
<indexterm zone="idmef-message-clone"><primary sortas="idmef_message_clone">idmef_message_clone</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_clone                 (<link linkend="idmef-message-t">idmef_message_t</link> *src,
                                                         <link linkend="idmef-message-t">idmef_message_t</link> **dst);</programlisting>
<para>
Create a copy of <parameter>src</parameter>, and store it in <parameter>dst</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Object to be cloned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Address where to store the pointer to the cloned object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-ref" role="function">
<title>idmef_message_ref ()</title>
<indexterm zone="idmef-message-ref"><primary sortas="idmef_message_ref">idmef_message_ref</primary></indexterm><programlisting><link linkend="idmef-message-t">idmef_message_t</link> *   idmef_message_ref                   (<link linkend="idmef-message-t">idmef_message_t</link> *message);</programlisting>
<para>
Increase <parameter>message</parameter> reference count, so that it can be referenced
multiple time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to <parameter>message</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-destroy" role="function">
<title>idmef_message_destroy ()</title>
<indexterm zone="idmef-message-destroy"><primary sortas="idmef_message_destroy">idmef_message_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_message_destroy               (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);</programlisting>
<para>
Destroy <parameter>ptr</parameter> and all of it's children.
The objects are only destroyed if their reference count reach zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-version" role="function">
<title>idmef_message_get_version ()</title>
<indexterm zone="idmef-message-get-version"><primary sortas="idmef_message_get_version">idmef_message_get_version</primary></indexterm><programlisting><link linkend="prelude-string-t">prelude_string_t</link> *  idmef_message_get_version           (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-version" role="function">
<title>idmef_message_set_version ()</title>
<indexterm zone="idmef-message-set-version"><primary sortas="idmef_message_set_version">idmef_message_set_version</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_message_set_version           (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> *version);</programlisting>
<para>
Set <parameter>version</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain an <parameter>version</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>version</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-new-version" role="function">
<title>idmef_message_new_version ()</title>
<indexterm zone="idmef-message-new-version"><primary sortas="idmef_message_new_version">idmef_message_new_version</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_new_version           (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="prelude-string-t">prelude_string_t</link> **ret);</programlisting>
<para>
Create a new version object, children of <link linkend="idmef-message-t"><type>idmef_message_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer to an address where to store the created <link linkend="prelude-string-t"><type>prelude_string_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-type" role="function">
<title>idmef_message_get_type ()</title>
<indexterm zone="idmef-message-get-type"><primary sortas="idmef_message_get_type">idmef_message_get_type</primary></indexterm><programlisting><link linkend="idmef-message-type-t">idmef_message_type_t</link>  idmef_message_get_type            (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);</programlisting>
<para>
Access the type children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-message-type-t"><type>idmef_message_type_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-alert" role="function">
<title>idmef_message_get_alert ()</title>
<indexterm zone="idmef-message-get-alert"><primary sortas="idmef_message_get_alert">idmef_message_get_alert</primary></indexterm><programlisting><link linkend="idmef-alert-t">idmef_alert_t</link> *     idmef_message_get_alert             (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);</programlisting>
<para>
Access the alert children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-alert" role="function">
<title>idmef_message_set_alert ()</title>
<indexterm zone="idmef-message-set-alert"><primary sortas="idmef_message_set_alert">idmef_message_set_alert</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_message_set_alert             (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> *alert);</programlisting>
<para>
Set <parameter>alert</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain a <parameter>alert</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>alert</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-new-alert" role="function">
<title>idmef_message_new_alert ()</title>
<indexterm zone="idmef-message-new-alert"><primary sortas="idmef_message_new_alert">idmef_message_new_alert</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_new_alert             (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-alert-t">idmef_alert_t</link> **ret);</programlisting>
<para>
Create a new idmef_alert_t object, children of <link linkend="idmef-message-t"><type>idmef_message_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer where to store the created <link linkend="idmef-alert-t"><type>idmef_alert_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-heartbeat" role="function">
<title>idmef_message_get_heartbeat ()</title>
<indexterm zone="idmef-message-get-heartbeat"><primary sortas="idmef_message_get_heartbeat">idmef_message_get_heartbeat</primary></indexterm><programlisting><link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> * idmef_message_get_heartbeat         (<link linkend="idmef-message-t">idmef_message_t</link> *ptr);</programlisting>
<para>
Access the heartbeat children of <parameter>ptr</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> children, or NULL if it is not set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-heartbeat" role="function">
<title>idmef_message_set_heartbeat ()</title>
<indexterm zone="idmef-message-set-heartbeat"><primary sortas="idmef_message_set_heartbeat">idmef_message_set_heartbeat</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_message_set_heartbeat         (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *heartbeat);</programlisting>
<para>
Set <parameter>heartbeat</parameter> object as a children of <parameter>ptr</parameter>.
if <parameter>ptr</parameter> already contain a <parameter>heartbeat</parameter> object, then it is destroyed,
and updated to point to the provided <parameter>heartbeat</parameter> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>heartbeat</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-new-heartbeat" role="function">
<title>idmef_message_new_heartbeat ()</title>
<indexterm zone="idmef-message-new-heartbeat"><primary sortas="idmef_message_new_heartbeat">idmef_message_new_heartbeat</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_new_heartbeat         (<link linkend="idmef-message-t">idmef_message_t</link> *ptr,
                                                         <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> **ret);</programlisting>
<para>
Create a new idmef_heartbeat_t object, children of <link linkend="idmef-message-t"><type>idmef_message_t</type></link>.
If <parameter>ptr</parameter> already contain a <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object, then it is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="idmef-message-t"><type>idmef_message_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> pointer where to store the created <link linkend="idmef-heartbeat-t"><type>idmef_heartbeat_t</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or a negative value if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-set-pmsg" role="function">
<title>idmef_message_set_pmsg ()</title>
<indexterm zone="idmef-message-set-pmsg"><primary sortas="idmef_message_set_pmsg">idmef_message_set_pmsg</primary></indexterm><programlisting><link linkend="void">void</link>                idmef_message_set_pmsg              (<link linkend="idmef-message-t">idmef_message_t</link> *message,
                                                         <link linkend="prelude-msg-t">prelude_msg_t</link> *msg);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-get-pmsg" role="function">
<title>idmef_message_get_pmsg ()</title>
<indexterm zone="idmef-message-get-pmsg"><primary sortas="idmef_message_get_pmsg">idmef_message_get_pmsg</primary></indexterm><programlisting><link linkend="prelude-msg-t">prelude_msg_t</link> *     idmef_message_get_pmsg              (<link linkend="idmef-message-t">idmef_message_t</link> *message);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-action-compare" role="function">
<title>idmef_action_compare ()</title>
<indexterm zone="idmef-action-compare"><primary sortas="idmef_action_compare">idmef_action_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_action_compare                (const <link linkend="idmef-action-t">idmef_action_t</link> *obj1,
                                                         const <link linkend="idmef-action-t">idmef_action_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-additional-data-compare" role="function">
<title>idmef_additional_data_compare ()</title>
<indexterm zone="idmef-additional-data-compare"><primary sortas="idmef_additional_data_compare">idmef_additional_data_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_additional_data_compare       (const <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *obj1,
                                                         const <link linkend="idmef-additional-data-t">idmef_additional_data_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-address-compare" role="function">
<title>idmef_address_compare ()</title>
<indexterm zone="idmef-address-compare"><primary sortas="idmef_address_compare">idmef_address_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_address_compare               (const <link linkend="idmef-address-t">idmef_address_t</link> *obj1,
                                                         const <link linkend="idmef-address-t">idmef_address_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alert-compare" role="function">
<title>idmef_alert_compare ()</title>
<indexterm zone="idmef-alert-compare"><primary sortas="idmef_alert_compare">idmef_alert_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alert_compare                 (const <link linkend="idmef-alert-t">idmef_alert_t</link> *obj1,
                                                         const <link linkend="idmef-alert-t">idmef_alert_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-alertident-compare" role="function">
<title>idmef_alertident_compare ()</title>
<indexterm zone="idmef-alertident-compare"><primary sortas="idmef_alertident_compare">idmef_alertident_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_alertident_compare            (const <link linkend="idmef-alertident-t">idmef_alertident_t</link> *obj1,
                                                         const <link linkend="idmef-alertident-t">idmef_alertident_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-analyzer-compare" role="function">
<title>idmef_analyzer_compare ()</title>
<indexterm zone="idmef-analyzer-compare"><primary sortas="idmef_analyzer_compare">idmef_analyzer_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_analyzer_compare              (const <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *obj1,
                                                         const <link linkend="idmef-analyzer-t">idmef_analyzer_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-assessment-compare" role="function">
<title>idmef_assessment_compare ()</title>
<indexterm zone="idmef-assessment-compare"><primary sortas="idmef_assessment_compare">idmef_assessment_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_assessment_compare            (const <link linkend="idmef-assessment-t">idmef_assessment_t</link> *obj1,
                                                         const <link linkend="idmef-assessment-t">idmef_assessment_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-checksum-compare" role="function">
<title>idmef_checksum_compare ()</title>
<indexterm zone="idmef-checksum-compare"><primary sortas="idmef_checksum_compare">idmef_checksum_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_checksum_compare              (const <link linkend="idmef-checksum-t">idmef_checksum_t</link> *obj1,
                                                         const <link linkend="idmef-checksum-t">idmef_checksum_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-classification-compare" role="function">
<title>idmef_classification_compare ()</title>
<indexterm zone="idmef-classification-compare"><primary sortas="idmef_classification_compare">idmef_classification_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_classification_compare        (const <link linkend="idmef-classification-t">idmef_classification_t</link> *obj1,
                                                         const <link linkend="idmef-classification-t">idmef_classification_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-confidence-compare" role="function">
<title>idmef_confidence_compare ()</title>
<indexterm zone="idmef-confidence-compare"><primary sortas="idmef_confidence_compare">idmef_confidence_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_confidence_compare            (const <link linkend="idmef-confidence-t">idmef_confidence_t</link> *obj1,
                                                         const <link linkend="idmef-confidence-t">idmef_confidence_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-correlation-alert-compare" role="function">
<title>idmef_correlation_alert_compare ()</title>
<indexterm zone="idmef-correlation-alert-compare"><primary sortas="idmef_correlation_alert_compare">idmef_correlation_alert_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_correlation_alert_compare     (const <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *obj1,
                                                         const <link linkend="idmef-correlation-alert-t">idmef_correlation_alert_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-data-compare" role="function">
<title>idmef_data_compare ()</title>
<indexterm zone="idmef-data-compare"><primary sortas="idmef_data_compare">idmef_data_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_data_compare                  (const <link linkend="idmef-data-t">idmef_data_t</link> *data1,
                                                         const <link linkend="idmef-data-t">idmef_data_t</link> *data2);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-access-compare" role="function">
<title>idmef_file_access_compare ()</title>
<indexterm zone="idmef-file-access-compare"><primary sortas="idmef_file_access_compare">idmef_file_access_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_access_compare           (const <link linkend="idmef-file-access-t">idmef_file_access_t</link> *obj1,
                                                         const <link linkend="idmef-file-access-t">idmef_file_access_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-file-compare" role="function">
<title>idmef_file_compare ()</title>
<indexterm zone="idmef-file-compare"><primary sortas="idmef_file_compare">idmef_file_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_file_compare                  (const <link linkend="idmef-file-t">idmef_file_t</link> *obj1,
                                                         const <link linkend="idmef-file-t">idmef_file_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-heartbeat-compare" role="function">
<title>idmef_heartbeat_compare ()</title>
<indexterm zone="idmef-heartbeat-compare"><primary sortas="idmef_heartbeat_compare">idmef_heartbeat_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_heartbeat_compare             (const <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *obj1,
                                                         const <link linkend="idmef-heartbeat-t">idmef_heartbeat_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-impact-compare" role="function">
<title>idmef_impact_compare ()</title>
<indexterm zone="idmef-impact-compare"><primary sortas="idmef_impact_compare">idmef_impact_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_impact_compare                (const <link linkend="idmef-impact-t">idmef_impact_t</link> *obj1,
                                                         const <link linkend="idmef-impact-t">idmef_impact_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-inode-compare" role="function">
<title>idmef_inode_compare ()</title>
<indexterm zone="idmef-inode-compare"><primary sortas="idmef_inode_compare">idmef_inode_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_inode_compare                 (const <link linkend="idmef-inode-t">idmef_inode_t</link> *obj1,
                                                         const <link linkend="idmef-inode-t">idmef_inode_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-linkage-compare" role="function">
<title>idmef_linkage_compare ()</title>
<indexterm zone="idmef-linkage-compare"><primary sortas="idmef_linkage_compare">idmef_linkage_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_linkage_compare               (const <link linkend="idmef-linkage-t">idmef_linkage_t</link> *obj1,
                                                         const <link linkend="idmef-linkage-t">idmef_linkage_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-message-compare" role="function">
<title>idmef_message_compare ()</title>
<indexterm zone="idmef-message-compare"><primary sortas="idmef_message_compare">idmef_message_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_message_compare               (const <link linkend="idmef-message-t">idmef_message_t</link> *obj1,
                                                         const <link linkend="idmef-message-t">idmef_message_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-node-compare" role="function">
<title>idmef_node_compare ()</title>
<indexterm zone="idmef-node-compare"><primary sortas="idmef_node_compare">idmef_node_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_node_compare                  (const <link linkend="idmef-node-t">idmef_node_t</link> *obj1,
                                                         const <link linkend="idmef-node-t">idmef_node_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-overflow-alert-compare" role="function">
<title>idmef_overflow_alert_compare ()</title>
<indexterm zone="idmef-overflow-alert-compare"><primary sortas="idmef_overflow_alert_compare">idmef_overflow_alert_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_overflow_alert_compare        (const <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *obj1,
                                                         const <link linkend="idmef-overflow-alert-t">idmef_overflow_alert_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-process-compare" role="function">
<title>idmef_process_compare ()</title>
<indexterm zone="idmef-process-compare"><primary sortas="idmef_process_compare">idmef_process_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_process_compare               (const <link linkend="idmef-process-t">idmef_process_t</link> *obj1,
                                                         const <link linkend="idmef-process-t">idmef_process_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-reference-compare" role="function">
<title>idmef_reference_compare ()</title>
<indexterm zone="idmef-reference-compare"><primary sortas="idmef_reference_compare">idmef_reference_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_reference_compare             (const <link linkend="idmef-reference-t">idmef_reference_t</link> *obj1,
                                                         const <link linkend="idmef-reference-t">idmef_reference_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-service-compare" role="function">
<title>idmef_service_compare ()</title>
<indexterm zone="idmef-service-compare"><primary sortas="idmef_service_compare">idmef_service_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_service_compare               (const <link linkend="idmef-service-t">idmef_service_t</link> *obj1,
                                                         const <link linkend="idmef-service-t">idmef_service_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-snmp-service-compare" role="function">
<title>idmef_snmp_service_compare ()</title>
<indexterm zone="idmef-snmp-service-compare"><primary sortas="idmef_snmp_service_compare">idmef_snmp_service_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_snmp_service_compare          (const <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *obj1,
                                                         const <link linkend="idmef-snmp-service-t">idmef_snmp_service_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-source-compare" role="function">
<title>idmef_source_compare ()</title>
<indexterm zone="idmef-source-compare"><primary sortas="idmef_source_compare">idmef_source_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_source_compare                (const <link linkend="idmef-source-t">idmef_source_t</link> *obj1,
                                                         const <link linkend="idmef-source-t">idmef_source_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-target-compare" role="function">
<title>idmef_target_compare ()</title>
<indexterm zone="idmef-target-compare"><primary sortas="idmef_target_compare">idmef_target_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_target_compare                (const <link linkend="idmef-target-t">idmef_target_t</link> *obj1,
                                                         const <link linkend="idmef-target-t">idmef_target_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-time-compare" role="function">
<title>idmef_time_compare ()</title>
<indexterm zone="idmef-time-compare"><primary sortas="idmef_time_compare">idmef_time_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_time_compare                  (const <link linkend="idmef-time-t">idmef_time_t</link> *time1,
                                                         const <link linkend="idmef-time-t">idmef_time_t</link> *time2);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>time1</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object to compare with <parameter>time2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time2</parameter>&#160;:</term>
<listitem><simpara> Pointer to an <link linkend="idmef-time-t"><type>idmef_time_t</type></link> object to compare with <parameter>time1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 if <parameter>time1</parameter> and <parameter>time2</parameter> match, 1 if <parameter>time1</parameter> is greater than
<parameter>time2</parameter>, -1 if <parameter>time1</parameter> is lesser than <parameter>time2</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-tool-alert-compare" role="function">
<title>idmef_tool_alert_compare ()</title>
<indexterm zone="idmef-tool-alert-compare"><primary sortas="idmef_tool_alert_compare">idmef_tool_alert_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_tool_alert_compare            (const <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *obj1,
                                                         const <link linkend="idmef-tool-alert-t">idmef_tool_alert_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-compare" role="function">
<title>idmef_user_compare ()</title>
<indexterm zone="idmef-user-compare"><primary sortas="idmef_user_compare">idmef_user_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_compare                  (const <link linkend="idmef-user-t">idmef_user_t</link> *obj1,
                                                         const <link linkend="idmef-user-t">idmef_user_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-user-id-compare" role="function">
<title>idmef_user_id_compare ()</title>
<indexterm zone="idmef-user-id-compare"><primary sortas="idmef_user_id_compare">idmef_user_id_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_user_id_compare               (const <link linkend="idmef-user-id-t">idmef_user_id_t</link> *obj1,
                                                         const <link linkend="idmef-user-id-t">idmef_user_id_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="idmef-web-service-compare" role="function">
<title>idmef_web_service_compare ()</title>
<indexterm zone="idmef-web-service-compare"><primary sortas="idmef_web_service_compare">idmef_web_service_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 idmef_web_service_compare           (const <link linkend="idmef-web-service-t">idmef_web_service_t</link> *obj1,
                                                         const <link linkend="idmef-web-service-t">idmef_web_service_t</link> *obj2);</programlisting>
<para>
Compare <parameter>obj1</parameter> with <parameter>obj2</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj1</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj2</parameter>&#160;:</term>
<listitem><simpara> Object to compare with <parameter>obj1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on match, a negative value on comparison failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ADDITIONAL-DATA-TYPE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ADDITIONAL_DATA_TYPE</title>
<indexterm zone="IDMEF-CLASS-ID-ADDITIONAL-DATA-TYPE--CAPS"><primary sortas="IDMEF_CLASS_ID_ADDITIONAL_DATA_TYPE">IDMEF_CLASS_ID_ADDITIONAL_DATA_TYPE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ADDITIONAL_DATA_TYPE 3
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ADDITIONAL-DATA--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ADDITIONAL_DATA</title>
<indexterm zone="IDMEF-CLASS-ID-ADDITIONAL-DATA--CAPS"><primary sortas="IDMEF_CLASS_ID_ADDITIONAL_DATA">IDMEF_CLASS_ID_ADDITIONAL_DATA</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ADDITIONAL_DATA 4
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-REFERENCE-ORIGIN--CAPS" role="macro">
<title>IDMEF_CLASS_ID_REFERENCE_ORIGIN</title>
<indexterm zone="IDMEF-CLASS-ID-REFERENCE-ORIGIN--CAPS"><primary sortas="IDMEF_CLASS_ID_REFERENCE_ORIGIN">IDMEF_CLASS_ID_REFERENCE_ORIGIN</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_REFERENCE_ORIGIN 5
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-REFERENCE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_REFERENCE</title>
<indexterm zone="IDMEF-CLASS-ID-REFERENCE--CAPS"><primary sortas="IDMEF_CLASS_ID_REFERENCE">IDMEF_CLASS_ID_REFERENCE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_REFERENCE 50
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-CLASSIFICATION--CAPS" role="macro">
<title>IDMEF_CLASS_ID_CLASSIFICATION</title>
<indexterm zone="IDMEF-CLASS-ID-CLASSIFICATION--CAPS"><primary sortas="IDMEF_CLASS_ID_CLASSIFICATION">IDMEF_CLASS_ID_CLASSIFICATION</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_CLASSIFICATION 6
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-USER-ID-TYPE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_USER_ID_TYPE</title>
<indexterm zone="IDMEF-CLASS-ID-USER-ID-TYPE--CAPS"><primary sortas="IDMEF_CLASS_ID_USER_ID_TYPE">IDMEF_CLASS_ID_USER_ID_TYPE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_USER_ID_TYPE 7
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-USER-ID--CAPS" role="macro">
<title>IDMEF_CLASS_ID_USER_ID</title>
<indexterm zone="IDMEF-CLASS-ID-USER-ID--CAPS"><primary sortas="IDMEF_CLASS_ID_USER_ID">IDMEF_CLASS_ID_USER_ID</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_USER_ID 8
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-USER-CATEGORY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_USER_CATEGORY</title>
<indexterm zone="IDMEF-CLASS-ID-USER-CATEGORY--CAPS"><primary sortas="IDMEF_CLASS_ID_USER_CATEGORY">IDMEF_CLASS_ID_USER_CATEGORY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_USER_CATEGORY 9
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-USER--CAPS" role="macro">
<title>IDMEF_CLASS_ID_USER</title>
<indexterm zone="IDMEF-CLASS-ID-USER--CAPS"><primary sortas="IDMEF_CLASS_ID_USER">IDMEF_CLASS_ID_USER</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_USER 10
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ADDRESS-CATEGORY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ADDRESS_CATEGORY</title>
<indexterm zone="IDMEF-CLASS-ID-ADDRESS-CATEGORY--CAPS"><primary sortas="IDMEF_CLASS_ID_ADDRESS_CATEGORY">IDMEF_CLASS_ID_ADDRESS_CATEGORY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ADDRESS_CATEGORY 11
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ADDRESS--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ADDRESS</title>
<indexterm zone="IDMEF-CLASS-ID-ADDRESS--CAPS"><primary sortas="IDMEF_CLASS_ID_ADDRESS">IDMEF_CLASS_ID_ADDRESS</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ADDRESS 12
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-PROCESS--CAPS" role="macro">
<title>IDMEF_CLASS_ID_PROCESS</title>
<indexterm zone="IDMEF-CLASS-ID-PROCESS--CAPS"><primary sortas="IDMEF_CLASS_ID_PROCESS">IDMEF_CLASS_ID_PROCESS</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_PROCESS 13
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-WEB-SERVICE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_WEB_SERVICE</title>
<indexterm zone="IDMEF-CLASS-ID-WEB-SERVICE--CAPS"><primary sortas="IDMEF_CLASS_ID_WEB_SERVICE">IDMEF_CLASS_ID_WEB_SERVICE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_WEB_SERVICE 14
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-SNMP-SERVICE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_SNMP_SERVICE</title>
<indexterm zone="IDMEF-CLASS-ID-SNMP-SERVICE--CAPS"><primary sortas="IDMEF_CLASS_ID_SNMP_SERVICE">IDMEF_CLASS_ID_SNMP_SERVICE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_SNMP_SERVICE 15
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-SERVICE-TYPE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_SERVICE_TYPE</title>
<indexterm zone="IDMEF-CLASS-ID-SERVICE-TYPE--CAPS"><primary sortas="IDMEF_CLASS_ID_SERVICE_TYPE">IDMEF_CLASS_ID_SERVICE_TYPE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_SERVICE_TYPE 16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-SERVICE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_SERVICE</title>
<indexterm zone="IDMEF-CLASS-ID-SERVICE--CAPS"><primary sortas="IDMEF_CLASS_ID_SERVICE">IDMEF_CLASS_ID_SERVICE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_SERVICE 17
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-NODE-CATEGORY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_NODE_CATEGORY</title>
<indexterm zone="IDMEF-CLASS-ID-NODE-CATEGORY--CAPS"><primary sortas="IDMEF_CLASS_ID_NODE_CATEGORY">IDMEF_CLASS_ID_NODE_CATEGORY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_NODE_CATEGORY 18
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-NODE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_NODE</title>
<indexterm zone="IDMEF-CLASS-ID-NODE--CAPS"><primary sortas="IDMEF_CLASS_ID_NODE">IDMEF_CLASS_ID_NODE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_NODE 19
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-SOURCE-SPOOFED--CAPS" role="macro">
<title>IDMEF_CLASS_ID_SOURCE_SPOOFED</title>
<indexterm zone="IDMEF-CLASS-ID-SOURCE-SPOOFED--CAPS"><primary sortas="IDMEF_CLASS_ID_SOURCE_SPOOFED">IDMEF_CLASS_ID_SOURCE_SPOOFED</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_SOURCE_SPOOFED 20
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-SOURCE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_SOURCE</title>
<indexterm zone="IDMEF-CLASS-ID-SOURCE--CAPS"><primary sortas="IDMEF_CLASS_ID_SOURCE">IDMEF_CLASS_ID_SOURCE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_SOURCE 21
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-FILE-ACCESS--CAPS" role="macro">
<title>IDMEF_CLASS_ID_FILE_ACCESS</title>
<indexterm zone="IDMEF-CLASS-ID-FILE-ACCESS--CAPS"><primary sortas="IDMEF_CLASS_ID_FILE_ACCESS">IDMEF_CLASS_ID_FILE_ACCESS</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_FILE_ACCESS 22
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-INODE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_INODE</title>
<indexterm zone="IDMEF-CLASS-ID-INODE--CAPS"><primary sortas="IDMEF_CLASS_ID_INODE">IDMEF_CLASS_ID_INODE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_INODE 23
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-CHECKSUM-ALGORITHM--CAPS" role="macro">
<title>IDMEF_CLASS_ID_CHECKSUM_ALGORITHM</title>
<indexterm zone="IDMEF-CLASS-ID-CHECKSUM-ALGORITHM--CAPS"><primary sortas="IDMEF_CLASS_ID_CHECKSUM_ALGORITHM">IDMEF_CLASS_ID_CHECKSUM_ALGORITHM</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_CHECKSUM_ALGORITHM 53
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-CHECKSUM--CAPS" role="macro">
<title>IDMEF_CLASS_ID_CHECKSUM</title>
<indexterm zone="IDMEF-CLASS-ID-CHECKSUM--CAPS"><primary sortas="IDMEF_CLASS_ID_CHECKSUM">IDMEF_CLASS_ID_CHECKSUM</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_CHECKSUM 52
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-FILE-CATEGORY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_FILE_CATEGORY</title>
<indexterm zone="IDMEF-CLASS-ID-FILE-CATEGORY--CAPS"><primary sortas="IDMEF_CLASS_ID_FILE_CATEGORY">IDMEF_CLASS_ID_FILE_CATEGORY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_FILE_CATEGORY 24
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-FILE-FSTYPE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_FILE_FSTYPE</title>
<indexterm zone="IDMEF-CLASS-ID-FILE-FSTYPE--CAPS"><primary sortas="IDMEF_CLASS_ID_FILE_FSTYPE">IDMEF_CLASS_ID_FILE_FSTYPE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_FILE_FSTYPE 25
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-FILE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_FILE</title>
<indexterm zone="IDMEF-CLASS-ID-FILE--CAPS"><primary sortas="IDMEF_CLASS_ID_FILE">IDMEF_CLASS_ID_FILE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_FILE 26
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-LINKAGE-CATEGORY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_LINKAGE_CATEGORY</title>
<indexterm zone="IDMEF-CLASS-ID-LINKAGE-CATEGORY--CAPS"><primary sortas="IDMEF_CLASS_ID_LINKAGE_CATEGORY">IDMEF_CLASS_ID_LINKAGE_CATEGORY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_LINKAGE_CATEGORY 27
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-LINKAGE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_LINKAGE</title>
<indexterm zone="IDMEF-CLASS-ID-LINKAGE--CAPS"><primary sortas="IDMEF_CLASS_ID_LINKAGE">IDMEF_CLASS_ID_LINKAGE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_LINKAGE 28
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-TARGET-DECOY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_TARGET_DECOY</title>
<indexterm zone="IDMEF-CLASS-ID-TARGET-DECOY--CAPS"><primary sortas="IDMEF_CLASS_ID_TARGET_DECOY">IDMEF_CLASS_ID_TARGET_DECOY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_TARGET_DECOY 29
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-TARGET--CAPS" role="macro">
<title>IDMEF_CLASS_ID_TARGET</title>
<indexterm zone="IDMEF-CLASS-ID-TARGET--CAPS"><primary sortas="IDMEF_CLASS_ID_TARGET">IDMEF_CLASS_ID_TARGET</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_TARGET 30
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ANALYZER--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ANALYZER</title>
<indexterm zone="IDMEF-CLASS-ID-ANALYZER--CAPS"><primary sortas="IDMEF_CLASS_ID_ANALYZER">IDMEF_CLASS_ID_ANALYZER</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ANALYZER 31
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ALERTIDENT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ALERTIDENT</title>
<indexterm zone="IDMEF-CLASS-ID-ALERTIDENT--CAPS"><primary sortas="IDMEF_CLASS_ID_ALERTIDENT">IDMEF_CLASS_ID_ALERTIDENT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ALERTIDENT 32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-IMPACT-SEVERITY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_IMPACT_SEVERITY</title>
<indexterm zone="IDMEF-CLASS-ID-IMPACT-SEVERITY--CAPS"><primary sortas="IDMEF_CLASS_ID_IMPACT_SEVERITY">IDMEF_CLASS_ID_IMPACT_SEVERITY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_IMPACT_SEVERITY 33
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-IMPACT-COMPLETION--CAPS" role="macro">
<title>IDMEF_CLASS_ID_IMPACT_COMPLETION</title>
<indexterm zone="IDMEF-CLASS-ID-IMPACT-COMPLETION--CAPS"><primary sortas="IDMEF_CLASS_ID_IMPACT_COMPLETION">IDMEF_CLASS_ID_IMPACT_COMPLETION</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_IMPACT_COMPLETION 34
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-IMPACT-TYPE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_IMPACT_TYPE</title>
<indexterm zone="IDMEF-CLASS-ID-IMPACT-TYPE--CAPS"><primary sortas="IDMEF_CLASS_ID_IMPACT_TYPE">IDMEF_CLASS_ID_IMPACT_TYPE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_IMPACT_TYPE 35
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-IMPACT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_IMPACT</title>
<indexterm zone="IDMEF-CLASS-ID-IMPACT--CAPS"><primary sortas="IDMEF_CLASS_ID_IMPACT">IDMEF_CLASS_ID_IMPACT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_IMPACT 36
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ACTION-CATEGORY--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ACTION_CATEGORY</title>
<indexterm zone="IDMEF-CLASS-ID-ACTION-CATEGORY--CAPS"><primary sortas="IDMEF_CLASS_ID_ACTION_CATEGORY">IDMEF_CLASS_ID_ACTION_CATEGORY</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ACTION_CATEGORY 37
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ACTION--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ACTION</title>
<indexterm zone="IDMEF-CLASS-ID-ACTION--CAPS"><primary sortas="IDMEF_CLASS_ID_ACTION">IDMEF_CLASS_ID_ACTION</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ACTION 38
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-CONFIDENCE-RATING--CAPS" role="macro">
<title>IDMEF_CLASS_ID_CONFIDENCE_RATING</title>
<indexterm zone="IDMEF-CLASS-ID-CONFIDENCE-RATING--CAPS"><primary sortas="IDMEF_CLASS_ID_CONFIDENCE_RATING">IDMEF_CLASS_ID_CONFIDENCE_RATING</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_CONFIDENCE_RATING 39
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-CONFIDENCE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_CONFIDENCE</title>
<indexterm zone="IDMEF-CLASS-ID-CONFIDENCE--CAPS"><primary sortas="IDMEF_CLASS_ID_CONFIDENCE">IDMEF_CLASS_ID_CONFIDENCE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_CONFIDENCE 40
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ASSESSMENT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ASSESSMENT</title>
<indexterm zone="IDMEF-CLASS-ID-ASSESSMENT--CAPS"><primary sortas="IDMEF_CLASS_ID_ASSESSMENT">IDMEF_CLASS_ID_ASSESSMENT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ASSESSMENT 41
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-TOOL-ALERT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_TOOL_ALERT</title>
<indexterm zone="IDMEF-CLASS-ID-TOOL-ALERT--CAPS"><primary sortas="IDMEF_CLASS_ID_TOOL_ALERT">IDMEF_CLASS_ID_TOOL_ALERT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_TOOL_ALERT 42
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-CORRELATION-ALERT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_CORRELATION_ALERT</title>
<indexterm zone="IDMEF-CLASS-ID-CORRELATION-ALERT--CAPS"><primary sortas="IDMEF_CLASS_ID_CORRELATION_ALERT">IDMEF_CLASS_ID_CORRELATION_ALERT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_CORRELATION_ALERT 43
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-OVERFLOW-ALERT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_OVERFLOW_ALERT</title>
<indexterm zone="IDMEF-CLASS-ID-OVERFLOW-ALERT--CAPS"><primary sortas="IDMEF_CLASS_ID_OVERFLOW_ALERT">IDMEF_CLASS_ID_OVERFLOW_ALERT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_OVERFLOW_ALERT 44
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ALERT-TYPE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ALERT_TYPE</title>
<indexterm zone="IDMEF-CLASS-ID-ALERT-TYPE--CAPS"><primary sortas="IDMEF_CLASS_ID_ALERT_TYPE">IDMEF_CLASS_ID_ALERT_TYPE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ALERT_TYPE 45
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-ALERT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_ALERT</title>
<indexterm zone="IDMEF-CLASS-ID-ALERT--CAPS"><primary sortas="IDMEF_CLASS_ID_ALERT">IDMEF_CLASS_ID_ALERT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_ALERT 46
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-HEARTBEAT--CAPS" role="macro">
<title>IDMEF_CLASS_ID_HEARTBEAT</title>
<indexterm zone="IDMEF-CLASS-ID-HEARTBEAT--CAPS"><primary sortas="IDMEF_CLASS_ID_HEARTBEAT">IDMEF_CLASS_ID_HEARTBEAT</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_HEARTBEAT 47
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-MESSAGE-TYPE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_MESSAGE_TYPE</title>
<indexterm zone="IDMEF-CLASS-ID-MESSAGE-TYPE--CAPS"><primary sortas="IDMEF_CLASS_ID_MESSAGE_TYPE">IDMEF_CLASS_ID_MESSAGE_TYPE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_MESSAGE_TYPE 48
</programlisting>
<para>
</para></refsect2>
<refsect2 id="IDMEF-CLASS-ID-MESSAGE--CAPS" role="macro">
<title>IDMEF_CLASS_ID_MESSAGE</title>
<indexterm zone="IDMEF-CLASS-ID-MESSAGE--CAPS"><primary sortas="IDMEF_CLASS_ID_MESSAGE">IDMEF_CLASS_ID_MESSAGE</primary></indexterm><programlisting>#define IDMEF_CLASS_ID_MESSAGE 49
</programlisting>
<para>
</para></refsect2>

</refsect1>



<refsect1 id="libprelude-idmef-tree-wrap.see-also">
<title>See Also</title>
<para>
<link linkend="idmef-path-t"><type>idmef_path_t</type></link> for the high level IDMEF API.
</para>
</refsect1>

</refentry>
