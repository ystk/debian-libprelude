/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Prelude__Client swig_types[0]
#define SWIGTYPE_p_Prelude__ClientEasy swig_types[1]
#define SWIGTYPE_p_Prelude__ClientProfile swig_types[2]
#define SWIGTYPE_p_Prelude__Connection swig_types[3]
#define SWIGTYPE_p_Prelude__ConnectionPool swig_types[4]
#define SWIGTYPE_p_Prelude__IDMEF swig_types[5]
#define SWIGTYPE_p_Prelude__IDMEFCriteria swig_types[6]
#define SWIGTYPE_p_Prelude__IDMEFCriterion swig_types[7]
#define SWIGTYPE_p_Prelude__IDMEFPath swig_types[8]
#define SWIGTYPE_p_Prelude__IDMEFTime swig_types[9]
#define SWIGTYPE_p_Prelude__IDMEFValue swig_types[10]
#define SWIGTYPE_p_Prelude__PreludeError swig_types[11]
#define SWIGTYPE_p_Prelude__PreludeLog swig_types[12]
#define SWIGTYPE_p_allocator_type swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_difference_type swig_types[15]
#define SWIGTYPE_p_f_int_p_q_const__char__void swig_types[16]
#define SWIGTYPE_p_idmef_class_id_t swig_types[17]
#define SWIGTYPE_p_idmef_criteria_t swig_types[18]
#define SWIGTYPE_p_idmef_criterion_operator_t swig_types[19]
#define SWIGTYPE_p_idmef_message_t swig_types[20]
#define SWIGTYPE_p_idmef_path_t swig_types[21]
#define SWIGTYPE_p_idmef_time_t swig_types[22]
#define SWIGTYPE_p_idmef_value_t swig_types[23]
#define SWIGTYPE_p_idmef_value_type_id_t swig_types[24]
#define SWIGTYPE_p_int swig_types[25]
#define SWIGTYPE_p_long_long swig_types[26]
#define SWIGTYPE_p_p_void swig_types[27]
#define SWIGTYPE_p_prelude_client_profile_t swig_types[28]
#define SWIGTYPE_p_prelude_client_t swig_types[29]
#define SWIGTYPE_p_prelude_connection_pool_t swig_types[30]
#define SWIGTYPE_p_prelude_connection_t swig_types[31]
#define SWIGTYPE_p_short swig_types[32]
#define SWIGTYPE_p_size_type swig_types[33]
#define SWIGTYPE_p_std__exception swig_types[34]
#define SWIGTYPE_p_swig__ConstIterator swig_types[35]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[36]
#define SWIGTYPE_p_swig__Iterator swig_types[37]
#define SWIGTYPE_p_time_t swig_types[38]
#define SWIGTYPE_p_timeval swig_types[39]
#define SWIGTYPE_p_unsigned_char swig_types[40]
#define SWIGTYPE_p_unsigned_int swig_types[41]
#define SWIGTYPE_p_unsigned_long_long swig_types[42]
#define SWIGTYPE_p_unsigned_short swig_types[43]
#define SWIGTYPE_p_value_type swig_types[44]
#define SWIGTYPE_p_void swig_types[45]
static swig_type_info *swig_types[47];
static swig_module_info swig_module = {swig_types, 46, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_PreludeEasy
#define SWIG_name    "PreludeEasy"

static VALUE mPreludeEasy;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


#include <iostream>


#include <stdexcept>


namespace swig {
  class GC_VALUE {
  protected:
    // Hash of all GC_VALUE's currently in use
    static VALUE _hash;

    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    static void initialize()
    {
      if ( _hash == Qnil ) 
	{ 
	  _hash = rb_hash_new();
	  rb_gc_register_address( &_hash );
	}
    }

    // this function is never called.  Provided for symmetry only.
    static void cleanup()
    {
      rb_gc_unregister_address( &_hash );
    }

    GC_VALUE() : _obj( Qnil )
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      GC_register();
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      GC_register();
    }
    
    ~GC_VALUE() 
    {
      GC_unregister();
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      GC_unregister();
      _obj = item._obj;
      GC_register();
      return *this;
    }

    void GC_register()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
      ++n;
      rb_hash_aset( _hash, _obj, INT2NUM(n) );
    }

    void GC_unregister()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if ( BUILTIN_TYPE(_obj) == T_NONE ) return;

      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
      --n;
      if ( n )
	rb_hash_aset( _hash, _obj, INT2NUM(n) );
      else
	rb_hash_delete( _hash, _obj );
    }
    
    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_protect_funcall( VALUE p )
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall( args->src, args->id, args->nargs, args->target );
    }


#define GC_VALUE_CMP( op_id, op, cmp, cmpval ) \
    bool op( const GC_VALUE& other ) const \
    { \
      if ( FIXNUM_P(_obj) && FIXNUM_P(other._obj) ) \
      { \
	return _obj cmp other._obj; \
      } \
      bool  res = false; \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      if ( rb_respond_to( _obj, op_id ) == Qtrue ) \
	{ \
	  int status; \
	  OpArgs  args; \
          args.src    = _obj; \
	  args.id     = op_id; \
	  args.nargs  = 1; \
	  args.target = VALUE(other); \
	  ret = rb_protect( PROTECTFUNC(swig_protect_funcall), \
                            VALUE(&args), &status ); \
	} \
      if ( ret == Qnil ) { \
	VALUE a = rb_funcall(         _obj, hash_id, 0 ); \
	VALUE b = rb_funcall( VALUE(other), hash_id, 0 ); \
	res = a cmp b; \
      } \
      else \
	{ \
	  res = RTEST( ret ); \
	} \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return res; \
    }


    GC_VALUE_CMP( eq_id, operator==, ==, == 0 )
    GC_VALUE_CMP( lt_id, operator<,  < , <  0 )
    GC_VALUE_CMP( le_id, operator<=, <=, <= 0 )
    GC_VALUE_CMP( gt_id, operator>,  > , >  0 )
    GC_VALUE_CMP( ge_id, operator>=, >=, >= 0 )
#undef GC_VALUE_CMP

    bool operator!=( const GC_VALUE& other )
    {
      return !(this->operator==(other));
    }

#define GC_VALUE_UNARY( proc_id, op ) \
    GC_VALUE op() const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 0; \
      args.target = Qnil; \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return ret; \
    }

    GC_VALUE_UNARY( pos_id, operator+ )
    GC_VALUE_UNARY( neg_id, operator- )
    GC_VALUE_UNARY( inv_id, operator~ )
#undef GC_VALUE_BINARY

#define GC_VALUE_BINARY( proc_id, op ) \
    GC_VALUE op( const GC_VALUE& other ) const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 1; \
      args.target = VALUE(other); \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return GC_VALUE(ret); \
    }

    GC_VALUE_BINARY( add_id, operator+ );
    GC_VALUE_BINARY( sub_id, operator- );
    GC_VALUE_BINARY( mul_id, operator* );
    GC_VALUE_BINARY( div_id, operator/ );
    GC_VALUE_BINARY( mod_id, operator% );
    
    GC_VALUE_BINARY( and_id, operator& );
    GC_VALUE_BINARY( xor_id, operator^ );
    GC_VALUE_BINARY(  or_id, operator| );

    GC_VALUE_BINARY( lshift_id, operator<< );
    GC_VALUE_BINARY( rshift_id, operator>> );
#undef GC_VALUE_BINARY

  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  VALUE GC_VALUE::_hash = Qnil;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig/1.3.40/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/share/swig/1.3.40/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <list>
#include <sstream>

#ifndef SWIGPYTHON
# include "config.h"
# include "glthread/thread.h"
#endif

#include "prelude.hxx"
#include "prelude-log.hxx"
#include "prelude-error.hxx"
#include "prelude-connection.hxx"
#include "prelude-connection-pool.hxx"
#include "prelude-client-profile.hxx"
#include "prelude-client.hxx"
#include "prelude-client-easy.hxx"
#include "idmef-criteria.hxx"
#include "idmef-value.hxx"
#include "idmef-path.hxx"
#include "idmef-time.hxx"
#include "idmef.hxx"

using namespace Prelude;


#define TARGET_LANGUAGE_OUTPUT_TYPE VALUE *
int IDMEFValue_to_SWIG(const IDMEFValue &result, TARGET_LANGUAGE_OUTPUT_TYPE ret);


extern "C" {
#include "rubyio.h"
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>


namespace swig {
  template < class T >
  struct yield : public std::unary_function< T, bool >
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   * 
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   * 
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


static gl_thread_t __initial_thread;
static VALUE __prelude_log_func = Qnil;

static void _cb_ruby_log(int level, const char *str)
{
        static int cid = rb_intern("call");

        if ( (gl_thread_t) gl_thread_self() != __initial_thread )
                return;

        rb_funcall(__prelude_log_func, cid, 2, SWIG_From_int(level), SWIG_FromCharPtr(str));
}


static int _cb_ruby_write(prelude_msgbuf_t *fd, prelude_msg_t *msg)
{
        FILE *f;
        ssize_t ret;
        OpenFile *fptr;
        VALUE *io = (VALUE *) prelude_msgbuf_get_data(fd);

        GetOpenFile(*io, fptr);
        f = fptr->f;

        ret = fwrite((const char *) prelude_msg_get_message_data(msg), 1, prelude_msg_get_len(msg), f);
        if ( ret != prelude_msg_get_len(msg) )
                return prelude_error_from_errno(errno);

        prelude_msg_recycle(msg);

        return 0;
}


static ssize_t _cb_ruby_read(prelude_io_t *fd, void *buf, size_t size)
{
        FILE *f;
        ssize_t ret;
        OpenFile *fptr;
        VALUE *io = (VALUE *) prelude_io_get_fdptr(fd);

        GetOpenFile(*io, fptr);
        f = fptr->f;

        ret = fread(buf, 1, size, f);
        if ( ret < 0 )
                ret = prelude_error_from_errno(errno);

        else if ( ret == 0 )
                ret = prelude_error(PRELUDE_ERROR_EOF);

        return ret;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


/*@SWIG:/usr/share/swig/1.3.40/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long long *res = (long long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULL(obj) : rb_big2ull(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (VALUE obj, unsigned long long *val)
{ 
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE VALUE 
SWIG_From_long_SS_long  (long long value)
{
  return LL2NUM(value);
}


SWIGINTERNINLINE VALUE 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return ULL2NUM(value);
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


  namespace swig {
    template <>  struct traits<Prelude::Connection > {
      typedef pointer_category category;
      static const char* type_name() { return"Prelude::Connection"; }
    };
  }


namespace swig {
  template <class RubySeq, class Seq>
  inline void
  assign(const RubySeq& rubyseq, Seq* seq) {
    // seq->assign(rubyseq.begin(), rubyseq.end()); // not used as not always implemented
    typedef typename RubySeq::value_type value_type;
    typename RubySeq::const_iterator it = rubyseq.begin();
    for (;it != rubyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  RubySequence_Cont<value_type> rubyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return rubyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  // Partial specialization for GC_VALUE's.  No need to typecheck each
  // element.
  template< class Seq >
  struct traits_asptr_stdseq< Seq, swig::GC_VALUE > {
    typedef Seq sequence;
    typedef swig::GC_VALUE value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  if (seq) {
	    RubySequence_Cont<value_type> rubyseq(obj);
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return true;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static VALUE from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	VALUE obj = rb_ary_new2((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  RARRAY_PTR(obj)[i] = swig::from< value_type >(*it);
	}
	RARRAY_LEN(obj) = size;
	rb_obj_freeze(obj);  // treat as immutable result
	return obj;
      } else {
	rb_raise(rb_eRangeError,"sequence size not valid in ruby");
	return Qnil;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(VALUE obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static VALUE from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Prelude::Connection, std::allocator< Prelude::Connection > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Prelude::Connection" "," "std::allocator< Prelude::Connection >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<Prelude::IDMEFValue > {
      typedef pointer_category category;
      static const char* type_name() { return"Prelude::IDMEFValue"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Prelude::IDMEFValue, std::allocator< Prelude::IDMEFValue > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Prelude::IDMEFValue" "," "std::allocator< Prelude::IDMEFValue >" " >";
	  }
	};
      }
    

SWIGINTERN int
SWIG_AsCharArray(VALUE obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (VALUE obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (VALUE obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (VALUE obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (VALUE obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


/*@SWIG:/usr/share/swig/1.3.40/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long long *res = (long long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LL(obj) : rb_big2ll(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long_SS_long (VALUE obj, long long *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


/*@SWIG:/usr/share/swig/1.3.40/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


VALUE IDMEFValueList_to_SWIG(const Prelude::IDMEFValue &value)
{
        VALUE ary;
        int ret, j = 0;
        std::vector<Prelude::IDMEFValue> result = value;
        std::vector<Prelude::IDMEFValue>::const_iterator i;

        ary = rb_ary_new2(result.size());

        for ( i = result.begin(); i != result.end(); i++ ) {
                VALUE val;

                ret = IDMEFValue_to_SWIG(*i, &val);
                if ( ret < 0 )
                        return Qnil;

                RARRAY(ary)->ptr[j++] = val;
        }

        RARRAY(ary)->len = result.size();

        return ary;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}




int IDMEFValue_to_SWIG(const IDMEFValue &result, TARGET_LANGUAGE_OUTPUT_TYPE ret)
{
        std::stringstream s;
        idmef_value_t *value = result;
        idmef_value_type_id_t type = result.GetType();

        if ( type == IDMEF_VALUE_TYPE_STRING ) {
                prelude_string_t *str = idmef_value_get_string(value);
                *ret = SWIG_FromCharPtrAndSize(prelude_string_get_string(str), prelude_string_get_len(str));
        }

        else if ( type == IDMEF_VALUE_TYPE_INT8 )
                *ret = SWIG_From_int(idmef_value_get_int8(value));

        else if ( type == IDMEF_VALUE_TYPE_UINT8 )
                *ret = SWIG_From_unsigned_SS_int(idmef_value_get_uint8(value));

        else if ( type == IDMEF_VALUE_TYPE_INT16 )
                *ret = SWIG_From_int(idmef_value_get_int16(value));

        else if ( type == IDMEF_VALUE_TYPE_UINT16 )
                *ret = SWIG_From_unsigned_SS_int(idmef_value_get_uint16(value));

        else if ( type == IDMEF_VALUE_TYPE_INT32 )
                *ret = SWIG_From_int(idmef_value_get_int32(value));

        else if ( type == IDMEF_VALUE_TYPE_UINT32 )
                *ret = SWIG_From_unsigned_SS_int(idmef_value_get_uint32(value));

        else if ( type == IDMEF_VALUE_TYPE_INT64 )
                *ret = SWIG_From_long_SS_long(idmef_value_get_int64(value));

        else if ( type == IDMEF_VALUE_TYPE_UINT64 )
                *ret = SWIG_From_unsigned_SS_long_SS_long(idmef_value_get_uint64(value));

        else if ( type == IDMEF_VALUE_TYPE_FLOAT )
                *ret = SWIG_From_float(idmef_value_get_float(value));

        else if ( type == IDMEF_VALUE_TYPE_DOUBLE )
                *ret = SWIG_From_double(idmef_value_get_double(value));

        else if ( type == IDMEF_VALUE_TYPE_ENUM ) {
                const char *s = idmef_class_enum_to_string(idmef_value_get_class(value), idmef_value_get_enum(value));
                *ret = SWIG_FromCharPtr(s);
        }

        else if ( type == IDMEF_VALUE_TYPE_TIME ) {
                IDMEFTime time = result;
                *ret = SWIG_NewPointerObj(new IDMEFTime(time), SWIGTYPE_p_Prelude__IDMEFTime, 1);
        }

        else if ( type == IDMEF_VALUE_TYPE_LIST )
                *ret = IDMEFValueList_to_SWIG(result);

        else if ( type == IDMEF_VALUE_TYPE_DATA ) {
                idmef_data_t *d = idmef_value_get_data(value);
                idmef_data_type_t t = idmef_data_get_type(d);

                if ( t == IDMEF_DATA_TYPE_CHAR ||
                     t == IDMEF_DATA_TYPE_BYTE || t == IDMEF_DATA_TYPE_BYTE_STRING )
                        *ret = SWIG_FromCharPtrAndSize((const char *)idmef_data_get_data(d), idmef_data_get_len(d));

                else if ( t == IDMEF_DATA_TYPE_CHAR_STRING )
                        *ret = SWIG_FromCharPtrAndSize((const char *)idmef_data_get_data(d), idmef_data_get_len(d) - 1);

                else if ( t == IDMEF_DATA_TYPE_FLOAT )
                        *ret = SWIG_From_float(idmef_data_get_float(d));

                else if ( t == IDMEF_DATA_TYPE_UINT32 )
                        *ret = SWIG_From_unsigned_SS_int(idmef_data_get_uint32(d));

                else if ( t == IDMEF_DATA_TYPE_UINT64 )
                        *ret = SWIG_From_unsigned_SS_long_SS_long(idmef_data_get_uint64(d));
        }

        else if ( type == IDMEF_VALUE_TYPE_CLASS )
                *ret = SWIG_NewPointerObj(new IDMEFValue(idmef_value_ref(value)), SWIGTYPE_p_Prelude__IDMEFValue, 1);

        else return -1;

        return 0;
}

SWIGINTERN void Prelude_IDMEF_Write(Prelude::IDMEF *self,void *nocast_p){
                self->_genericWrite(_cb_ruby_write, nocast_p);
        }
SWIGINTERN void Prelude_IDMEF_Read(Prelude::IDMEF *self,void *nocast_p){
                self->_genericRead(_cb_ruby_read, nocast_p);
        }
SWIGINTERN Prelude::IDMEF &Prelude_IDMEF_operator_Sg__Sg_(Prelude::IDMEF *self,void *nocast_p){
                self->_genericWrite(_cb_ruby_write, nocast_p);
                return *self;
        }
SWIGINTERN Prelude::IDMEF &Prelude_IDMEF_operator_Sl__Sl_(Prelude::IDMEF *self,void *nocast_p){
                self->_genericRead(_cb_ruby_read, nocast_p);
                return *self;
        }
swig_class SwigClassGC_VALUE;


/*
  Document-method: PreludeEasy::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__GC_VALUE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::GC_VALUE const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::GC_VALUE * >(argp1);
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__GC_VALUE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::GC_VALUE const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::GC_VALUE * >(argp1);
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: PreludeEasy::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: PreludeEasy::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CheckVersion__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","CheckVersion", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (char *)CheckVersion((char const *)arg1);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CheckVersion__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (char *)CheckVersion();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CheckVersion(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_CheckVersion__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CheckVersion__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CheckVersion", 
    "    char const * CheckVersion(char const *version)\n"
    "    char const * CheckVersion()\n");
  
  return Qnil;
}


swig_class SwigClassPreludeLog;

SWIGINTERN VALUE
_wrap_PreludeLog_SetLevel(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","Prelude::PreludeLog::SetLevel", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  try {
    Prelude::PreludeLog::SetLevel(arg1);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PreludeLog_SetDebugLevel(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","Prelude::PreludeLog::SetDebugLevel", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  try {
    Prelude::PreludeLog::SetDebugLevel(arg1);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PreludeLog_SetFlags(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","Prelude::PreludeLog::SetFlags", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  try {
    Prelude::PreludeLog::SetFlags(arg1);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PreludeLog_GetFlags(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (int)Prelude::PreludeLog::GetFlags();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PreludeLog_SetLogfile(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::PreludeLog::SetLogfile", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    Prelude::PreludeLog::SetLogfile((char const *)arg1);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PreludeLog_SetCallback(int argc, VALUE *argv, VALUE self) {
  void (*arg1)(int,char const *) = (void (*)(int,char const *)) 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if ( ! SWIG_Ruby_isCallable(argv[0]) )
    SWIG_exception_fail(SWIG_ValueError, "Argument is not a callable object");
    
    __prelude_log_func = argv[0];
    rb_global_variable(&argv[0]);
    
    arg1 = _cb_ruby_log;
  }
  try {
    Prelude::PreludeLog::SetCallback(arg1);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PreludeLog_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PreludeLog_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__PreludeLog);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PreludeLog(int argc, VALUE *argv, VALUE self) {
  Prelude::PreludeLog *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Prelude::PreludeLog *)new Prelude::PreludeLog();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Prelude_PreludeLog(Prelude::PreludeLog *arg1) {
    delete arg1;
}

swig_class SwigClassPreludeError;

SWIGINTERN void
free_Prelude_PreludeError(Prelude::PreludeError *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_PreludeError__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Prelude::PreludeError *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","Prelude::PreludeError", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  try {
    result = (Prelude::PreludeError *)new Prelude::PreludeError(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PreludeError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PreludeError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__PreludeError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PreludeError__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  Prelude::PreludeError *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","Prelude::PreludeError", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    result = (Prelude::PreludeError *)new Prelude::PreludeError(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PreludeError(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PreludeError__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PreludeError__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "PreludeError.new", 
    "    PreludeError.new(int error)\n"
    "    PreludeError.new(std::string const message)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PreludeError_what(int argc, VALUE *argv, VALUE self) {
  Prelude::PreludeError *arg1 = (Prelude::PreludeError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__PreludeError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::PreludeError const *","what", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::PreludeError * >(argp1);
  try {
    result = (char *)((Prelude::PreludeError const *)arg1)->what();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PreludeError___str__(int argc, VALUE *argv, VALUE self) {
  Prelude::PreludeError *arg1 = (Prelude::PreludeError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__PreludeError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::PreludeError const *","operator const std::string", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::PreludeError * >(argp1);
  try {
    result = ((Prelude::PreludeError const *)arg1)->operator const std::string();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassConnection;

SWIGINTERN void
free_Prelude_Connection(Prelude::Connection *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_Connection__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (Prelude::Connection *)new Prelude::Connection();
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Connection__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::Connection *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::Connection", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::Connection *)new Prelude::Connection((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Connection__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::Connection *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__Connection,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection const &","Prelude::Connection", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::Connection const &","Prelude::Connection", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (Prelude::Connection *)new Prelude::Connection((Prelude::Connection const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Connection__SWIG_3(int argc, VALUE *argv, VALUE self) {
  prelude_connection_t *arg1 = (prelude_connection_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Prelude::Connection *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_prelude_connection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "prelude_connection_t *","Prelude::Connection", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< prelude_connection_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Prelude::Connection", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (Prelude::Connection *)new Prelude::Connection(arg1,arg2);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Connection_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Connection_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__Connection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Connection__SWIG_4(int argc, VALUE *argv, VALUE self) {
  prelude_connection_t *arg1 = (prelude_connection_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::Connection *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_prelude_connection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "prelude_connection_t *","Prelude::Connection", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< prelude_connection_t * >(argp1);
  try {
    result = (Prelude::Connection *)new Prelude::Connection(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Connection(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Connection__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__Connection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Connection__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prelude_connection_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Connection__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Connection__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prelude_connection_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Connection__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Connection.new", 
    "    Connection.new()\n"
    "    Connection.new(char const *addr)\n"
    "    Connection.new(Prelude::Connection const &con)\n"
    "    Connection.new(prelude_connection_t *con, bool own_data)\n"
    "    Connection.new(prelude_connection_t *con)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetConnection(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prelude_connection_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetConnection", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (prelude_connection_t *)(arg1)->GetConnection();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prelude_connection_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_Close(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","Close", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    (arg1)->Close();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_Connect(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  Prelude::ClientProfile *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","Connect", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__ClientProfile,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::ClientProfile &","Connect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::ClientProfile &","Connect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::ClientProfile * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Connect", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  try {
    (arg1)->Connect(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_SetState(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","SetState", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetState", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->SetState(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetState(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetState", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (int)(arg1)->GetState();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_SetData(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","SetData", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","SetData", 2, argv[0] )); 
  }
  try {
    (arg1)->SetData(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetData(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetData", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (void *)(arg1)->GetData();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetPermission(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetPermission", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (int)(arg1)->GetPermission();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_SetPeerAnalyzerid(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","SetPeerAnalyzerid", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint64_t","SetPeerAnalyzerid", 2, argv[0] ));
  } 
  arg2 = static_cast< uint64_t >(val2);
  try {
    (arg1)->SetPeerAnalyzerid(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetPeerAnalyzerid(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetPeerAnalyzerid", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (uint64_t)(arg1)->GetPeerAnalyzerid();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetLocalAddr(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetLocalAddr", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (char *)(arg1)->GetLocalAddr();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetLocalPort(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetLocalPort", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (unsigned int)(arg1)->GetLocalPort();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetPeerAddr(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetPeerAddr", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (char *)(arg1)->GetPeerAddr();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetPeerPort(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetPeerPort", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (unsigned int)(arg1)->GetPeerPort();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_IsAlive(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","IsAlive", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (bool)(arg1)->IsAlive();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_GetFd(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","GetFd", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (int)(arg1)->GetFd();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Connection_RecvIDMEF(int argc, VALUE *argv, VALUE self) {
  Prelude::Connection *arg1 = (Prelude::Connection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEF result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Connection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Connection *","RecvIDMEF", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Connection * >(argp1);
  try {
    result = (arg1)->RecvIDMEF();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new Prelude::IDMEF(static_cast< const Prelude::IDMEF& >(result))), SWIGTYPE_p_Prelude__IDMEF, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassConnectionPool;

SWIGINTERN void
free_Prelude_ConnectionPool(Prelude::ConnectionPool *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_ConnectionPool__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (Prelude::ConnectionPool *)new Prelude::ConnectionPool();
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ConnectionPool__SWIG_1(int argc, VALUE *argv, VALUE self) {
  prelude_connection_pool_t *arg1 = (prelude_connection_pool_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::ConnectionPool *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_prelude_connection_pool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "prelude_connection_pool_t *","Prelude::ConnectionPool", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< prelude_connection_pool_t * >(argp1);
  try {
    result = (Prelude::ConnectionPool *)new Prelude::ConnectionPool(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ConnectionPool__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::ConnectionPool *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__ConnectionPool,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool const &","Prelude::ConnectionPool", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::ConnectionPool const &","Prelude::ConnectionPool", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  try {
    result = (Prelude::ConnectionPool *)new Prelude::ConnectionPool((Prelude::ConnectionPool const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ConnectionPool_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ConnectionPool_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__ConnectionPool);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ConnectionPool__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Prelude::ConnectionPool *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__ClientProfile,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile &","Prelude::ConnectionPool", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::ClientProfile &","Prelude::ConnectionPool", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Prelude::ConnectionPool", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Prelude::ConnectionPool *)new Prelude::ConnectionPool(*arg1,arg2);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ConnectionPool(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ConnectionPool__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prelude_connection_pool_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ConnectionPool__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__ConnectionPool, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ConnectionPool__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__ClientProfile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ConnectionPool__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ConnectionPool.new", 
    "    ConnectionPool.new()\n"
    "    ConnectionPool.new(prelude_connection_pool_t *pool)\n"
    "    ConnectionPool.new(Prelude::ConnectionPool const &pool)\n"
    "    ConnectionPool.new(Prelude::ClientProfile &cp, int permission)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_Init(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","Init", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  try {
    (arg1)->Init();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_SetConnectionString(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","SetConnectionString", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetConnectionString", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->SetConnectionString((char const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_GetConnectionString(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","GetConnectionString", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  try {
    result = (char *)(arg1)->GetConnectionString();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_GetConnectionList(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Prelude::Connection,std::allocator< Prelude::Connection > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","GetConnectionList", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  try {
    result = (arg1)->GetConnectionList();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = swig::from(static_cast< std::vector<Prelude::Connection,std::allocator< Prelude::Connection > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_SetFlags(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","SetFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetFlags", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->SetFlags(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_GetFlags(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","GetFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  try {
    result = (int)(arg1)->GetFlags();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_SetData(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","SetData", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","SetData", 2, argv[0] )); 
  }
  try {
    (arg1)->SetData(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_GetData(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","GetData", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  try {
    result = (void *)(arg1)->GetData();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_AddConnection(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  Prelude::Connection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","AddConnection", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__Connection,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::Connection","AddConnection", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::Connection","AddConnection", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Prelude::Connection * >(argp2));
    }
  }
  try {
    (arg1)->AddConnection(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_DelConnection(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  Prelude::Connection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","DelConnection", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__Connection,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::Connection","DelConnection", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::Connection","DelConnection", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Prelude::Connection * >(argp2));
    }
  }
  try {
    (arg1)->DelConnection(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_SetConnectionAlive(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  Prelude::Connection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","SetConnectionAlive", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__Connection,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::Connection &","SetConnectionAlive", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::Connection &","SetConnectionAlive", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::Connection * >(argp2);
  try {
    (arg1)->SetConnectionAlive(*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_SetConnectionDead(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  Prelude::Connection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","SetConnectionDead", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__Connection,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::Connection &","SetConnectionDead", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::Connection &","SetConnectionDead", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::Connection * >(argp2);
  try {
    (arg1)->SetConnectionDead(*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConnectionPool_SetRequiredPermission(int argc, VALUE *argv, VALUE self) {
  Prelude::ConnectionPool *arg1 = (Prelude::ConnectionPool *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ConnectionPool *","SetRequiredPermission", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ConnectionPool * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetRequiredPermission", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->SetRequiredPermission(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


swig_class SwigClassClientProfile;

SWIGINTERN VALUE
_wrap_new_ClientProfile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (Prelude::ClientProfile *)new Prelude::ClientProfile();
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ClientProfile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::ClientProfile *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::ClientProfile", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::ClientProfile *)new Prelude::ClientProfile((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ClientProfile__SWIG_2(int argc, VALUE *argv, VALUE self) {
  prelude_client_profile_t *arg1 = (prelude_client_profile_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::ClientProfile *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_prelude_client_profile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "prelude_client_profile_t *","Prelude::ClientProfile", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< prelude_client_profile_t * >(argp1);
  try {
    result = (Prelude::ClientProfile *)new Prelude::ClientProfile(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ClientProfile_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ClientProfile_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__ClientProfile);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ClientProfile__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::ClientProfile *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__ClientProfile,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile const &","Prelude::ClientProfile", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::ClientProfile const &","Prelude::ClientProfile", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (Prelude::ClientProfile *)new Prelude::ClientProfile((Prelude::ClientProfile const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ClientProfile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ClientProfile__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prelude_client_profile_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClientProfile__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__ClientProfile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClientProfile__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClientProfile__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ClientProfile.new", 
    "    ClientProfile.new()\n"
    "    ClientProfile.new(char const *profile)\n"
    "    ClientProfile.new(prelude_client_profile_t *profile)\n"
    "    ClientProfile.new(Prelude::ClientProfile const &p)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Prelude_ClientProfile(Prelude::ClientProfile *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ClientProfile_GetUid(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetUid", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (int)(arg1)->GetUid();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetGid(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetGid", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (int)(arg1)->GetGid();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetName(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (char *)(arg1)->GetName();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_SetName(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","SetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetName", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (int)(arg1)->SetName((char const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetAnalyzerId__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetAnalyzerId", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (uint64_t)(arg1)->GetAnalyzerId();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetAnalyzerId__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetAnalyzerId", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint64_t","GetAnalyzerId", 2, argv[0] ));
  } 
  arg2 = static_cast< uint64_t >(val2);
  try {
    (arg1)->GetAnalyzerId(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ClientProfile_GetAnalyzerId(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__ClientProfile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClientProfile_GetAnalyzerId__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__ClientProfile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClientProfile_GetAnalyzerId__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ClientProfile.GetAnalyzerId", 
    "    void ClientProfile.GetAnalyzerId()\n"
    "    void ClientProfile.GetAnalyzerId(uint64_t id)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetConfigFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetConfigFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetConfigFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetAnalyzeridFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetAnalyzeridFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetAnalyzeridFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetTlsKeyFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetTlsKeyFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetTlsKeyFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetTlsServerCaCertFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetTlsServerCaCertFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetTlsServerCaCertFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetTlsServerKeyCertFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetTlsServerKeyCertFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetTlsServerKeyCertFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetTlsServerCrlFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetTlsServerCrlFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetTlsServerCrlFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetTlsClientKeyCertFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetTlsClientKeyCertFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetTlsClientKeyCertFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetTlsClientTrustedCertFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetTlsClientTrustedCertFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetTlsClientTrustedCertFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetBackupDirname(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetBackupDirname", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetBackupDirname();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetProfileDirname(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetProfileDirname", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetProfileDirname();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_SetPrefix(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","SetPrefix", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetPrefix", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->SetPrefix((char const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProfile_GetPrefix(int argc, VALUE *argv, VALUE self) {
  Prelude::ClientProfile *arg1 = (Prelude::ClientProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__ClientProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::ClientProfile *","GetPrefix", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::ClientProfile * >(argp1);
  try {
    result = (arg1)->GetPrefix();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassClient;

SWIGINTERN void
free_Prelude_Client(Prelude::Client *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_Client__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::Client *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::Client", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::Client *)new Prelude::Client((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Client_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Client_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__Client);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Client__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::Client *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__Client,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client const &","Prelude::Client", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::Client const &","Prelude::Client", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    result = (Prelude::Client *)new Prelude::Client((Prelude::Client const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Client(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Client__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Client__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Client.new", 
    "    Client.new(char const *profile)\n"
    "    Client.new(Prelude::Client const &client)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_Start(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","Start", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    (arg1)->Start();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_Init(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","Init", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    (arg1)->Init();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_GetClient(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prelude_client_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","GetClient", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    result = (prelude_client_t *)(arg1)->GetClient();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prelude_client_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_SendIDMEF(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","SendIDMEF", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF const &","SendIDMEF", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF const &","SendIDMEF", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  try {
    (arg1)->SendIDMEF((Prelude::IDMEF const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_RecvIDMEF__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","RecvIDMEF", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","RecvIDMEF", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","RecvIDMEF", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","RecvIDMEF", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = (int)(arg1)->RecvIDMEF(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_RecvIDMEF__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","RecvIDMEF", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","RecvIDMEF", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","RecvIDMEF", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  try {
    result = (int)(arg1)->RecvIDMEF(*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Client_RecvIDMEF(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Client_RecvIDMEF__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Client_RecvIDMEF__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Client.RecvIDMEF", 
    "    int Client.RecvIDMEF(Prelude::IDMEF &idmef, int timeout)\n"
    "    int Client.RecvIDMEF(Prelude::IDMEF &idmef)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_GetFlags(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","GetFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    result = (int)(arg1)->GetFlags();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_SetFlags(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","SetFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetFlags", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->SetFlags(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_GetRequiredPermission(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","GetRequiredPermission", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    result = (int)(arg1)->GetRequiredPermission();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_SetRequiredPermission(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","SetRequiredPermission", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetRequiredPermission", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->SetRequiredPermission(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_GetConfigFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","GetConfigFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    result = (char *)(arg1)->GetConfigFilename();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_SetConfigFilename(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","SetConfigFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetConfigFilename", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->SetConfigFilename((char const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_GetConnectionPool(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::ConnectionPool *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","GetConnectionPool", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  try {
    result = (Prelude::ConnectionPool *) &(arg1)->GetConnectionPool();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Prelude__ConnectionPool, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_SetConnectionPool(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  Prelude::ConnectionPool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","SetConnectionPool", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__ConnectionPool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::ConnectionPool","SetConnectionPool", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::ConnectionPool","SetConnectionPool", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Prelude::ConnectionPool * >(argp2));
    }
  }
  try {
    (arg1)->SetConnectionPool(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::Client.<<

  call-seq:
    <<(idmef) -> Client

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_Client___lshift__(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Prelude::Client *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","operator <<", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","operator <<", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  try {
    result = (Prelude::Client *) &(arg1)->operator <<(*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Prelude__Client, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::Client.>>

  call-seq:
    >>(idmef) -> Client

Right shifting operator or extracting operator.
*/
SWIGINTERN VALUE
_wrap_Client___rshift__(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = (Prelude::Client *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Prelude::Client *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client *","operator >>", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","operator >>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","operator >>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  try {
    result = (Prelude::Client *) &(arg1)->operator >>(*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Prelude__Client, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Client_SetRecvTimeout(int argc, VALUE *argv, VALUE self) {
  Prelude::Client *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Prelude::Client *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__Client,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::Client &","Prelude::Client::SetRecvTimeout", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::Client &","Prelude::Client::SetRecvTimeout", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::Client * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Prelude::Client::SetRecvTimeout", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Prelude::Client *) &Prelude::Client::SetRecvTimeout(*arg1,arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Prelude__Client, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassClientEasy;

SWIGINTERN VALUE
_wrap_new_ClientEasy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  Prelude::ClientEasy *result = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Prelude::ClientEasy", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 4, argv[3] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 5, argv[4] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 6, argv[5] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  try {
    result = (Prelude::ClientEasy *)new Prelude::ClientEasy((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ClientEasy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  Prelude::ClientEasy *result = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Prelude::ClientEasy", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 4, argv[3] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 5, argv[4] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  try {
    result = (Prelude::ClientEasy *)new Prelude::ClientEasy((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ClientEasy__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  Prelude::ClientEasy *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Prelude::ClientEasy", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 4, argv[3] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  try {
    result = (Prelude::ClientEasy *)new Prelude::ClientEasy((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ClientEasy__SWIG_3(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  Prelude::ClientEasy *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Prelude::ClientEasy", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (Prelude::ClientEasy *)new Prelude::ClientEasy((char const *)arg1,arg2,(char const *)arg3);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ClientEasy__SWIG_4(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Prelude::ClientEasy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Prelude::ClientEasy", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Prelude::ClientEasy *)new Prelude::ClientEasy((char const *)arg1,arg2);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ClientEasy_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ClientEasy_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__ClientEasy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ClientEasy__SWIG_5(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::ClientEasy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::ClientEasy", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::ClientEasy *)new Prelude::ClientEasy((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ClientEasy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs;
  if (argc > 6) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClientEasy__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ClientEasy__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClientEasy__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ClientEasy__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ClientEasy__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_ClientEasy__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "ClientEasy.new", 
    "    ClientEasy.new(char const *profile, int permission, char const *_model, char const *_class, char const *_manufacturer, char const *_version)\n"
    "    ClientEasy.new(char const *profile, int permission, char const *_model, char const *_class, char const *_manufacturer)\n"
    "    ClientEasy.new(char const *profile, int permission, char const *_model, char const *_class)\n"
    "    ClientEasy.new(char const *profile, int permission, char const *_model)\n"
    "    ClientEasy.new(char const *profile, int permission)\n"
    "    ClientEasy.new(char const *profile)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Prelude_ClientEasy(Prelude::ClientEasy *arg1) {
    delete arg1;
}

swig_class SwigClassIDMEFCriterion;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IDMEFCriterion_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IDMEFCriterion_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__IDMEFCriterion);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IDMEFCriterion(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriterion *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Prelude::IDMEFCriterion *)new Prelude::IDMEFCriterion();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Prelude_IDMEFCriterion(Prelude::IDMEFCriterion *arg1) {
    delete arg1;
}

swig_class SwigClassIDMEFCriteria;

SWIGINTERN void
free_Prelude_IDMEFCriteria(Prelude::IDMEFCriteria *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_IDMEFCriteria__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (Prelude::IDMEFCriteria *)new Prelude::IDMEFCriteria();
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFCriteria__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::IDMEFCriteria *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__IDMEFCriteria,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria const &","Prelude::IDMEFCriteria", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFCriteria const &","Prelude::IDMEFCriteria", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp1);
  try {
    result = (Prelude::IDMEFCriteria *)new Prelude::IDMEFCriteria((Prelude::IDMEFCriteria const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFCriteria__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::IDMEFCriteria *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::IDMEFCriteria", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::IDMEFCriteria *)new Prelude::IDMEFCriteria((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFCriteria__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Prelude::IDMEFCriteria *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","Prelude::IDMEFCriteria", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","Prelude::IDMEFCriteria", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  try {
    result = (Prelude::IDMEFCriteria *)new Prelude::IDMEFCriteria((std::string const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IDMEFCriteria_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IDMEFCriteria_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__IDMEFCriteria);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IDMEFCriteria__SWIG_4(int argc, VALUE *argv, VALUE self) {
  idmef_criteria_t *arg1 = (idmef_criteria_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFCriteria *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_idmef_criteria_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "idmef_criteria_t *","Prelude::IDMEFCriteria", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< idmef_criteria_t * >(argp1);
  try {
    result = (Prelude::IDMEFCriteria *)new Prelude::IDMEFCriteria(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IDMEFCriteria(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_IDMEFCriteria__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFCriteria, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFCriteria__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_idmef_criteria_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFCriteria__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFCriteria__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFCriteria__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "IDMEFCriteria.new", 
    "    IDMEFCriteria.new()\n"
    "    IDMEFCriteria.new(Prelude::IDMEFCriteria const &criteria)\n"
    "    IDMEFCriteria.new(char const *criteria)\n"
    "    IDMEFCriteria.new(std::string const &criteria)\n"
    "    IDMEFCriteria.new(idmef_criteria_t *criteria)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFCriteria_Match(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *arg1 = (Prelude::IDMEFCriteria *) 0 ;
  Prelude::IDMEF *arg2 = (Prelude::IDMEF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFCriteria, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria *","Match", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Match", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  try {
    result = (int)(arg1)->Match(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFCriteria_Clone(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *arg1 = (Prelude::IDMEFCriteria *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFCriteria result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFCriteria, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria *","Clone", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp1);
  try {
    result = (arg1)->Clone();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new Prelude::IDMEFCriteria(static_cast< const Prelude::IDMEFCriteria& >(result))), SWIGTYPE_p_Prelude__IDMEFCriteria, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFCriteria_ANDCriteria(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *arg1 = (Prelude::IDMEFCriteria *) 0 ;
  Prelude::IDMEFCriteria *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFCriteria, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria *","ANDCriteria", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFCriteria,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria const &","ANDCriteria", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFCriteria const &","ANDCriteria", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp2);
  try {
    (arg1)->ANDCriteria((Prelude::IDMEFCriteria const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFCriteria_ORCriteria(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *arg1 = (Prelude::IDMEFCriteria *) 0 ;
  Prelude::IDMEFCriteria *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFCriteria, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria *","ORCriteria", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFCriteria,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria const &","ORCriteria", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFCriteria const &","ORCriteria", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp2);
  try {
    (arg1)->ORCriteria((Prelude::IDMEFCriteria const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFCriteria_ToString(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *arg1 = (Prelude::IDMEFCriteria *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFCriteria, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria const *","ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp1);
  try {
    result = ((Prelude::IDMEFCriteria const *)arg1)->ToString();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFCriteria___str__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFCriteria *arg1 = (Prelude::IDMEFCriteria *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFCriteria, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFCriteria const *","operator const std::string", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFCriteria * >(argp1);
  try {
    result = ((Prelude::IDMEFCriteria const *)arg1)->operator const std::string();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassIDMEFValue;

SWIGINTERN VALUE
_wrap_IDMEFValue_GetType(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFValue *arg1 = (Prelude::IDMEFValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  idmef_value_type_id_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFValue const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFValue * >(argp1);
  try {
    result = ((Prelude::IDMEFValue const *)arg1)->GetType();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new idmef_value_type_id_t(static_cast< const idmef_value_type_id_t& >(result))), SWIGTYPE_p_idmef_value_type_id_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFValue_IsNull(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFValue *arg1 = (Prelude::IDMEFValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFValue const *","IsNull", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFValue * >(argp1);
  try {
    result = (bool)((Prelude::IDMEFValue const *)arg1)->IsNull();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue();
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Prelude_IDMEFValue(Prelude::IDMEFValue *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFValue *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__IDMEFValue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFValue const &","Prelude::IDMEFValue", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFValue const &","Prelude::IDMEFValue", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFValue * >(argp1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue((Prelude::IDMEFValue const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > arg1 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > *ptr = (std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > *)0;
    int res = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > >","Prelude::IDMEFValue", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_3(int argc, VALUE *argv, VALUE self) {
  idmef_value_t *arg1 = (idmef_value_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_idmef_value_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "idmef_value_t *","Prelude::IDMEFValue", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< idmef_value_t * >(argp1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_4(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Prelude::IDMEFValue", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_5(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::IDMEFValue", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_6(int argc, VALUE *argv, VALUE self) {
  int8_t arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int8_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< int8_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_7(int argc, VALUE *argv, VALUE self) {
  uint8_t arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "uint8_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< uint8_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_8(int argc, VALUE *argv, VALUE self) {
  int16_t arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_short(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int16_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< int16_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_9(int argc, VALUE *argv, VALUE self) {
  uint16_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_short(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "uint16_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< uint16_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_10(int argc, VALUE *argv, VALUE self) {
  int32_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int32_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< int32_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_11(int argc, VALUE *argv, VALUE self) {
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "uint32_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< uint32_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_12(int argc, VALUE *argv, VALUE self) {
  int64_t arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_long_SS_long(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int64_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< int64_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_13(int argc, VALUE *argv, VALUE self) {
  uint64_t arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "uint64_t","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< uint64_t >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_14(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< float >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_15(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Prelude::IDMEFValue", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IDMEFValue_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IDMEFValue_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__IDMEFValue);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IDMEFValue__SWIG_16(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime &","Prelude::IDMEFValue", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime &","Prelude::IDMEFValue", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (Prelude::IDMEFValue *)new Prelude::IDMEFValue(*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IDMEFValue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_IDMEFValue__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFValue, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_idmef_value_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_16(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_9(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_8(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_11(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_10(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_13(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_12(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_14(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_15(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFValue__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "IDMEFValue.new", 
    "    IDMEFValue.new()\n"
    "    IDMEFValue.new(Prelude::IDMEFValue const &value)\n"
    "    IDMEFValue.new(std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > value)\n"
    "    IDMEFValue.new(idmef_value_t *value)\n"
    "    IDMEFValue.new(std::string value)\n"
    "    IDMEFValue.new(char const *value)\n"
    "    IDMEFValue.new(int8_t value)\n"
    "    IDMEFValue.new(uint8_t value)\n"
    "    IDMEFValue.new(int16_t value)\n"
    "    IDMEFValue.new(uint16_t value)\n"
    "    IDMEFValue.new(int32_t value)\n"
    "    IDMEFValue.new(uint32_t value)\n"
    "    IDMEFValue.new(int64_t value)\n"
    "    IDMEFValue.new(uint64_t value)\n"
    "    IDMEFValue.new(float value)\n"
    "    IDMEFValue.new(double value)\n"
    "    IDMEFValue.new(Prelude::IDMEFTime &time)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFValue_Match(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFValue *arg1 = (Prelude::IDMEFValue *) 0 ;
  Prelude::IDMEFValue *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFValue *","Match", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFValue * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFValue const &","Match", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFValue const &","Match", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFValue * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Match", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = (int)(arg1)->Match((Prelude::IDMEFValue const &)*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFValue_Clone(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFValue *arg1 = (Prelude::IDMEFValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFValue const *","Clone", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFValue * >(argp1);
  try {
    result = ((Prelude::IDMEFValue const *)arg1)->Clone();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  {
    int ret;
    
    if ( (&result)->IsNull() )
    vresult = Qnil;
    else {
      ret = IDMEFValue_to_SWIG(result, &vresult);
      if ( ret < 0 ) {
        std::stringstream s;
        s << "IDMEFValue typemap does not handle value of type '" << idmef_value_type_to_string((&result)->GetType()) << "'";
        SWIG_exception_fail(SWIG_ValueError, s.str().c_str());
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassIDMEFPath;

SWIGINTERN VALUE
_wrap_new_IDMEFPath__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::IDMEFPath *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::IDMEFPath", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::IDMEFPath *)new Prelude::IDMEFPath((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFPath__SWIG_1(int argc, VALUE *argv, VALUE self) {
  idmef_path_t *arg1 = (idmef_path_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFPath *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_idmef_path_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "idmef_path_t *","Prelude::IDMEFPath", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< idmef_path_t * >(argp1);
  try {
    result = (Prelude::IDMEFPath *)new Prelude::IDMEFPath(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IDMEFPath_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IDMEFPath_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__IDMEFPath);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IDMEFPath__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::IDMEFPath *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__IDMEFPath,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath const &","Prelude::IDMEFPath", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFPath const &","Prelude::IDMEFPath", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (Prelude::IDMEFPath *)new Prelude::IDMEFPath((Prelude::IDMEFPath const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IDMEFPath(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_idmef_path_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFPath__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFPath__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFPath__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "IDMEFPath.new", 
    "    IDMEFPath.new(char const *buffer)\n"
    "    IDMEFPath.new(idmef_path_t *path)\n"
    "    IDMEFPath.new(Prelude::IDMEFPath const &path)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Prelude_IDMEFPath(Prelude::IDMEFPath *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_IDMEFPath_Get(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Prelude::IDMEFValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Get", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Get", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Get", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  try {
    result = (arg1)->Get(*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  {
    int ret;
    
    if ( (&result)->IsNull() )
    vresult = Qnil;
    else {
      ret = IDMEFValue_to_SWIG(result, &vresult);
      if ( ret < 0 ) {
        std::stringstream s;
        s << "IDMEFValue typemap does not handle value of type '" << idmef_value_type_to_string((&result)->GetType()) << "'";
        SWIG_exception_fail(SWIG_ValueError, s.str().c_str());
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  {
    std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > *ptr = (std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > *)0;
    int res = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > >","Set", 3, argv[1] )); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  Prelude::IDMEFValue *arg3 = (Prelude::IDMEFValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Prelude__IDMEFValue, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Prelude::IDMEFValue *","Set", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Prelude::IDMEFValue * >(argp3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  Prelude::IDMEFTime *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Prelude::IDMEFTime &","Set", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime &","Set", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Prelude::IDMEFTime * >(argp3);
  try {
    (arg1)->Set(*arg2,*arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Set", 3, argv[1] )); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Set", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->Set(*arg2,(char const *)arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  int8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int8_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int8_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint8_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint8_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  int16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_short(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int16_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int16_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_8(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint16_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint16_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int32_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_10(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint32_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint32_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_11(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_long_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int64_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int64_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_12(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  uint64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint64_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint64_t >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_13(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Set__SWIG_14(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->Set(*arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_Set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Prelude__IDMEFValue, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_9(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_12(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_11(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_13(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_14(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEFPath_Set__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "IDMEFPath.Set", 
    "    void IDMEFPath.Set(Prelude::IDMEF &message, std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, Prelude::IDMEFValue *value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, Prelude::IDMEFTime &time)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, std::string value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, char const *value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, int8_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, uint8_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, int16_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, uint16_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, int32_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, uint32_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, int64_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, uint64_t value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, float value)\n"
    "    void IDMEFPath.Set(Prelude::IDMEF &message, double value)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetClass__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  idmef_class_id_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetClass", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetClass", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (arg1)->GetClass(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new idmef_class_id_t(static_cast< const idmef_class_id_t& >(result))), SWIGTYPE_p_idmef_class_id_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetClass__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  idmef_class_id_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetClass", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (arg1)->GetClass();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new idmef_class_id_t(static_cast< const idmef_class_id_t& >(result))), SWIGTYPE_p_idmef_class_id_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_GetClass(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDMEFPath_GetClass__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDMEFPath_GetClass__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "IDMEFPath.GetClass", 
    "    idmef_class_id_t IDMEFPath.GetClass(int depth)\n"
    "    idmef_class_id_t IDMEFPath.GetClass()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetValueType__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  idmef_value_type_id_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetValueType", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetValueType", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (arg1)->GetValueType(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new idmef_value_type_id_t(static_cast< const idmef_value_type_id_t& >(result))), SWIGTYPE_p_idmef_value_type_id_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetValueType__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  idmef_value_type_id_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetValueType", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (arg1)->GetValueType();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new idmef_value_type_id_t(static_cast< const idmef_value_type_id_t& >(result))), SWIGTYPE_p_idmef_value_type_id_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_GetValueType(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDMEFPath_GetValueType__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDMEFPath_GetValueType__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "IDMEFPath.GetValueType", 
    "    idmef_value_type_id_t IDMEFPath.GetValueType(int depth)\n"
    "    idmef_value_type_id_t IDMEFPath.GetValueType()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_SetIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","SetIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","SetIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetIndex", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = (int)(arg1)->SetIndex(arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_SetIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","SetIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","SetIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    result = (int)(arg1)->SetIndex(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_SetIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDMEFPath_SetIndex__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_SetIndex__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "IDMEFPath.SetIndex", 
    "    int IDMEFPath.SetIndex(unsigned int index, int depth)\n"
    "    int IDMEFPath.SetIndex(unsigned int index)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_UndefineIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","UndefineIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","UndefineIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)(arg1)->UndefineIndex(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_UndefineIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","UndefineIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (int)(arg1)->UndefineIndex();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_UndefineIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDMEFPath_UndefineIndex__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDMEFPath_UndefineIndex__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "IDMEFPath.UndefineIndex", 
    "    int IDMEFPath.UndefineIndex(int depth)\n"
    "    int IDMEFPath.UndefineIndex()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)(arg1)->GetIndex(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (int)(arg1)->GetIndex();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_GetIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDMEFPath_GetIndex__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDMEFPath_GetIndex__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "IDMEFPath.GetIndex", 
    "    int IDMEFPath.GetIndex(int depth)\n"
    "    int IDMEFPath.GetIndex()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_MakeChild(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","MakeChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","MakeChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","MakeChild", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  try {
    result = (int)(arg1)->MakeChild((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_MakeParent(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","MakeParent", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (int)(arg1)->MakeParent();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Compare__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEFPath *arg2 = (Prelude::IDMEFPath *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Compare", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Compare", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFPath * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Compare", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = (int)(arg1)->Compare(arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Compare__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  Prelude::IDMEFPath *arg2 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Compare", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Compare", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFPath * >(argp2);
  try {
    result = (int)(arg1)->Compare(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_Compare(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDMEFPath_Compare__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEFPath_Compare__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "IDMEFPath.Compare", 
    "    int IDMEFPath.Compare(Prelude::IDMEFPath *path, int depth)\n"
    "    int IDMEFPath.Compare(Prelude::IDMEFPath *path)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_Clone(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Prelude::IDMEFPath > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","Clone", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (arg1)->Clone();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new Prelude::IDMEFPath(static_cast< const Prelude::IDMEFPath& >(result))), SWIGTYPE_p_Prelude__IDMEFPath, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_CheckOperator(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  idmef_criterion_operator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","CheckOperator", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_idmef_criterion_operator_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "idmef_criterion_operator_t","CheckOperator", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "idmef_criterion_operator_t","CheckOperator", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< idmef_criterion_operator_t * >(argp2));
    }
  }
  try {
    result = (int)(arg1)->CheckOperator(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetApplicableOperators(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  idmef_criterion_operator_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetApplicableOperators", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (arg1)->GetApplicableOperators();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new idmef_criterion_operator_t(static_cast< const idmef_criterion_operator_t& >(result))), SWIGTYPE_p_idmef_criterion_operator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetName__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetName", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (char *)(arg1)->GetName(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetName__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (char *)(arg1)->GetName();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_GetName(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDMEFPath_GetName__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDMEFPath_GetName__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "IDMEFPath.GetName", 
    "    char const * IDMEFPath.GetName(int depth)\n"
    "    char const * IDMEFPath.GetName()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_IsAmbiguous(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","IsAmbiguous", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (bool)(arg1)->IsAmbiguous();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_HasLists(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","HasLists", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (int)(arg1)->HasLists();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_IsList__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","IsList", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","IsList", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (bool)(arg1)->IsList(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_IsList__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","IsList", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (bool)(arg1)->IsList();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFPath_IsList(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDMEFPath_IsList__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFPath, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDMEFPath_IsList__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "IDMEFPath.IsList", 
    "    bool IDMEFPath.IsList(int depth)\n"
    "    bool IDMEFPath.IsList()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFPath_GetDepth(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFPath *arg1 = (Prelude::IDMEFPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFPath *","GetDepth", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFPath * >(argp1);
  try {
    result = (unsigned int)(arg1)->GetDepth();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassIDMEFTime;

SWIGINTERN VALUE
_wrap_new_IDMEFTime__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (Prelude::IDMEFTime *)new Prelude::IDMEFTime();
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFTime__SWIG_1(int argc, VALUE *argv, VALUE self) {
  idmef_time_t *arg1 = (idmef_time_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFTime *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_idmef_time_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "idmef_time_t *","Prelude::IDMEFTime", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< idmef_time_t * >(argp1);
  try {
    result = (Prelude::IDMEFTime *)new Prelude::IDMEFTime(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFTime__SWIG_2(int argc, VALUE *argv, VALUE self) {
  time_t *arg1 = (time_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFTime *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_time_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "time_t const *","Prelude::IDMEFTime", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< time_t * >(argp1);
  try {
    result = (Prelude::IDMEFTime *)new Prelude::IDMEFTime((time_t const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFTime__SWIG_3(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Prelude::IDMEFTime *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Prelude::IDMEFTime", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    result = (Prelude::IDMEFTime *)new Prelude::IDMEFTime((char const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEFTime__SWIG_4(int argc, VALUE *argv, VALUE self) {
  timeval *arg1 = (timeval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFTime *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_timeval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "timeval const *","Prelude::IDMEFTime", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< timeval * >(argp1);
  try {
    result = (Prelude::IDMEFTime *)new Prelude::IDMEFTime((timeval const *)arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IDMEFTime_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IDMEFTime_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__IDMEFTime);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IDMEFTime__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::IDMEFTime *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const &","Prelude::IDMEFTime", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime const &","Prelude::IDMEFTime", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (Prelude::IDMEFTime *)new Prelude::IDMEFTime((Prelude::IDMEFTime const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IDMEFTime(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_IDMEFTime__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_idmef_time_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFTime__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_time_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFTime__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_timeval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFTime__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFTime__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEFTime__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "IDMEFTime.new", 
    "    IDMEFTime.new()\n"
    "    IDMEFTime.new(idmef_time_t *time)\n"
    "    IDMEFTime.new(time_t const *time)\n"
    "    IDMEFTime.new(char const *string)\n"
    "    IDMEFTime.new(timeval const *tv)\n"
    "    IDMEFTime.new(Prelude::IDMEFTime const &value)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Prelude_IDMEFTime(Prelude::IDMEFTime *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_IDMEFTime_Set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    (arg1)->Set();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_Set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  time_t *arg2 = (time_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_time_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "time_t const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< time_t * >(argp2);
  try {
    (arg1)->Set((time_t const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_Set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->Set((char const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_Set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_timeval, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "timeval const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< timeval * >(argp2);
  try {
    (arg1)->Set((timeval const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEFTime_Set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDMEFTime_Set__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_time_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDMEFTime_Set__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_timeval, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDMEFTime_Set__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDMEFTime_Set__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "IDMEFTime.Set", 
    "    void IDMEFTime.Set()\n"
    "    void IDMEFTime.Set(time_t const *time)\n"
    "    void IDMEFTime.Set(char const *string)\n"
    "    void IDMEFTime.Set(timeval const *tv)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_SetSec(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","SetSec", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetSec", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  try {
    (arg1)->SetSec(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_SetUSec(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","SetUSec", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetUSec", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  try {
    (arg1)->SetUSec(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_SetGmtOffset(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","SetGmtOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","SetGmtOffset", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  try {
    (arg1)->SetGmtOffset(arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_GetSec(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","GetSec", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (uint32_t)((Prelude::IDMEFTime const *)arg1)->GetSec();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_GetUSec(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","GetUSec", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (uint32_t)((Prelude::IDMEFTime const *)arg1)->GetUSec();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_GetGmtOffset(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","GetGmtOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (int32_t)((Prelude::IDMEFTime const *)arg1)->GetGmtOffset();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_Clone(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEFTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","Clone", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (arg1)->Clone();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new Prelude::IDMEFTime(static_cast< const Prelude::IDMEFTime& >(result))), SWIGTYPE_p_Prelude__IDMEFTime, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime_ToString(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = ((Prelude::IDMEFTime const *)arg1)->ToString();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime___int__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","operator int", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (int)((Prelude::IDMEFTime const *)arg1)->operator int();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime___long__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","operator long", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (long)((Prelude::IDMEFTime const *)arg1)->operator long();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime___float__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","operator double", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = (double)((Prelude::IDMEFTime const *)arg1)->operator double();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEFTime___str__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const *","operator const std::string", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  try {
    result = ((Prelude::IDMEFTime const *)arg1)->operator const std::string();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::IDMEFTime.>=

  call-seq:
    >=(time) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_IDMEFTime___ge__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  Prelude::IDMEFTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFTime * >(argp2);
  try {
    result = (bool)(arg1)->operator >=((Prelude::IDMEFTime const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::IDMEFTime.<=

  call-seq:
    <=(time) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_IDMEFTime___le__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  Prelude::IDMEFTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFTime * >(argp2);
  try {
    result = (bool)(arg1)->operator <=((Prelude::IDMEFTime const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::IDMEFTime.==

  call-seq:
    ==(time) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_IDMEFTime___eq__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  Prelude::IDMEFTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFTime * >(argp2);
  try {
    result = (bool)(arg1)->operator ==((Prelude::IDMEFTime const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::IDMEFTime.>

  call-seq:
    >(time) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_IDMEFTime___gt__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  Prelude::IDMEFTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFTime * >(argp2);
  try {
    result = (bool)(arg1)->operator >((Prelude::IDMEFTime const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::IDMEFTime.<

  call-seq:
    <(time) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_IDMEFTime___lt__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEFTime *arg1 = (Prelude::IDMEFTime *) 0 ;
  Prelude::IDMEFTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEFTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEFTime *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEFTime * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEFTime const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEFTime * >(argp2);
  try {
    result = (bool)(arg1)->operator <((Prelude::IDMEFTime const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassIDMEF;

SWIGINTERN void
free_Prelude_IDMEF(Prelude::IDMEF *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_IDMEF__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (Prelude::IDMEF *)new Prelude::IDMEF();
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IDMEF__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Prelude::IDMEF *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF const &","Prelude::IDMEF", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF const &","Prelude::IDMEF", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  try {
    result = (Prelude::IDMEF *)new Prelude::IDMEF((Prelude::IDMEF const &)*arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IDMEF_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IDMEF_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Prelude__IDMEF);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IDMEF__SWIG_2(int argc, VALUE *argv, VALUE self) {
  idmef_message_t *arg1 = (idmef_message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEF *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_idmef_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "idmef_message_t *","Prelude::IDMEF", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< idmef_message_t * >(argp1);
  try {
    result = (Prelude::IDMEF *)new Prelude::IDMEF(arg1);
    DATA_PTR(self) = result;
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IDMEF(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_IDMEF__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEF__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_idmef_message_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDMEF__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "IDMEF.new", 
    "    IDMEF.new()\n"
    "    IDMEF.new(Prelude::IDMEF const &idmef)\n"
    "    IDMEF.new(idmef_message_t *message)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > *ptr = (std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > *)0;
    int res = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > >","Set", 3, argv[1] )); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  Prelude::IDMEFValue *arg3 = (Prelude::IDMEFValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Prelude__IDMEFValue, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Prelude::IDMEFValue *","Set", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Prelude::IDMEFValue * >(argp3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  Prelude::IDMEFTime *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Prelude__IDMEFTime,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Prelude::IDMEFTime &","Set", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEFTime &","Set", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Prelude::IDMEFTime * >(argp3);
  try {
    (arg1)->Set((char const *)arg2,*arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Set", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->Set((char const *)arg2,(char const *)arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Set", 3, argv[1] )); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  int8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int8_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int8_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint8_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint8_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  int16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_short(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int16_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int16_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_8(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint16_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint16_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int32_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_10(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint32_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint32_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_11(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int64_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int64_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_12(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint64_t","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint64_t >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_13(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Set__SWIG_14(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->Set((char const *)arg2,arg3);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_IDMEF_Set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Prelude__IDMEFValue, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Prelude__IDMEFTime, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_9(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_12(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_11(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_13(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_14(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Prelude__IDMEF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDMEF_Set__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "IDMEF.Set", 
    "    void IDMEF.Set(char const *path, std::vector< Prelude::IDMEFValue,std::allocator< Prelude::IDMEFValue > > value)\n"
    "    void IDMEF.Set(char const *path, Prelude::IDMEFValue *value)\n"
    "    void IDMEF.Set(char const *path, Prelude::IDMEFTime &value)\n"
    "    void IDMEF.Set(char const *path, char const *value)\n"
    "    void IDMEF.Set(char const *path, std::string value)\n"
    "    void IDMEF.Set(char const *path, int8_t value)\n"
    "    void IDMEF.Set(char const *path, uint8_t value)\n"
    "    void IDMEF.Set(char const *path, int16_t value)\n"
    "    void IDMEF.Set(char const *path, uint16_t value)\n"
    "    void IDMEF.Set(char const *path, int32_t value)\n"
    "    void IDMEF.Set(char const *path, uint32_t value)\n"
    "    void IDMEF.Set(char const *path, int64_t value)\n"
    "    void IDMEF.Set(char const *path, uint64_t value)\n"
    "    void IDMEF.Set(char const *path, float value)\n"
    "    void IDMEF.Set(char const *path, double value)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Get(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Prelude::IDMEFValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Get", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Get", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->Get((char const *)arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  {
    int ret;
    
    if ( (&result)->IsNull() )
    vresult = Qnil;
    else {
      ret = IDMEFValue_to_SWIG(result, &vresult);
      if ( ret < 0 ) {
        std::stringstream s;
        s << "IDMEFValue typemap does not handle value of type '" << idmef_value_type_to_string((&result)->GetType()) << "'";
        SWIG_exception_fail(SWIG_ValueError, s.str().c_str());
      }
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Clone(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  Prelude::IDMEF *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Prelude::IDMEF result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Clone", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Prelude__IDMEF,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Prelude::IDMEF const &","Clone", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Prelude::IDMEF const &","Clone", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Prelude::IDMEF * >(argp2);
  try {
    result = (arg1)->Clone((Prelude::IDMEF const &)*arg2);
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_NewPointerObj((new Prelude::IDMEF(static_cast< const Prelude::IDMEF& >(result))), SWIGTYPE_p_Prelude__IDMEF, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_ToString(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF const *","ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  try {
    result = ((Prelude::IDMEF const *)arg1)->ToString();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF___str__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF const *","operator const std::string", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  try {
    result = ((Prelude::IDMEF const *)arg1)->operator const std::string();
  }
  catch(Prelude::PreludeError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_Prelude__PreludeError, SWIG_NewPointerObj((new Prelude::PreludeError(static_cast< const Prelude::PreludeError& >(_e))),SWIGTYPE_p_Prelude__PreludeError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Write(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Write", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  {
    Check_Type(argv[0], T_FILE);
    arg2 = &argv[0];
  }
  Prelude_IDMEF_Write(arg1,arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IDMEF_Read(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","Read", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  {
    Check_Type(argv[0], T_FILE);
    arg2 = &argv[0];
  }
  Prelude_IDMEF_Read(arg1,arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::IDMEF.>>

  call-seq:
    >>(nocast_p) -> IDMEF

Right shifting operator or extracting operator.
*/
SWIGINTERN VALUE
_wrap_IDMEF___rshift__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEF *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","operator >>", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  {
    Check_Type(argv[0], T_FILE);
    arg2 = &argv[0];
  }
  result = (Prelude::IDMEF *) &Prelude_IDMEF_operator_Sg__Sg_(arg1,arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: PreludeEasy::IDMEF.<<

  call-seq:
    <<(nocast_p) -> IDMEF

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_IDMEF___lshift__(int argc, VALUE *argv, VALUE self) {
  Prelude::IDMEF *arg1 = (Prelude::IDMEF *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Prelude::IDMEF *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Prelude::IDMEF *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< Prelude::IDMEF * >(argp1);
  {
    Check_Type(argv[0], T_FILE);
    arg2 = &argv[0];
  }
  result = (Prelude::IDMEF *) &Prelude_IDMEF_operator_Sl__Sl_(arg1,arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Prelude__IDMEF, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_Prelude__ClientTo_p_Prelude__ClientProfile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Prelude::ClientProfile *)  ((Prelude::Client *) x));
}
static void *_p_Prelude__ClientEasyTo_p_Prelude__ClientProfile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Prelude::ClientProfile *) (Prelude::Client *) ((Prelude::ClientEasy *) x));
}
static void *_p_Prelude__PreludeErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Prelude::PreludeError *) x));
}
static void *_p_Prelude__ClientEasyTo_p_Prelude__Client(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Prelude::Client *)  ((Prelude::ClientEasy *) x));
}
static swig_type_info _swigt__p_Prelude__Client = {"_p_Prelude__Client", "Prelude::Client *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__ClientEasy = {"_p_Prelude__ClientEasy", "Prelude::ClientEasy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__ClientProfile = {"_p_Prelude__ClientProfile", "Prelude::ClientProfile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__Connection = {"_p_Prelude__Connection", "Prelude::Connection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__ConnectionPool = {"_p_Prelude__ConnectionPool", "Prelude::ConnectionPool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__IDMEF = {"_p_Prelude__IDMEF", "Prelude::IDMEF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__IDMEFCriteria = {"_p_Prelude__IDMEFCriteria", "Prelude::IDMEFCriteria *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__IDMEFCriterion = {"_p_Prelude__IDMEFCriterion", "Prelude::IDMEFCriterion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__IDMEFPath = {"_p_Prelude__IDMEFPath", "Prelude::IDMEFPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__IDMEFTime = {"_p_Prelude__IDMEFTime", "Prelude::IDMEFTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__IDMEFValue = {"_p_Prelude__IDMEFValue", "Prelude::IDMEFValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__PreludeError = {"_p_Prelude__PreludeError", "Prelude::PreludeError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Prelude__PreludeLog = {"_p_Prelude__PreludeLog", "Prelude::PreludeLog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_q_const__char__void = {"_p_f_int_p_q_const__char__void", "void (*)(int,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_class_id_t = {"_p_idmef_class_id_t", "idmef_class_id_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_criteria_t = {"_p_idmef_criteria_t", "idmef_criteria_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_criterion_operator_t = {"_p_idmef_criterion_operator_t", "idmef_criterion_operator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_message_t = {"_p_idmef_message_t", "idmef_message_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_path_t = {"_p_idmef_path_t", "idmef_path_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_time_t = {"_p_idmef_time_t", "idmef_time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_value_t = {"_p_idmef_value_t", "idmef_value_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idmef_value_type_id_t = {"_p_idmef_value_type_id_t", "idmef_value_type_id_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prelude_client_profile_t = {"_p_prelude_client_profile_t", "prelude_client_profile_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prelude_client_t = {"_p_prelude_client_t", "prelude_client_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prelude_connection_pool_t = {"_p_prelude_connection_pool_t", "prelude_connection_pool_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prelude_connection_t = {"_p_prelude_connection_t", "prelude_connection_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_time_t = {"_p_time_t", "time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_timeval = {"_p_timeval", "timeval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Prelude__Client,
  &_swigt__p_Prelude__ClientEasy,
  &_swigt__p_Prelude__ClientProfile,
  &_swigt__p_Prelude__Connection,
  &_swigt__p_Prelude__ConnectionPool,
  &_swigt__p_Prelude__IDMEF,
  &_swigt__p_Prelude__IDMEFCriteria,
  &_swigt__p_Prelude__IDMEFCriterion,
  &_swigt__p_Prelude__IDMEFPath,
  &_swigt__p_Prelude__IDMEFTime,
  &_swigt__p_Prelude__IDMEFValue,
  &_swigt__p_Prelude__PreludeError,
  &_swigt__p_Prelude__PreludeLog,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_f_int_p_q_const__char__void,
  &_swigt__p_idmef_class_id_t,
  &_swigt__p_idmef_criteria_t,
  &_swigt__p_idmef_criterion_operator_t,
  &_swigt__p_idmef_message_t,
  &_swigt__p_idmef_path_t,
  &_swigt__p_idmef_time_t,
  &_swigt__p_idmef_value_t,
  &_swigt__p_idmef_value_type_id_t,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_void,
  &_swigt__p_prelude_client_profile_t,
  &_swigt__p_prelude_client_t,
  &_swigt__p_prelude_connection_pool_t,
  &_swigt__p_prelude_connection_t,
  &_swigt__p_short,
  &_swigt__p_size_type,
  &_swigt__p_std__exception,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_time_t,
  &_swigt__p_timeval,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Prelude__Client[] = {  {&_swigt__p_Prelude__Client, 0, 0, 0},  {&_swigt__p_Prelude__ClientEasy, _p_Prelude__ClientEasyTo_p_Prelude__Client, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__ClientEasy[] = {  {&_swigt__p_Prelude__ClientEasy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__ClientProfile[] = {  {&_swigt__p_Prelude__Client, _p_Prelude__ClientTo_p_Prelude__ClientProfile, 0, 0},  {&_swigt__p_Prelude__ClientProfile, 0, 0, 0},  {&_swigt__p_Prelude__ClientEasy, _p_Prelude__ClientEasyTo_p_Prelude__ClientProfile, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__Connection[] = {  {&_swigt__p_Prelude__Connection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__ConnectionPool[] = {  {&_swigt__p_Prelude__ConnectionPool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__IDMEF[] = {  {&_swigt__p_Prelude__IDMEF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__IDMEFCriteria[] = {  {&_swigt__p_Prelude__IDMEFCriteria, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__IDMEFCriterion[] = {  {&_swigt__p_Prelude__IDMEFCriterion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__IDMEFPath[] = {  {&_swigt__p_Prelude__IDMEFPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__IDMEFTime[] = {  {&_swigt__p_Prelude__IDMEFTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__IDMEFValue[] = {  {&_swigt__p_Prelude__IDMEFValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__PreludeError[] = {  {&_swigt__p_Prelude__PreludeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Prelude__PreludeLog[] = {  {&_swigt__p_Prelude__PreludeLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_q_const__char__void[] = {  {&_swigt__p_f_int_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_class_id_t[] = {  {&_swigt__p_idmef_class_id_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_criteria_t[] = {  {&_swigt__p_idmef_criteria_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_criterion_operator_t[] = {  {&_swigt__p_idmef_criterion_operator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_message_t[] = {  {&_swigt__p_idmef_message_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_path_t[] = {  {&_swigt__p_idmef_path_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_time_t[] = {  {&_swigt__p_idmef_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_value_t[] = {  {&_swigt__p_idmef_value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idmef_value_type_id_t[] = {  {&_swigt__p_idmef_value_type_id_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prelude_client_profile_t[] = {  {&_swigt__p_prelude_client_profile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prelude_client_t[] = {  {&_swigt__p_prelude_client_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prelude_connection_pool_t[] = {  {&_swigt__p_prelude_connection_pool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prelude_connection_t[] = {  {&_swigt__p_prelude_connection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Prelude__PreludeError, _p_Prelude__PreludeErrorTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_time_t[] = {  {&_swigt__p_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_timeval[] = {  {&_swigt__p_timeval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Prelude__Client,
  _swigc__p_Prelude__ClientEasy,
  _swigc__p_Prelude__ClientProfile,
  _swigc__p_Prelude__Connection,
  _swigc__p_Prelude__ConnectionPool,
  _swigc__p_Prelude__IDMEF,
  _swigc__p_Prelude__IDMEFCriteria,
  _swigc__p_Prelude__IDMEFCriterion,
  _swigc__p_Prelude__IDMEFPath,
  _swigc__p_Prelude__IDMEFTime,
  _swigc__p_Prelude__IDMEFValue,
  _swigc__p_Prelude__PreludeError,
  _swigc__p_Prelude__PreludeLog,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_f_int_p_q_const__char__void,
  _swigc__p_idmef_class_id_t,
  _swigc__p_idmef_criteria_t,
  _swigc__p_idmef_criterion_operator_t,
  _swigc__p_idmef_message_t,
  _swigc__p_idmef_path_t,
  _swigc__p_idmef_time_t,
  _swigc__p_idmef_value_t,
  _swigc__p_idmef_value_type_id_t,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_void,
  _swigc__p_prelude_client_profile_t,
  _swigc__p_prelude_client_t,
  _swigc__p_prelude_connection_pool_t,
  _swigc__p_prelude_connection_t,
  _swigc__p_short,
  _swigc__p_size_type,
  _swigc__p_std__exception,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_time_t,
  _swigc__p_timeval,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_PreludeEasy(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mPreludeEasy = rb_define_module("PreludeEasy");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mPreludeEasy, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::GC_VALUE::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mPreludeEasy, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mPreludeEasy, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
  int ret;
  char **argv;
  int _i, argc;
  VALUE rbargv, *ptr;
  
  __initial_thread = (gl_thread_t) gl_thread_self();
  
  rbargv = rb_const_get(rb_cObject, rb_intern("ARGV"));
  argc = RARRAY(rbargv)->len + 1;
  
  if ( argc + 1 < 0 )
  throw PreludeError("Invalid argc length");
  
  argv = (char **) malloc((argc + 1) * sizeof(char *));
  if ( ! argv )
  throw PreludeError("Allocation failure");
  
  argv[0] = STR2CSTR(rb_gv_get("$0"));
  
  ptr = RARRAY(rbargv)->ptr;
  for ( ptr = RARRAY(rbargv)->ptr, _i = 1; _i < argc; _i++, ptr++ )
  argv[_i] =  STR2CSTR(*ptr);
  
  argv[_i] = NULL;
  
  ret = prelude_init(&argc, argv);
  if ( ret < 0 ) {
    free(argv);
    throw PreludeError(ret);
  }
  
  free(argv);
  
  rb_define_module_function(mPreludeEasy, "CheckVersion", VALUEFUNC(_wrap_CheckVersion), -1);
  
  SwigClassPreludeLog.klass = rb_define_class_under(mPreludeEasy, "PreludeLog", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__PreludeLog, (void *) &SwigClassPreludeLog);
  rb_define_alloc_func(SwigClassPreludeLog.klass, _wrap_PreludeLog_allocate);
  rb_define_method(SwigClassPreludeLog.klass, "initialize", VALUEFUNC(_wrap_new_PreludeLog), -1);
  rb_define_const(SwigClassPreludeLog.klass, "DEBUG", SWIG_From_int(static_cast< int >(Prelude::PreludeLog::DEBUG)));
  rb_define_const(SwigClassPreludeLog.klass, "INFO", SWIG_From_int(static_cast< int >(Prelude::PreludeLog::INFO)));
  rb_define_const(SwigClassPreludeLog.klass, "WARNING", SWIG_From_int(static_cast< int >(Prelude::PreludeLog::WARNING)));
  rb_define_const(SwigClassPreludeLog.klass, "ERROR", SWIG_From_int(static_cast< int >(Prelude::PreludeLog::ERROR)));
  rb_define_const(SwigClassPreludeLog.klass, "CRITICAL", SWIG_From_int(static_cast< int >(Prelude::PreludeLog::CRITICAL)));
  rb_define_const(SwigClassPreludeLog.klass, "QUIET", SWIG_From_int(static_cast< int >(Prelude::PreludeLog::QUIET)));
  rb_define_const(SwigClassPreludeLog.klass, "SYSLOG", SWIG_From_int(static_cast< int >(Prelude::PreludeLog::SYSLOG)));
  rb_define_singleton_method(SwigClassPreludeLog.klass, "SetLevel", VALUEFUNC(_wrap_PreludeLog_SetLevel), -1);
  rb_define_singleton_method(SwigClassPreludeLog.klass, "SetDebugLevel", VALUEFUNC(_wrap_PreludeLog_SetDebugLevel), -1);
  rb_define_singleton_method(SwigClassPreludeLog.klass, "SetFlags", VALUEFUNC(_wrap_PreludeLog_SetFlags), -1);
  rb_define_singleton_method(SwigClassPreludeLog.klass, "GetFlags", VALUEFUNC(_wrap_PreludeLog_GetFlags), -1);
  rb_define_singleton_method(SwigClassPreludeLog.klass, "SetLogfile", VALUEFUNC(_wrap_PreludeLog_SetLogfile), -1);
  rb_define_singleton_method(SwigClassPreludeLog.klass, "SetCallback", VALUEFUNC(_wrap_PreludeLog_SetCallback), -1);
  SwigClassPreludeLog.mark = 0;
  SwigClassPreludeLog.destroy = (void (*)(void *)) free_Prelude_PreludeLog;
  SwigClassPreludeLog.trackObjects = 0;
  
  SwigClassPreludeError.klass = rb_define_class_under(mPreludeEasy, "PreludeError", rb_eRuntimeError);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__PreludeError, (void *) &SwigClassPreludeError);
  rb_define_alloc_func(SwigClassPreludeError.klass, _wrap_PreludeError_allocate);
  rb_define_method(SwigClassPreludeError.klass, "initialize", VALUEFUNC(_wrap_new_PreludeError), -1);
  rb_define_method(SwigClassPreludeError.klass, "what", VALUEFUNC(_wrap_PreludeError_what), -1);
  rb_define_method(SwigClassPreludeError.klass, "to_s", VALUEFUNC(_wrap_PreludeError___str__), -1);
  SwigClassPreludeError.mark = 0;
  SwigClassPreludeError.destroy = (void (*)(void *)) free_Prelude_PreludeError;
  SwigClassPreludeError.trackObjects = 0;
  
  SwigClassConnection.klass = rb_define_class_under(mPreludeEasy, "Connection", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__Connection, (void *) &SwigClassConnection);
  rb_define_alloc_func(SwigClassConnection.klass, _wrap_Connection_allocate);
  rb_define_method(SwigClassConnection.klass, "initialize", VALUEFUNC(_wrap_new_Connection), -1);
  rb_define_method(SwigClassConnection.klass, "GetConnection", VALUEFUNC(_wrap_Connection_GetConnection), -1);
  rb_define_method(SwigClassConnection.klass, "Close", VALUEFUNC(_wrap_Connection_Close), -1);
  rb_define_method(SwigClassConnection.klass, "Connect", VALUEFUNC(_wrap_Connection_Connect), -1);
  rb_define_method(SwigClassConnection.klass, "SetState", VALUEFUNC(_wrap_Connection_SetState), -1);
  rb_define_method(SwigClassConnection.klass, "GetState", VALUEFUNC(_wrap_Connection_GetState), -1);
  rb_define_method(SwigClassConnection.klass, "SetData", VALUEFUNC(_wrap_Connection_SetData), -1);
  rb_define_method(SwigClassConnection.klass, "GetData", VALUEFUNC(_wrap_Connection_GetData), -1);
  rb_define_method(SwigClassConnection.klass, "GetPermission", VALUEFUNC(_wrap_Connection_GetPermission), -1);
  rb_define_method(SwigClassConnection.klass, "SetPeerAnalyzerid", VALUEFUNC(_wrap_Connection_SetPeerAnalyzerid), -1);
  rb_define_method(SwigClassConnection.klass, "GetPeerAnalyzerid", VALUEFUNC(_wrap_Connection_GetPeerAnalyzerid), -1);
  rb_define_method(SwigClassConnection.klass, "GetLocalAddr", VALUEFUNC(_wrap_Connection_GetLocalAddr), -1);
  rb_define_method(SwigClassConnection.klass, "GetLocalPort", VALUEFUNC(_wrap_Connection_GetLocalPort), -1);
  rb_define_method(SwigClassConnection.klass, "GetPeerAddr", VALUEFUNC(_wrap_Connection_GetPeerAddr), -1);
  rb_define_method(SwigClassConnection.klass, "GetPeerPort", VALUEFUNC(_wrap_Connection_GetPeerPort), -1);
  rb_define_method(SwigClassConnection.klass, "IsAlive", VALUEFUNC(_wrap_Connection_IsAlive), -1);
  rb_define_method(SwigClassConnection.klass, "GetFd", VALUEFUNC(_wrap_Connection_GetFd), -1);
  rb_define_method(SwigClassConnection.klass, "RecvIDMEF", VALUEFUNC(_wrap_Connection_RecvIDMEF), -1);
  SwigClassConnection.mark = 0;
  SwigClassConnection.destroy = (void (*)(void *)) free_Prelude_Connection;
  SwigClassConnection.trackObjects = 0;
  
  SwigClassConnectionPool.klass = rb_define_class_under(mPreludeEasy, "ConnectionPool", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__ConnectionPool, (void *) &SwigClassConnectionPool);
  rb_define_alloc_func(SwigClassConnectionPool.klass, _wrap_ConnectionPool_allocate);
  rb_define_method(SwigClassConnectionPool.klass, "initialize", VALUEFUNC(_wrap_new_ConnectionPool), -1);
  rb_define_method(SwigClassConnectionPool.klass, "Init", VALUEFUNC(_wrap_ConnectionPool_Init), -1);
  rb_define_method(SwigClassConnectionPool.klass, "SetConnectionString", VALUEFUNC(_wrap_ConnectionPool_SetConnectionString), -1);
  rb_define_method(SwigClassConnectionPool.klass, "GetConnectionString", VALUEFUNC(_wrap_ConnectionPool_GetConnectionString), -1);
  rb_define_method(SwigClassConnectionPool.klass, "GetConnectionList", VALUEFUNC(_wrap_ConnectionPool_GetConnectionList), -1);
  rb_define_method(SwigClassConnectionPool.klass, "SetFlags", VALUEFUNC(_wrap_ConnectionPool_SetFlags), -1);
  rb_define_method(SwigClassConnectionPool.klass, "GetFlags", VALUEFUNC(_wrap_ConnectionPool_GetFlags), -1);
  rb_define_method(SwigClassConnectionPool.klass, "SetData", VALUEFUNC(_wrap_ConnectionPool_SetData), -1);
  rb_define_method(SwigClassConnectionPool.klass, "GetData", VALUEFUNC(_wrap_ConnectionPool_GetData), -1);
  rb_define_method(SwigClassConnectionPool.klass, "AddConnection", VALUEFUNC(_wrap_ConnectionPool_AddConnection), -1);
  rb_define_method(SwigClassConnectionPool.klass, "DelConnection", VALUEFUNC(_wrap_ConnectionPool_DelConnection), -1);
  rb_define_method(SwigClassConnectionPool.klass, "SetConnectionAlive", VALUEFUNC(_wrap_ConnectionPool_SetConnectionAlive), -1);
  rb_define_method(SwigClassConnectionPool.klass, "SetConnectionDead", VALUEFUNC(_wrap_ConnectionPool_SetConnectionDead), -1);
  rb_define_method(SwigClassConnectionPool.klass, "SetRequiredPermission", VALUEFUNC(_wrap_ConnectionPool_SetRequiredPermission), -1);
  SwigClassConnectionPool.mark = 0;
  SwigClassConnectionPool.destroy = (void (*)(void *)) free_Prelude_ConnectionPool;
  SwigClassConnectionPool.trackObjects = 0;
  
  SwigClassClientProfile.klass = rb_define_class_under(mPreludeEasy, "ClientProfile", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__ClientProfile, (void *) &SwigClassClientProfile);
  rb_define_alloc_func(SwigClassClientProfile.klass, _wrap_ClientProfile_allocate);
  rb_define_method(SwigClassClientProfile.klass, "initialize", VALUEFUNC(_wrap_new_ClientProfile), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetUid", VALUEFUNC(_wrap_ClientProfile_GetUid), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetGid", VALUEFUNC(_wrap_ClientProfile_GetGid), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetName", VALUEFUNC(_wrap_ClientProfile_GetName), -1);
  rb_define_method(SwigClassClientProfile.klass, "SetName", VALUEFUNC(_wrap_ClientProfile_SetName), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetAnalyzerId", VALUEFUNC(_wrap_ClientProfile_GetAnalyzerId), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetConfigFilename", VALUEFUNC(_wrap_ClientProfile_GetConfigFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetAnalyzeridFilename", VALUEFUNC(_wrap_ClientProfile_GetAnalyzeridFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetTlsKeyFilename", VALUEFUNC(_wrap_ClientProfile_GetTlsKeyFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetTlsServerCaCertFilename", VALUEFUNC(_wrap_ClientProfile_GetTlsServerCaCertFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetTlsServerKeyCertFilename", VALUEFUNC(_wrap_ClientProfile_GetTlsServerKeyCertFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetTlsServerCrlFilename", VALUEFUNC(_wrap_ClientProfile_GetTlsServerCrlFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetTlsClientKeyCertFilename", VALUEFUNC(_wrap_ClientProfile_GetTlsClientKeyCertFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetTlsClientTrustedCertFilename", VALUEFUNC(_wrap_ClientProfile_GetTlsClientTrustedCertFilename), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetBackupDirname", VALUEFUNC(_wrap_ClientProfile_GetBackupDirname), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetProfileDirname", VALUEFUNC(_wrap_ClientProfile_GetProfileDirname), -1);
  rb_define_method(SwigClassClientProfile.klass, "SetPrefix", VALUEFUNC(_wrap_ClientProfile_SetPrefix), -1);
  rb_define_method(SwigClassClientProfile.klass, "GetPrefix", VALUEFUNC(_wrap_ClientProfile_GetPrefix), -1);
  SwigClassClientProfile.mark = 0;
  SwigClassClientProfile.destroy = (void (*)(void *)) free_Prelude_ClientProfile;
  SwigClassClientProfile.trackObjects = 0;
  
  SwigClassClient.klass = rb_define_class_under(mPreludeEasy, "Client", ((swig_class *) SWIGTYPE_p_Prelude__ClientProfile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__Client, (void *) &SwigClassClient);
  rb_define_alloc_func(SwigClassClient.klass, _wrap_Client_allocate);
  rb_define_method(SwigClassClient.klass, "initialize", VALUEFUNC(_wrap_new_Client), -1);
  rb_define_const(SwigClassClient.klass, "ASYNC_SEND", SWIG_From_int(static_cast< int >(Prelude::Client::ASYNC_SEND)));
  rb_define_const(SwigClassClient.klass, "FLAGS_ASYNC_SEND", SWIG_From_int(static_cast< int >(Prelude::Client::FLAGS_ASYNC_SEND)));
  rb_define_const(SwigClassClient.klass, "ASYNC_TIMER", SWIG_From_int(static_cast< int >(Prelude::Client::ASYNC_TIMER)));
  rb_define_const(SwigClassClient.klass, "FLAGS_ASYNC_TIMER", SWIG_From_int(static_cast< int >(Prelude::Client::FLAGS_ASYNC_TIMER)));
  rb_define_const(SwigClassClient.klass, "HEARTBEAT", SWIG_From_int(static_cast< int >(Prelude::Client::HEARTBEAT)));
  rb_define_const(SwigClassClient.klass, "FLAGS_HEARTBEAT", SWIG_From_int(static_cast< int >(Prelude::Client::FLAGS_HEARTBEAT)));
  rb_define_const(SwigClassClient.klass, "CONNECT", SWIG_From_int(static_cast< int >(Prelude::Client::CONNECT)));
  rb_define_const(SwigClassClient.klass, "FLAGS_CONNECT", SWIG_From_int(static_cast< int >(Prelude::Client::FLAGS_CONNECT)));
  rb_define_const(SwigClassClient.klass, "AUTOCONFIG", SWIG_From_int(static_cast< int >(Prelude::Client::AUTOCONFIG)));
  rb_define_const(SwigClassClient.klass, "FLAGS_AUTOCONFIG", SWIG_From_int(static_cast< int >(Prelude::Client::FLAGS_AUTOCONFIG)));
  rb_define_const(SwigClassClient.klass, "IDMEF_READ", SWIG_From_int(static_cast< int >(Prelude::Client::IDMEF_READ)));
  rb_define_const(SwigClassClient.klass, "PERMISSION_IDMEF_READ", SWIG_From_int(static_cast< int >(Prelude::Client::PERMISSION_IDMEF_READ)));
  rb_define_const(SwigClassClient.klass, "ADMIN_READ", SWIG_From_int(static_cast< int >(Prelude::Client::ADMIN_READ)));
  rb_define_const(SwigClassClient.klass, "PERMISSION_ADMIN_READ", SWIG_From_int(static_cast< int >(Prelude::Client::PERMISSION_ADMIN_READ)));
  rb_define_const(SwigClassClient.klass, "IDMEF_WRITE", SWIG_From_int(static_cast< int >(Prelude::Client::IDMEF_WRITE)));
  rb_define_const(SwigClassClient.klass, "PERMISSION_IDMEF_WRITE", SWIG_From_int(static_cast< int >(Prelude::Client::PERMISSION_IDMEF_WRITE)));
  rb_define_const(SwigClassClient.klass, "ADMIN_WRITE", SWIG_From_int(static_cast< int >(Prelude::Client::ADMIN_WRITE)));
  rb_define_const(SwigClassClient.klass, "PERMISSION_ADMIN_WRITE", SWIG_From_int(static_cast< int >(Prelude::Client::PERMISSION_ADMIN_WRITE)));
  rb_define_method(SwigClassClient.klass, "Start", VALUEFUNC(_wrap_Client_Start), -1);
  rb_define_method(SwigClassClient.klass, "Init", VALUEFUNC(_wrap_Client_Init), -1);
  rb_define_method(SwigClassClient.klass, "GetClient", VALUEFUNC(_wrap_Client_GetClient), -1);
  rb_define_method(SwigClassClient.klass, "SendIDMEF", VALUEFUNC(_wrap_Client_SendIDMEF), -1);
  rb_define_method(SwigClassClient.klass, "RecvIDMEF", VALUEFUNC(_wrap_Client_RecvIDMEF), -1);
  rb_define_method(SwigClassClient.klass, "GetFlags", VALUEFUNC(_wrap_Client_GetFlags), -1);
  rb_define_method(SwigClassClient.klass, "SetFlags", VALUEFUNC(_wrap_Client_SetFlags), -1);
  rb_define_method(SwigClassClient.klass, "GetRequiredPermission", VALUEFUNC(_wrap_Client_GetRequiredPermission), -1);
  rb_define_method(SwigClassClient.klass, "SetRequiredPermission", VALUEFUNC(_wrap_Client_SetRequiredPermission), -1);
  rb_define_method(SwigClassClient.klass, "GetConfigFilename", VALUEFUNC(_wrap_Client_GetConfigFilename), -1);
  rb_define_method(SwigClassClient.klass, "SetConfigFilename", VALUEFUNC(_wrap_Client_SetConfigFilename), -1);
  rb_define_method(SwigClassClient.klass, "GetConnectionPool", VALUEFUNC(_wrap_Client_GetConnectionPool), -1);
  rb_define_method(SwigClassClient.klass, "SetConnectionPool", VALUEFUNC(_wrap_Client_SetConnectionPool), -1);
  rb_define_method(SwigClassClient.klass, "<<", VALUEFUNC(_wrap_Client___lshift__), -1);
  rb_define_method(SwigClassClient.klass, ">>", VALUEFUNC(_wrap_Client___rshift__), -1);
  rb_define_singleton_method(SwigClassClient.klass, "SetRecvTimeout", VALUEFUNC(_wrap_Client_SetRecvTimeout), -1);
  SwigClassClient.mark = 0;
  SwigClassClient.destroy = (void (*)(void *)) free_Prelude_Client;
  SwigClassClient.trackObjects = 0;
  
  SwigClassClientEasy.klass = rb_define_class_under(mPreludeEasy, "ClientEasy", ((swig_class *) SWIGTYPE_p_Prelude__Client->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__ClientEasy, (void *) &SwigClassClientEasy);
  rb_define_alloc_func(SwigClassClientEasy.klass, _wrap_ClientEasy_allocate);
  rb_define_method(SwigClassClientEasy.klass, "initialize", VALUEFUNC(_wrap_new_ClientEasy), -1);
  SwigClassClientEasy.mark = 0;
  SwigClassClientEasy.destroy = (void (*)(void *)) free_Prelude_ClientEasy;
  SwigClassClientEasy.trackObjects = 0;
  
  SwigClassIDMEFCriterion.klass = rb_define_class_under(mPreludeEasy, "IDMEFCriterion", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__IDMEFCriterion, (void *) &SwigClassIDMEFCriterion);
  rb_define_alloc_func(SwigClassIDMEFCriterion.klass, _wrap_IDMEFCriterion_allocate);
  rb_define_method(SwigClassIDMEFCriterion.klass, "initialize", VALUEFUNC(_wrap_new_IDMEFCriterion), -1);
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOCASE", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOCASE)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_EQUAL", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_EQUAL)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_EQUAL_NOCASE", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_EQUAL_NOCASE)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT_EQUAL", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT_EQUAL)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT_EQUAL_NOCASE", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT_EQUAL_NOCASE)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_LESSER", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_LESSER)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_LESSER_OR_EQUAL", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_LESSER_OR_EQUAL)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_GREATER", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_GREATER)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_GREATER_OR_EQUAL", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_GREATER_OR_EQUAL)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_SUBSTR", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_SUBSTR)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_SUBSTR_NOCASE", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_SUBSTR_NOCASE)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT_SUBSTR", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT_SUBSTR)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT_SUBSTR_NOCASE", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT_SUBSTR_NOCASE)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_REGEX", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_REGEX)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_REGEX_NOCASE", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_REGEX_NOCASE)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT_REGEX", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT_REGEX)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT_REGEX_NOCASE", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT_REGEX_NOCASE)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NULL", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NULL)));
  rb_define_const(SwigClassIDMEFCriterion.klass, "OPERATOR_NOT_NULL", SWIG_From_int(static_cast< int >(Prelude::IDMEFCriterion::OPERATOR_NOT_NULL)));
  SwigClassIDMEFCriterion.mark = 0;
  SwigClassIDMEFCriterion.destroy = (void (*)(void *)) free_Prelude_IDMEFCriterion;
  SwigClassIDMEFCriterion.trackObjects = 0;
  
  SwigClassIDMEFCriteria.klass = rb_define_class_under(mPreludeEasy, "IDMEFCriteria", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__IDMEFCriteria, (void *) &SwigClassIDMEFCriteria);
  rb_define_alloc_func(SwigClassIDMEFCriteria.klass, _wrap_IDMEFCriteria_allocate);
  rb_define_method(SwigClassIDMEFCriteria.klass, "initialize", VALUEFUNC(_wrap_new_IDMEFCriteria), -1);
  rb_define_method(SwigClassIDMEFCriteria.klass, "Match", VALUEFUNC(_wrap_IDMEFCriteria_Match), -1);
  rb_define_method(SwigClassIDMEFCriteria.klass, "Clone", VALUEFUNC(_wrap_IDMEFCriteria_Clone), -1);
  rb_define_method(SwigClassIDMEFCriteria.klass, "ANDCriteria", VALUEFUNC(_wrap_IDMEFCriteria_ANDCriteria), -1);
  rb_define_method(SwigClassIDMEFCriteria.klass, "ORCriteria", VALUEFUNC(_wrap_IDMEFCriteria_ORCriteria), -1);
  rb_define_method(SwigClassIDMEFCriteria.klass, "ToString", VALUEFUNC(_wrap_IDMEFCriteria_ToString), -1);
  rb_define_method(SwigClassIDMEFCriteria.klass, "to_s", VALUEFUNC(_wrap_IDMEFCriteria___str__), -1);
  SwigClassIDMEFCriteria.mark = 0;
  SwigClassIDMEFCriteria.destroy = (void (*)(void *)) free_Prelude_IDMEFCriteria;
  SwigClassIDMEFCriteria.trackObjects = 0;
  
  SwigClassIDMEFValue.klass = rb_define_class_under(mPreludeEasy, "IDMEFValue", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__IDMEFValue, (void *) &SwigClassIDMEFValue);
  rb_define_alloc_func(SwigClassIDMEFValue.klass, _wrap_IDMEFValue_allocate);
  rb_define_method(SwigClassIDMEFValue.klass, "initialize", VALUEFUNC(_wrap_new_IDMEFValue), -1);
  rb_define_method(SwigClassIDMEFValue.klass, "GetType", VALUEFUNC(_wrap_IDMEFValue_GetType), -1);
  rb_define_method(SwigClassIDMEFValue.klass, "IsNull", VALUEFUNC(_wrap_IDMEFValue_IsNull), -1);
  rb_define_method(SwigClassIDMEFValue.klass, "Match", VALUEFUNC(_wrap_IDMEFValue_Match), -1);
  rb_define_method(SwigClassIDMEFValue.klass, "Clone", VALUEFUNC(_wrap_IDMEFValue_Clone), -1);
  SwigClassIDMEFValue.mark = 0;
  SwigClassIDMEFValue.destroy = (void (*)(void *)) free_Prelude_IDMEFValue;
  SwigClassIDMEFValue.trackObjects = 0;
  
  SwigClassIDMEFPath.klass = rb_define_class_under(mPreludeEasy, "IDMEFPath", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__IDMEFPath, (void *) &SwigClassIDMEFPath);
  rb_define_alloc_func(SwigClassIDMEFPath.klass, _wrap_IDMEFPath_allocate);
  rb_define_method(SwigClassIDMEFPath.klass, "initialize", VALUEFUNC(_wrap_new_IDMEFPath), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "Get", VALUEFUNC(_wrap_IDMEFPath_Get), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "Set", VALUEFUNC(_wrap_IDMEFPath_Set), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "GetClass", VALUEFUNC(_wrap_IDMEFPath_GetClass), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "GetValueType", VALUEFUNC(_wrap_IDMEFPath_GetValueType), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "SetIndex", VALUEFUNC(_wrap_IDMEFPath_SetIndex), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "UndefineIndex", VALUEFUNC(_wrap_IDMEFPath_UndefineIndex), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "GetIndex", VALUEFUNC(_wrap_IDMEFPath_GetIndex), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "MakeChild", VALUEFUNC(_wrap_IDMEFPath_MakeChild), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "MakeParent", VALUEFUNC(_wrap_IDMEFPath_MakeParent), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "Compare", VALUEFUNC(_wrap_IDMEFPath_Compare), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "Clone", VALUEFUNC(_wrap_IDMEFPath_Clone), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "CheckOperator", VALUEFUNC(_wrap_IDMEFPath_CheckOperator), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "GetApplicableOperators", VALUEFUNC(_wrap_IDMEFPath_GetApplicableOperators), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "GetName", VALUEFUNC(_wrap_IDMEFPath_GetName), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "IsAmbiguous", VALUEFUNC(_wrap_IDMEFPath_IsAmbiguous), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "HasLists", VALUEFUNC(_wrap_IDMEFPath_HasLists), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "IsList", VALUEFUNC(_wrap_IDMEFPath_IsList), -1);
  rb_define_method(SwigClassIDMEFPath.klass, "GetDepth", VALUEFUNC(_wrap_IDMEFPath_GetDepth), -1);
  SwigClassIDMEFPath.mark = 0;
  SwigClassIDMEFPath.destroy = (void (*)(void *)) free_Prelude_IDMEFPath;
  SwigClassIDMEFPath.trackObjects = 0;
  
  SwigClassIDMEFTime.klass = rb_define_class_under(mPreludeEasy, "IDMEFTime", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__IDMEFTime, (void *) &SwigClassIDMEFTime);
  rb_define_alloc_func(SwigClassIDMEFTime.klass, _wrap_IDMEFTime_allocate);
  rb_define_method(SwigClassIDMEFTime.klass, "initialize", VALUEFUNC(_wrap_new_IDMEFTime), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "Set", VALUEFUNC(_wrap_IDMEFTime_Set), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "SetSec", VALUEFUNC(_wrap_IDMEFTime_SetSec), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "SetUSec", VALUEFUNC(_wrap_IDMEFTime_SetUSec), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "SetGmtOffset", VALUEFUNC(_wrap_IDMEFTime_SetGmtOffset), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "GetSec", VALUEFUNC(_wrap_IDMEFTime_GetSec), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "GetUSec", VALUEFUNC(_wrap_IDMEFTime_GetUSec), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "GetGmtOffset", VALUEFUNC(_wrap_IDMEFTime_GetGmtOffset), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "Clone", VALUEFUNC(_wrap_IDMEFTime_Clone), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "ToString", VALUEFUNC(_wrap_IDMEFTime_ToString), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "to_i", VALUEFUNC(_wrap_IDMEFTime___int__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "__long__", VALUEFUNC(_wrap_IDMEFTime___long__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "to_f", VALUEFUNC(_wrap_IDMEFTime___float__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "to_s", VALUEFUNC(_wrap_IDMEFTime___str__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, ">=", VALUEFUNC(_wrap_IDMEFTime___ge__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "<=", VALUEFUNC(_wrap_IDMEFTime___le__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "==", VALUEFUNC(_wrap_IDMEFTime___eq__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, ">", VALUEFUNC(_wrap_IDMEFTime___gt__), -1);
  rb_define_method(SwigClassIDMEFTime.klass, "<", VALUEFUNC(_wrap_IDMEFTime___lt__), -1);
  SwigClassIDMEFTime.mark = 0;
  SwigClassIDMEFTime.destroy = (void (*)(void *)) free_Prelude_IDMEFTime;
  SwigClassIDMEFTime.trackObjects = 0;
  
  SwigClassIDMEF.klass = rb_define_class_under(mPreludeEasy, "IDMEF", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Prelude__IDMEF, (void *) &SwigClassIDMEF);
  rb_define_alloc_func(SwigClassIDMEF.klass, _wrap_IDMEF_allocate);
  rb_define_method(SwigClassIDMEF.klass, "initialize", VALUEFUNC(_wrap_new_IDMEF), -1);
  rb_define_method(SwigClassIDMEF.klass, "Set", VALUEFUNC(_wrap_IDMEF_Set), -1);
  rb_define_method(SwigClassIDMEF.klass, "Get", VALUEFUNC(_wrap_IDMEF_Get), -1);
  rb_define_method(SwigClassIDMEF.klass, "Clone", VALUEFUNC(_wrap_IDMEF_Clone), -1);
  rb_define_method(SwigClassIDMEF.klass, "ToString", VALUEFUNC(_wrap_IDMEF_ToString), -1);
  rb_define_method(SwigClassIDMEF.klass, "to_s", VALUEFUNC(_wrap_IDMEF___str__), -1);
  rb_define_method(SwigClassIDMEF.klass, "Write", VALUEFUNC(_wrap_IDMEF_Write), -1);
  rb_define_method(SwigClassIDMEF.klass, "Read", VALUEFUNC(_wrap_IDMEF_Read), -1);
  rb_define_method(SwigClassIDMEF.klass, ">>", VALUEFUNC(_wrap_IDMEF___rshift__), -1);
  rb_define_method(SwigClassIDMEF.klass, "<<", VALUEFUNC(_wrap_IDMEF___lshift__), -1);
  SwigClassIDMEF.mark = 0;
  SwigClassIDMEF.destroy = (void (*)(void *)) free_Prelude_IDMEF;
  SwigClassIDMEF.trackObjects = 0;
}

